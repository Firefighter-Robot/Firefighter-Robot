
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d8c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001ebc  08001ebc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001ebc  08001ebc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001ebc  08001ebc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ebc  08001ebc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ec0  08001ec0  00011ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000004  08001ec8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08001ec8  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009424  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000175d  00000000  00000000  00029451  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001914  00000000  00000000  0002abae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000400  00000000  00000000  0002c4c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000338  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00003c40  00000000  00000000  0002cc00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00004970  00000000  00000000  00030840  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000dc55  00000000  00000000  000351b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00042e05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e78  00000000  00000000  00042e80  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08001ea4 	.word	0x08001ea4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08001ea4 	.word	0x08001ea4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_fmul>:
 80009ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009b4:	bf1e      	ittt	ne
 80009b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009ba:	ea92 0f0c 	teqne	r2, ip
 80009be:	ea93 0f0c 	teqne	r3, ip
 80009c2:	d06f      	beq.n	8000aa4 <__aeabi_fmul+0xf8>
 80009c4:	441a      	add	r2, r3
 80009c6:	ea80 0c01 	eor.w	ip, r0, r1
 80009ca:	0240      	lsls	r0, r0, #9
 80009cc:	bf18      	it	ne
 80009ce:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009d2:	d01e      	beq.n	8000a12 <__aeabi_fmul+0x66>
 80009d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80009d8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009dc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009e0:	fba0 3101 	umull	r3, r1, r0, r1
 80009e4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009e8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80009ec:	bf3e      	ittt	cc
 80009ee:	0049      	lslcc	r1, r1, #1
 80009f0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009f4:	005b      	lslcc	r3, r3, #1
 80009f6:	ea40 0001 	orr.w	r0, r0, r1
 80009fa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80009fe:	2afd      	cmp	r2, #253	; 0xfd
 8000a00:	d81d      	bhi.n	8000a3e <__aeabi_fmul+0x92>
 8000a02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000a06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0a:	bf08      	it	eq
 8000a0c:	f020 0001 	biceq.w	r0, r0, #1
 8000a10:	4770      	bx	lr
 8000a12:	f090 0f00 	teq	r0, #0
 8000a16:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a1a:	bf08      	it	eq
 8000a1c:	0249      	lsleq	r1, r1, #9
 8000a1e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a22:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a26:	3a7f      	subs	r2, #127	; 0x7f
 8000a28:	bfc2      	ittt	gt
 8000a2a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a2e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a32:	4770      	bxgt	lr
 8000a34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	3a01      	subs	r2, #1
 8000a3e:	dc5d      	bgt.n	8000afc <__aeabi_fmul+0x150>
 8000a40:	f112 0f19 	cmn.w	r2, #25
 8000a44:	bfdc      	itt	le
 8000a46:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000a4a:	4770      	bxle	lr
 8000a4c:	f1c2 0200 	rsb	r2, r2, #0
 8000a50:	0041      	lsls	r1, r0, #1
 8000a52:	fa21 f102 	lsr.w	r1, r1, r2
 8000a56:	f1c2 0220 	rsb	r2, r2, #32
 8000a5a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a5e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a62:	f140 0000 	adc.w	r0, r0, #0
 8000a66:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a6a:	bf08      	it	eq
 8000a6c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a70:	4770      	bx	lr
 8000a72:	f092 0f00 	teq	r2, #0
 8000a76:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a7a:	bf02      	ittt	eq
 8000a7c:	0040      	lsleq	r0, r0, #1
 8000a7e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a82:	3a01      	subeq	r2, #1
 8000a84:	d0f9      	beq.n	8000a7a <__aeabi_fmul+0xce>
 8000a86:	ea40 000c 	orr.w	r0, r0, ip
 8000a8a:	f093 0f00 	teq	r3, #0
 8000a8e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a92:	bf02      	ittt	eq
 8000a94:	0049      	lsleq	r1, r1, #1
 8000a96:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a9a:	3b01      	subeq	r3, #1
 8000a9c:	d0f9      	beq.n	8000a92 <__aeabi_fmul+0xe6>
 8000a9e:	ea41 010c 	orr.w	r1, r1, ip
 8000aa2:	e78f      	b.n	80009c4 <__aeabi_fmul+0x18>
 8000aa4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000aa8:	ea92 0f0c 	teq	r2, ip
 8000aac:	bf18      	it	ne
 8000aae:	ea93 0f0c 	teqne	r3, ip
 8000ab2:	d00a      	beq.n	8000aca <__aeabi_fmul+0x11e>
 8000ab4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ab8:	bf18      	it	ne
 8000aba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	d1d8      	bne.n	8000a72 <__aeabi_fmul+0xc6>
 8000ac0:	ea80 0001 	eor.w	r0, r0, r1
 8000ac4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ac8:	4770      	bx	lr
 8000aca:	f090 0f00 	teq	r0, #0
 8000ace:	bf17      	itett	ne
 8000ad0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ad4:	4608      	moveq	r0, r1
 8000ad6:	f091 0f00 	teqne	r1, #0
 8000ada:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ade:	d014      	beq.n	8000b0a <__aeabi_fmul+0x15e>
 8000ae0:	ea92 0f0c 	teq	r2, ip
 8000ae4:	d101      	bne.n	8000aea <__aeabi_fmul+0x13e>
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	d10f      	bne.n	8000b0a <__aeabi_fmul+0x15e>
 8000aea:	ea93 0f0c 	teq	r3, ip
 8000aee:	d103      	bne.n	8000af8 <__aeabi_fmul+0x14c>
 8000af0:	024b      	lsls	r3, r1, #9
 8000af2:	bf18      	it	ne
 8000af4:	4608      	movne	r0, r1
 8000af6:	d108      	bne.n	8000b0a <__aeabi_fmul+0x15e>
 8000af8:	ea80 0001 	eor.w	r0, r0, r1
 8000afc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_fdiv>:
 8000b14:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b1c:	bf1e      	ittt	ne
 8000b1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b22:	ea92 0f0c 	teqne	r2, ip
 8000b26:	ea93 0f0c 	teqne	r3, ip
 8000b2a:	d069      	beq.n	8000c00 <__aeabi_fdiv+0xec>
 8000b2c:	eba2 0203 	sub.w	r2, r2, r3
 8000b30:	ea80 0c01 	eor.w	ip, r0, r1
 8000b34:	0249      	lsls	r1, r1, #9
 8000b36:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b3a:	d037      	beq.n	8000bac <__aeabi_fdiv+0x98>
 8000b3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b40:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b44:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b48:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	bf38      	it	cc
 8000b50:	005b      	lslcc	r3, r3, #1
 8000b52:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000b56:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	bf24      	itt	cs
 8000b5e:	1a5b      	subcs	r3, r3, r1
 8000b60:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b64:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b68:	bf24      	itt	cs
 8000b6a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b6e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b72:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b76:	bf24      	itt	cs
 8000b78:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b7c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b80:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b84:	bf24      	itt	cs
 8000b86:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b8a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	bf18      	it	ne
 8000b92:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b96:	d1e0      	bne.n	8000b5a <__aeabi_fdiv+0x46>
 8000b98:	2afd      	cmp	r2, #253	; 0xfd
 8000b9a:	f63f af50 	bhi.w	8000a3e <__aeabi_fmul+0x92>
 8000b9e:	428b      	cmp	r3, r1
 8000ba0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bb0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bb4:	327f      	adds	r2, #127	; 0x7f
 8000bb6:	bfc2      	ittt	gt
 8000bb8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000bbc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000bc0:	4770      	bxgt	lr
 8000bc2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc6:	f04f 0300 	mov.w	r3, #0
 8000bca:	3a01      	subs	r2, #1
 8000bcc:	e737      	b.n	8000a3e <__aeabi_fmul+0x92>
 8000bce:	f092 0f00 	teq	r2, #0
 8000bd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000bd6:	bf02      	ittt	eq
 8000bd8:	0040      	lsleq	r0, r0, #1
 8000bda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000bde:	3a01      	subeq	r2, #1
 8000be0:	d0f9      	beq.n	8000bd6 <__aeabi_fdiv+0xc2>
 8000be2:	ea40 000c 	orr.w	r0, r0, ip
 8000be6:	f093 0f00 	teq	r3, #0
 8000bea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bee:	bf02      	ittt	eq
 8000bf0:	0049      	lsleq	r1, r1, #1
 8000bf2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000bf6:	3b01      	subeq	r3, #1
 8000bf8:	d0f9      	beq.n	8000bee <__aeabi_fdiv+0xda>
 8000bfa:	ea41 010c 	orr.w	r1, r1, ip
 8000bfe:	e795      	b.n	8000b2c <__aeabi_fdiv+0x18>
 8000c00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c04:	ea92 0f0c 	teq	r2, ip
 8000c08:	d108      	bne.n	8000c1c <__aeabi_fdiv+0x108>
 8000c0a:	0242      	lsls	r2, r0, #9
 8000c0c:	f47f af7d 	bne.w	8000b0a <__aeabi_fmul+0x15e>
 8000c10:	ea93 0f0c 	teq	r3, ip
 8000c14:	f47f af70 	bne.w	8000af8 <__aeabi_fmul+0x14c>
 8000c18:	4608      	mov	r0, r1
 8000c1a:	e776      	b.n	8000b0a <__aeabi_fmul+0x15e>
 8000c1c:	ea93 0f0c 	teq	r3, ip
 8000c20:	d104      	bne.n	8000c2c <__aeabi_fdiv+0x118>
 8000c22:	024b      	lsls	r3, r1, #9
 8000c24:	f43f af4c 	beq.w	8000ac0 <__aeabi_fmul+0x114>
 8000c28:	4608      	mov	r0, r1
 8000c2a:	e76e      	b.n	8000b0a <__aeabi_fmul+0x15e>
 8000c2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c30:	bf18      	it	ne
 8000c32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c36:	d1ca      	bne.n	8000bce <__aeabi_fdiv+0xba>
 8000c38:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000c3c:	f47f af5c 	bne.w	8000af8 <__aeabi_fmul+0x14c>
 8000c40:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000c44:	f47f af3c 	bne.w	8000ac0 <__aeabi_fmul+0x114>
 8000c48:	e75f      	b.n	8000b0a <__aeabi_fmul+0x15e>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_f2uiz>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	d20e      	bcs.n	8000c6e <__aeabi_f2uiz+0x22>
 8000c50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000c54:	d30b      	bcc.n	8000c6e <__aeabi_f2uiz+0x22>
 8000c56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000c5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c5e:	d409      	bmi.n	8000c74 <__aeabi_f2uiz+0x28>
 8000c60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c68:	fa23 f002 	lsr.w	r0, r3, r2
 8000c6c:	4770      	bx	lr
 8000c6e:	f04f 0000 	mov.w	r0, #0
 8000c72:	4770      	bx	lr
 8000c74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000c78:	d101      	bne.n	8000c7e <__aeabi_f2uiz+0x32>
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	d102      	bne.n	8000c84 <__aeabi_f2uiz+0x38>
 8000c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c82:	4770      	bx	lr
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop

08000c8c <HAL_DC_Channels_init>:


TIMx_config_t Timer2;

void HAL_DC_Channels_init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
	Timer2.MODE = TIMx_MODE_PWM1;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	801a      	strh	r2, [r3, #0]
	Timer2.COUNT_MODE = TIMx_COUNT_MODE_UP;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	805a      	strh	r2, [r3, #2]
	Timer2.Prescalers =7;      // 1M
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000c9e:	2207      	movs	r2, #7
 8000ca0:	809a      	strh	r2, [r3, #4]
	// init 4 Channels with 0 duty cycle
	Timer2.TopValue = Top_Value;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000ca4:	f242 7210 	movw	r2, #10000	; 0x2710
 8000ca8:	609a      	str	r2, [r3, #8]
	Timer2.CompareValue = Top_Value;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000cac:	f242 7210 	movw	r2, #10000	; 0x2710
 8000cb0:	60da      	str	r2, [r3, #12]

	// set Channel 1 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Front_Left_Motor);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	490c      	ldr	r1, [pc, #48]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000cb6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cba:	f000 fe81 	bl	80019c0 <MCAL_TIMx_Init>

	// set Channel 2 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Front_Right_Motor);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	4909      	ldr	r1, [pc, #36]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000cc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cc6:	f000 fe7b 	bl	80019c0 <MCAL_TIMx_Init>

	// set Channel 3 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Back_Left_Motor);
 8000cca:	2202      	movs	r2, #2
 8000ccc:	4906      	ldr	r1, [pc, #24]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000cce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cd2:	f000 fe75 	bl	80019c0 <MCAL_TIMx_Init>

	// set Channel 4 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Back_Right_Motor);
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4903      	ldr	r1, [pc, #12]	; (8000ce8 <HAL_DC_Channels_init+0x5c>)
 8000cda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cde:	f000 fe6f 	bl	80019c0 <MCAL_TIMx_Init>
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000006c 	.word	0x2000006c

08000cec <Car_Routation>:



void Car_Routation(char angle , char direction)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]

	// todo equation to calculate the duty cycle from angle

	if(direction == Car_TurnLeft)
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d121      	bne.n	8000d46 <Car_Routation+0x5a>
	{
		// by iteration set the duty cycle  according to specific angle to the Front_Right_Motor
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(70),Front_Right_Motor);
 8000d02:	2201      	movs	r2, #1
 8000d04:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000d08:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d0c:	f001 f836 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>

		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Front_Left_Motor);
 8000d10:	2200      	movs	r2, #0
 8000d12:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d16:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d1a:	f001 f82f 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>

		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Back_Left_Motor);
 8000d1e:	2202      	movs	r2, #2
 8000d20:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d28:	f001 f828 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>

		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Back_Right_Motor);
 8000d2c:	2203      	movs	r2, #3
 8000d2e:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d36:	f001 f821 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>


		// by iteration set delay to specific rotation
		delay_ms(100);
 8000d3a:	2064      	movs	r0, #100	; 0x64
 8000d3c:	f000 fa8f 	bl	800125e <delay_ms>

		// stop the movement
		Car_Stop_Moving();
 8000d40:	f000 f857 	bl	8000df2 <Car_Stop_Moving>
		// stop the movement
		Car_Stop_Moving();


	}
}
 8000d44:	e023      	b.n	8000d8e <Car_Routation+0xa2>
	else if(direction == Car_TurnRight)
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d120      	bne.n	8000d8e <Car_Routation+0xa2>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Front_Left_Motor);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000d52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d56:	f001 f811 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Front_Right_Motor);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d64:	f001 f80a 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Back_Left_Motor);
 8000d68:	2202      	movs	r2, #2
 8000d6a:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d72:	f001 f803 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(15),Back_Right_Motor);
 8000d76:	2203      	movs	r2, #3
 8000d78:	f242 1134 	movw	r1, #8500	; 0x2134
 8000d7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d80:	f000 fffc 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
		delay_ms(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 fa6a 	bl	800125e <delay_ms>
		Car_Stop_Moving();
 8000d8a:	f000 f832 	bl	8000df2 <Car_Stop_Moving>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <Car_Move>:



void Car_Move(char speed , char distance)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	460a      	mov	r2, r1
 8000da0:	71fb      	strb	r3, [r7, #7]
 8000da2:	4613      	mov	r3, r2
 8000da4:	71bb      	strb	r3, [r7, #6]
	// by iteration set duty cycle to specific speed
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Front_Left_Motor);
 8000da6:	2200      	movs	r2, #0
 8000da8:	f241 3188 	movw	r1, #5000	; 0x1388
 8000dac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000db0:	f000 ffe4 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Front_Right_Motor);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f241 3188 	movw	r1, #5000	; 0x1388
 8000dba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dbe:	f000 ffdd 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Back_Left_Motor);
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	f241 3188 	movw	r1, #5000	; 0x1388
 8000dc8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dcc:	f000 ffd6 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Back_Right_Motor);
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	f241 3188 	movw	r1, #5000	; 0x1388
 8000dd6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dda:	f000 ffcf 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>

	// by iteration set delay to specific distance
	delay_ms(2000);
 8000dde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000de2:	f000 fa3c 	bl	800125e <delay_ms>

	// stop the movement
	Car_Stop_Moving();
 8000de6:	f000 f804 	bl	8000df2 <Car_Stop_Moving>

}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <Car_Stop_Moving>:
void Car_Stop_Moving(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0
	MCAL_TIMx_DeInit(TIM2);
 8000df6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dfa:	f001 f801 	bl	8001e00 <MCAL_TIMx_DeInit>
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <flame_init>:
#include "Flame_Sensor.h"


void flame_init(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0




}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <Flame_Frontmid_Read>:
int Flame_Frontmid_Read()
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(0);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 fa4e 	bl	80012b4 <MCAL_ADC_Read>
 8000e18:	4603      	mov	r3, r0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <Flame_FrontRight_Read>:
int Flame_FrontRight_Read()
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(1);
 8000e22:	2001      	movs	r0, #1
 8000e24:	f000 fa46 	bl	80012b4 <MCAL_ADC_Read>
 8000e28:	4603      	mov	r3, r0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <Flame_FrontLeft_Read>:
int Flame_FrontLeft_Read()
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(2);
 8000e32:	2002      	movs	r0, #2
 8000e34:	f000 fa3e 	bl	80012b4 <MCAL_ADC_Read>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <Flame_Back_Read>:
int Flame_Back_Read()
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(3);
 8000e42:	2003      	movs	r0, #3
 8000e44:	f000 fa36 	bl	80012b4 <MCAL_ADC_Read>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <Flame_Right_Read>:
int Flame_Right_Read()
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(4);
 8000e52:	2004      	movs	r0, #4
 8000e54:	f000 fa2e 	bl	80012b4 <MCAL_ADC_Read>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <Flame_Left_Read>:
int Flame_Left_Read()
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(5);
 8000e62:	2005      	movs	r0, #5
 8000e64:	f000 fa26 	bl	80012b4 <MCAL_ADC_Read>
 8000e68:	4603      	mov	r3, r0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <Ultrasonic_init>:

GPIO_Pinconfig_t GPIO_Pin;


void Ultrasonic_init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

	// set timer 4 configuration
	MCAL_TIM4_CAP_Init();
 8000e74:	f000 ff18 	bl	8001ca8 <MCAL_TIM4_CAP_Init>

	// set trigger as an output
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <Ultrasonic_init+0x28>)
 8000e7a:	2206      	movs	r2, #6
 8000e7c:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <Ultrasonic_init+0x28>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	70da      	strb	r2, [r3, #3]
	GPIO_Pin.pinNumber = Trigger_Pin;
 8000e84:	4b04      	ldr	r3, [pc, #16]	; (8000e98 <Ultrasonic_init+0x28>)
 8000e86:	2220      	movs	r2, #32
 8000e88:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(PORT,&GPIO_Pin);
 8000e8a:	4903      	ldr	r1, [pc, #12]	; (8000e98 <Ultrasonic_init+0x28>)
 8000e8c:	4803      	ldr	r0, [pc, #12]	; (8000e9c <Ultrasonic_init+0x2c>)
 8000e8e:	f000 fbc4 	bl	800161a <MCAL_GPIO_Init>

}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	2000007c 	.word	0x2000007c
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <Ultrasnic_Read>:

uint8_t Ultrasnic_Read(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
	uint8_t Distance;

	MCAL_TIM4_CAP_Init();
 8000ea6:	f000 feff 	bl	8001ca8 <MCAL_TIM4_CAP_Init>

	//trigger pulse for 10ms to start the ultrasonic
	MCAL_GPIO_WritePin(PORT, Trigger_Pin, GPIO_PIN_SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	2120      	movs	r1, #32
 8000eae:	480e      	ldr	r0, [pc, #56]	; (8000ee8 <Ultrasnic_Read+0x48>)
 8000eb0:	f000 fc32 	bl	8001718 <MCAL_GPIO_WritePin>
	delay_ms(10);
 8000eb4:	200a      	movs	r0, #10
 8000eb6:	f000 f9d2 	bl	800125e <delay_ms>
	MCAL_GPIO_WritePin(PORT, Trigger_Pin, GPIO_PIN_RESET);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2120      	movs	r1, #32
 8000ebe:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <Ultrasnic_Read+0x48>)
 8000ec0:	f000 fc2a 	bl	8001718 <MCAL_GPIO_WritePin>

	// The speed of sound in free space is 340 m/s = 34000 cm/s
	// the speed = Distance / time
	// the Distance = speed * time = 34000 * time (the time of pulse on ECHO pin)
	Distance = (MCAL_TIM4_CAP_Get_High() * 34000);
 8000ec4:	f000 ff14 	bl	8001cf0 <MCAL_TIM4_CAP_Get_High>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	4908      	ldr	r1, [pc, #32]	; (8000eec <Ultrasnic_Read+0x4c>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fd6d 	bl	80009ac <__aeabi_fmul>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff feb9 	bl	8000c4c <__aeabi_f2uiz>
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]

	return Distance;
 8000ede:	79fb      	ldrb	r3, [r7, #7]

}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	4704d000 	.word	0x4704d000

08000ef0 <Clock_INIT>:
}Redirection;



void Clock_INIT(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
    //set on the clock for PORTA
    RCC_GPIOA_CLK_EN();
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <Clock_INIT+0x6c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a18      	ldr	r2, [pc, #96]	; (8000f5c <Clock_INIT+0x6c>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
    //set on the clock for PORTB
    RCC_GPIOB_CLK_EN();
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <Clock_INIT+0x6c>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a15      	ldr	r2, [pc, #84]	; (8000f5c <Clock_INIT+0x6c>)
 8000f06:	f043 0308 	orr.w	r3, r3, #8
 8000f0a:	6193      	str	r3, [r2, #24]
    //set on the clock for AFIO
    RCC_GPIOC_CLK_EN();
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <Clock_INIT+0x6c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <Clock_INIT+0x6c>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6193      	str	r3, [r2, #24]
    RCC_AFIO_CLK_EN();
 8000f18:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <Clock_INIT+0x6c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <Clock_INIT+0x6c>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
    RCC_TIM2_CLK_Enable();
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <Clock_INIT+0x6c>)
 8000f26:	69db      	ldr	r3, [r3, #28]
 8000f28:	4a0c      	ldr	r2, [pc, #48]	; (8000f5c <Clock_INIT+0x6c>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	61d3      	str	r3, [r2, #28]
    RCC_TIM3_CLK_Enable();
 8000f30:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <Clock_INIT+0x6c>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a09      	ldr	r2, [pc, #36]	; (8000f5c <Clock_INIT+0x6c>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	61d3      	str	r3, [r2, #28]
    RCC_TIM4_CLK_Enable();
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <Clock_INIT+0x6c>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <Clock_INIT+0x6c>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	61d3      	str	r3, [r2, #28]
    RCC_ADC1_CLK_Enable();
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <Clock_INIT+0x6c>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <Clock_INIT+0x6c>)
 8000f4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f52:	6193      	str	r3, [r2, #24]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr
 8000f5c:	40021000 	.word	0x40021000

08000f60 <Flame_MaxReading>:




Redirection Flame_MaxReading()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
	int FrontMid = Flame_Frontmid_Read() - (int)Flame_Threshold;
 8000f66:	f7ff ff52 	bl	8000e0e <Flame_Frontmid_Read>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	3b28      	subs	r3, #40	; 0x28
 8000f6e:	617b      	str	r3, [r7, #20]
	int FrontRight = Flame_FrontRight_Read() - (int)Flame_Threshold;
 8000f70:	f7ff ff55 	bl	8000e1e <Flame_FrontRight_Read>
 8000f74:	4603      	mov	r3, r0
 8000f76:	3b28      	subs	r3, #40	; 0x28
 8000f78:	613b      	str	r3, [r7, #16]
	int FrontLeft = Flame_FrontLeft_Read() - (int)Flame_Threshold;
 8000f7a:	f7ff ff58 	bl	8000e2e <Flame_FrontLeft_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	3b28      	subs	r3, #40	; 0x28
 8000f82:	60fb      	str	r3, [r7, #12]
	int Back = Flame_Back_Read() - (int)Flame_Threshold;
 8000f84:	f7ff ff5b 	bl	8000e3e <Flame_Back_Read>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	3b28      	subs	r3, #40	; 0x28
 8000f8c:	60bb      	str	r3, [r7, #8]
	int Right = Flame_Right_Read() - (int)Flame_Threshold;
 8000f8e:	f7ff ff5e 	bl	8000e4e <Flame_Right_Read>
 8000f92:	4603      	mov	r3, r0
 8000f94:	3b28      	subs	r3, #40	; 0x28
 8000f96:	607b      	str	r3, [r7, #4]
	int Left = Flame_Left_Read() - (int)Flame_Threshold;
 8000f98:	f7ff ff61 	bl	8000e5e <Flame_Left_Read>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	3b28      	subs	r3, #40	; 0x28
 8000fa0:	603b      	str	r3, [r7, #0]

	if ((FrontMid > FrontRight) && (FrontMid > FrontLeft) && (FrontMid > Back) && (FrontMid > Right) && (FrontMid > Left))
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dd11      	ble.n	8000fce <Flame_MaxReading+0x6e>
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dd0d      	ble.n	8000fce <Flame_MaxReading+0x6e>
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dd09      	ble.n	8000fce <Flame_MaxReading+0x6e>
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dd05      	ble.n	8000fce <Flame_MaxReading+0x6e>
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dd01      	ble.n	8000fce <Flame_MaxReading+0x6e>
	{
		return Front_mid_en;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e030      	b.n	8001030 <Flame_MaxReading+0xd0>
	}
	else if ((FrontRight > FrontLeft) && (FrontRight > Back) && (FrontRight > Right) && (FrontRight > Left))
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	dd0d      	ble.n	8000ff2 <Flame_MaxReading+0x92>
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dd09      	ble.n	8000ff2 <Flame_MaxReading+0x92>
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dd05      	ble.n	8000ff2 <Flame_MaxReading+0x92>
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	dd01      	ble.n	8000ff2 <Flame_MaxReading+0x92>
	{
		return Front_Right_en;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	e01e      	b.n	8001030 <Flame_MaxReading+0xd0>
	}
	else if ((FrontLeft > Back) && (FrontLeft > Right) && (FrontLeft > Left))
 8000ff2:	68fa      	ldr	r2, [r7, #12]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dd09      	ble.n	800100e <Flame_MaxReading+0xae>
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	dd05      	ble.n	800100e <Flame_MaxReading+0xae>
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	429a      	cmp	r2, r3
 8001008:	dd01      	ble.n	800100e <Flame_MaxReading+0xae>
	{
		return Front_Left_en;
 800100a:	2301      	movs	r3, #1
 800100c:	e010      	b.n	8001030 <Flame_MaxReading+0xd0>
	}
	else if ((Back > Right) && (Back > Left))
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	429a      	cmp	r2, r3
 8001014:	dd05      	ble.n	8001022 <Flame_MaxReading+0xc2>
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	429a      	cmp	r2, r3
 800101c:	dd01      	ble.n	8001022 <Flame_MaxReading+0xc2>
	{
		return Back_en;
 800101e:	2305      	movs	r3, #5
 8001020:	e006      	b.n	8001030 <Flame_MaxReading+0xd0>
	}
	else if ((Right > Left))
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	dd01      	ble.n	800102e <Flame_MaxReading+0xce>
	{
		return Right_en;
 800102a:	2303      	movs	r3, #3
 800102c:	e000      	b.n	8001030 <Flame_MaxReading+0xd0>
	}
	else
	{
		return Left_en;
 800102e:	2304      	movs	r3, #4
	}
}
 8001030:	4618      	mov	r0, r3
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <CarAdjustament>:

void CarAdjustament (Redirection MaxReading)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
	switch (MaxReading)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	3b01      	subs	r3, #1
 8001046:	2b04      	cmp	r3, #4
 8001048:	d81f      	bhi.n	800108a <CarAdjustament+0x52>
 800104a:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <CarAdjustament+0x18>)
 800104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001050:	0800106d 	.word	0x0800106d
 8001054:	08001081 	.word	0x08001081
 8001058:	08001081 	.word	0x08001081
 800105c:	0800106d 	.word	0x0800106d
 8001060:	08001081 	.word	0x08001081
	case Front_Left_en :
	case Left_en :
		//turn left
		while(Flame_MaxReading() != Front_mid_en)
		{
			Car_Routation( angle_step , Car_TurnLeft);
 8001064:	2101      	movs	r1, #1
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff fe40 	bl	8000cec <Car_Routation>
		while(Flame_MaxReading() != Front_mid_en)
 800106c:	f7ff ff78 	bl	8000f60 <Flame_MaxReading>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1f6      	bne.n	8001064 <CarAdjustament+0x2c>
		}
	case Front_Right_en :
	case Right_en :
	case Back_en :
		//turn right
		while(Flame_MaxReading() != Front_mid_en)
 8001076:	e003      	b.n	8001080 <CarAdjustament+0x48>
		{
			Car_Routation( angle_step , Car_TurnRight);
 8001078:	2100      	movs	r1, #0
 800107a:	2005      	movs	r0, #5
 800107c:	f7ff fe36 	bl	8000cec <Car_Routation>
		while(Flame_MaxReading() != Front_mid_en)
 8001080:	f7ff ff6e 	bl	8000f60 <Flame_MaxReading>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f6      	bne.n	8001078 <CarAdjustament+0x40>
		}
	}
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop

08001094 <CarMovements>:


void CarMovements()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	//turn_right -> n * count
	Car_Routation( 90 , Car_TurnRight);
 8001098:	2100      	movs	r1, #0
 800109a:	205a      	movs	r0, #90	; 0x5a
 800109c:	f7ff fe26 	bl	8000cec <Car_Routation>
	Car_Move(Car_Speed_70 , n * DISTANCE);
 80010a0:	4b16      	ldr	r3, [pc, #88]	; (80010fc <CarMovements+0x68>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	0092      	lsls	r2, r2, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	0091      	lsls	r1, r2, #2
 80010b0:	461a      	mov	r2, r3
 80010b2:	460b      	mov	r3, r1
 80010b4:	4413      	add	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	20b8      	movs	r0, #184	; 0xb8
 80010be:	f7ff fe6a 	bl	8000d96 <Car_Move>
	//turn right -> n * count
	Car_Routation( 90 , Car_TurnRight);
 80010c2:	2100      	movs	r1, #0
 80010c4:	205a      	movs	r0, #90	; 0x5a
 80010c6:	f7ff fe11 	bl	8000cec <Car_Routation>
	Car_Move(Car_Speed_70 , n * DISTANCE);
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <CarMovements+0x68>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	0092      	lsls	r2, r2, #2
 80010d4:	4413      	add	r3, r2
 80010d6:	461a      	mov	r2, r3
 80010d8:	0091      	lsls	r1, r2, #2
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	4619      	mov	r1, r3
 80010e6:	20b8      	movs	r0, #184	; 0xb8
 80010e8:	f7ff fe55 	bl	8000d96 <Car_Move>
	n++;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <CarMovements+0x68>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	4a02      	ldr	r2, [pc, #8]	; (80010fc <CarMovements+0x68>)
 80010f4:	6013      	str	r3, [r2, #0]

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000000 	.word	0x20000000

08001100 <CarAction>:

void CarAction ()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	while(!(Ultrasnic_Read() <= ULTRA_Threshold))
 8001104:	e003      	b.n	800110e <CarAction+0xe>
	{
		//move forward
		Car_Move(Car_Speed_70 , distance_step);
 8001106:	2105      	movs	r1, #5
 8001108:	20b8      	movs	r0, #184	; 0xb8
 800110a:	f7ff fe44 	bl	8000d96 <Car_Move>
	while(!(Ultrasnic_Read() <= ULTRA_Threshold))
 800110e:	f7ff fec7 	bl	8000ea0 <Ultrasnic_Read>
 8001112:	4603      	mov	r3, r0
 8001114:	2b14      	cmp	r3, #20
 8001116:	d8f6      	bhi.n	8001106 <CarAction+0x6>
	}
	//Routate the servo
	//Servo_RotationAngle(char angle , char dirction);
	//pumb on
	while(Flame_Frontmid_Read() >= Flame_Threshold)
 8001118:	bf00      	nop
 800111a:	f7ff fe78 	bl	8000e0e <Flame_Frontmid_Read>
 800111e:	4603      	mov	r3, r0
 8001120:	2b27      	cmp	r3, #39	; 0x27
 8001122:	dcfa      	bgt.n	800111a <CarAction+0x1a>
	{
		pumb(pumb_on);
	}
	pumb(pumb_off);
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_Driver_init>:
//void	Init_servo(){}
//void	Init_pumb(){}


void HAL_Driver_init()
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_DC_Channels_init();
 800112c:	f7ff fdae 	bl	8000c8c <HAL_DC_Channels_init>
	Ultrasonic_init();
 8001130:	f7ff fe9e 	bl	8000e70 <Ultrasonic_init>
	flame_init();
 8001134:	f7ff fe65 	bl	8000e02 <flame_init>
	//Init_servo();
	//Init_pumb();
}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <main>:





int main (){
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

	Clock_INIT();
 8001142:	f7ff fed5 	bl	8000ef0 <Clock_INIT>

	HAL_Driver_init();
 8001146:	f7ff ffef 	bl	8001128 <HAL_Driver_init>
	unsigned char object_detected ;
	unsigned char flame_detected ;

	while(1)
	{
		object_detected = (Ultrasnic_Read() <= ULTRA_Threshold);
 800114a:	f7ff fea9 	bl	8000ea0 <Ultrasnic_Read>
 800114e:	4603      	mov	r3, r0
 8001150:	2b14      	cmp	r3, #20
 8001152:	bf94      	ite	ls
 8001154:	2301      	movls	r3, #1
 8001156:	2300      	movhi	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	71fb      	strb	r3, [r7, #7]
		flame_detected = ((Flame_Frontmid_Read() >= Flame_Threshold) || (Flame_FrontRight_Read() >= Flame_Threshold) || (Flame_FrontLeft_Read() >= Flame_Threshold) || (Flame_Back_Read() >= Flame_Threshold) || (Flame_Right_Read() >= Flame_Threshold) || (Flame_Left_Read() >= Flame_Threshold) );
 800115c:	f7ff fe57 	bl	8000e0e <Flame_Frontmid_Read>
 8001160:	4603      	mov	r3, r0
 8001162:	2b27      	cmp	r3, #39	; 0x27
 8001164:	dc18      	bgt.n	8001198 <main+0x5c>
 8001166:	f7ff fe5a 	bl	8000e1e <Flame_FrontRight_Read>
 800116a:	4603      	mov	r3, r0
 800116c:	2b27      	cmp	r3, #39	; 0x27
 800116e:	dc13      	bgt.n	8001198 <main+0x5c>
 8001170:	f7ff fe5d 	bl	8000e2e <Flame_FrontLeft_Read>
 8001174:	4603      	mov	r3, r0
 8001176:	2b27      	cmp	r3, #39	; 0x27
 8001178:	dc0e      	bgt.n	8001198 <main+0x5c>
 800117a:	f7ff fe60 	bl	8000e3e <Flame_Back_Read>
 800117e:	4603      	mov	r3, r0
 8001180:	2b27      	cmp	r3, #39	; 0x27
 8001182:	dc09      	bgt.n	8001198 <main+0x5c>
 8001184:	f7ff fe63 	bl	8000e4e <Flame_Right_Read>
 8001188:	4603      	mov	r3, r0
 800118a:	2b27      	cmp	r3, #39	; 0x27
 800118c:	dc04      	bgt.n	8001198 <main+0x5c>
 800118e:	f7ff fe66 	bl	8000e5e <Flame_Left_Read>
 8001192:	4603      	mov	r3, r0
 8001194:	2b27      	cmp	r3, #39	; 0x27
 8001196:	dd01      	ble.n	800119c <main+0x60>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <main+0x62>
 800119c:	2300      	movs	r3, #0
 800119e:	71bb      	strb	r3, [r7, #6]
		if(!(object_detected || flame_detected))
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d105      	bne.n	80011b2 <main+0x76>
 80011a6:	79bb      	ldrb	r3, [r7, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d102      	bne.n	80011b2 <main+0x76>
		{
			CarMovements();
 80011ac:	f7ff ff72 	bl	8001094 <CarMovements>
 80011b0:	e028      	b.n	8001204 <main+0xc8>
		}
		else if(object_detected && flame_detected) // detected object
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d00e      	beq.n	80011d6 <main+0x9a>
 80011b8:	79bb      	ldrb	r3, [r7, #6]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00b      	beq.n	80011d6 <main+0x9a>
		{
			CarAdjustament (Flame_MaxReading());
 80011be:	f7ff fecf 	bl	8000f60 <Flame_MaxReading>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff37 	bl	8001038 <CarAdjustament>
			CarAction();
 80011ca:	f7ff ff99 	bl	8001100 <CarAction>
			n = 1;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <main+0xcc>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	e016      	b.n	8001204 <main+0xc8>
		}
		else if (object_detected)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d005      	beq.n	80011e8 <main+0xac>
		{
			n = 1;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <main+0xcc>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
			CarMovements();
 80011e2:	f7ff ff57 	bl	8001094 <CarMovements>
 80011e6:	e7b0      	b.n	800114a <main+0xe>
			//todo

		}
		else if (flame_detected)
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0ad      	beq.n	800114a <main+0xe>
		{
			CarAdjustament (Flame_MaxReading());
 80011ee:	f7ff feb7 	bl	8000f60 <Flame_MaxReading>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ff1f 	bl	8001038 <CarAdjustament>
			CarAction();
 80011fa:	f7ff ff81 	bl	8001100 <CarAction>
			n = 1;
 80011fe:	4b02      	ldr	r3, [pc, #8]	; (8001208 <main+0xcc>)
 8001200:	2201      	movs	r2, #1
 8001202:	601a      	str	r2, [r3, #0]
		object_detected = (Ultrasnic_Read() <= ULTRA_Threshold);
 8001204:	e7a1      	b.n	800114a <main+0xe>
 8001206:	bf00      	nop
 8001208:	20000000 	.word	0x20000000

0800120c <Reset_Handler>:
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x2>)
 800120e:	4685      	mov	sp, r0
 8001210:	f3af 8000 	nop.w
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <LoopForever+0x6>)
 8001216:	490d      	ldr	r1, [pc, #52]	; (800124c <LoopForever+0xa>)
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <LoopForever+0xe>)
 800121a:	2300      	movs	r3, #0
 800121c:	e002      	b.n	8001224 <LoopCopyDataInit>

0800121e <CopyDataInit>:
 800121e:	58d4      	ldr	r4, [r2, r3]
 8001220:	50c4      	str	r4, [r0, r3]
 8001222:	3304      	adds	r3, #4

08001224 <LoopCopyDataInit>:
 8001224:	18c4      	adds	r4, r0, r3
 8001226:	428c      	cmp	r4, r1
 8001228:	d3f9      	bcc.n	800121e <CopyDataInit>
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <LoopForever+0x12>)
 800122c:	4c0a      	ldr	r4, [pc, #40]	; (8001258 <LoopForever+0x16>)
 800122e:	2300      	movs	r3, #0
 8001230:	e001      	b.n	8001236 <LoopFillZerobss>

08001232 <FillZerobss>:
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	3204      	adds	r2, #4

08001236 <LoopFillZerobss>:
 8001236:	42a2      	cmp	r2, r4
 8001238:	d3fb      	bcc.n	8001232 <FillZerobss>
 800123a:	f000 fe0f 	bl	8001e5c <__libc_init_array>
 800123e:	f7ff ff7d 	bl	800113c <main>

08001242 <LoopForever>:
 8001242:	e7fe      	b.n	8001242 <LoopForever>
 8001244:	20002800 	.word	0x20002800
 8001248:	20000000 	.word	0x20000000
 800124c:	20000004 	.word	0x20000004
 8001250:	08001ec4 	.word	0x08001ec4
 8001254:	20000004 	.word	0x20000004
 8001258:	200000bc 	.word	0x200000bc

0800125c <ADC1_2_IRQHandler>:
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>

0800125e <delay_ms>:
 800125e:	b480      	push	{r7}
 8001260:	b083      	sub	sp, #12
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800126a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800126e:	629a      	str	r2, [r3, #40]	; 0x28
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1e5a      	subs	r2, r3, #1
 8001274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
 800127a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	bf00      	nop
 800128c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f8      	beq.n	800128c <delay_ms+0x2e>
 800129a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
 80012a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr

080012b4 <MCAL_ADC_Read>:
* @param [in]		-enum NUM_CH CH :Select ADC channel {CH0 TO CH17}
* @retval 			-ADC value
* Note				-Support CH0 TO CH17 (Single_Mode Data_alignment_Right )
*/
uint16_t MCAL_ADC_Read( enum NUM_CH CH )
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	//Channel selection
	ADC1->SQR3=CH;
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	6353      	str	r3, [r2, #52]	; 0x34
	//Enable adc
	ADC1->CR2 |=1<<0;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |=1<<0;
 80012d0:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	4a16      	ldr	r2, [pc, #88]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6093      	str	r3, [r2, #8]
	//Start conversion
	ADC1->CR2 |=1<<22;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4a13      	ldr	r2, [pc, #76]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e6:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & (1<<4)));
 80012e8:	bf00      	nop
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0310 	and.w	r3, r3, #16
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f9      	beq.n	80012ea <MCAL_ADC_Read+0x36>
	ADC1->SR &=~(1<<4);
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <MCAL_ADC_Read+0x7c>)
 80012fc:	f023 0310 	bic.w	r3, r3, #16
 8001300:	6013      	str	r3, [r2, #0]
	while(!(ADC1->SR & (1<<1)));
 8001302:	bf00      	nop
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MCAL_ADC_Read+0x7c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f9      	beq.n	8001304 <MCAL_ADC_Read+0x50>
	data=ADC1->DR;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MCAL_ADC_Read+0x7c>)
 8001312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001314:	81fb      	strh	r3, [r7, #14]
	ADC1->CR2 &=~(1<<0);
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MCAL_ADC_Read+0x7c>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <MCAL_ADC_Read+0x7c>)
 800131c:	f023 0301 	bic.w	r3, r3, #1
 8001320:	6093      	str	r3, [r2, #8]
	return data;
 8001322:	89fb      	ldrh	r3, [r7, #14]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40012400 	.word	0x40012400

08001334 <EXTI0_IRQHandler>:
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <EXTI0_IRQHandler+0x1c>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a04      	ldr	r2, [pc, #16]	; (8001350 <EXTI0_IRQHandler+0x1c>)
 800133e:	f043 0301 	orr.w	r3, r3, #1
 8001342:	6153      	str	r3, [r2, #20]
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <EXTI0_IRQHandler+0x20>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4798      	blx	r3
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40010400 	.word	0x40010400
 8001354:	20000080 	.word	0x20000080

08001358 <EXTI1_IRQHandler>:
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <EXTI1_IRQHandler+0x1c>)
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <EXTI1_IRQHandler+0x1c>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	6153      	str	r3, [r2, #20]
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <EXTI1_IRQHandler+0x20>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4798      	blx	r3
 800136e:	bf00      	nop
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40010400 	.word	0x40010400
 8001378:	20000080 	.word	0x20000080

0800137c <EXTI2_IRQHandler>:
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <EXTI2_IRQHandler+0x1c>)
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <EXTI2_IRQHandler+0x1c>)
 8001386:	f043 0304 	orr.w	r3, r3, #4
 800138a:	6153      	str	r3, [r2, #20]
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <EXTI2_IRQHandler+0x20>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4798      	blx	r3
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40010400 	.word	0x40010400
 800139c:	20000080 	.word	0x20000080

080013a0 <EXTI3_IRQHandler>:
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4b05      	ldr	r3, [pc, #20]	; (80013bc <EXTI3_IRQHandler+0x1c>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <EXTI3_IRQHandler+0x1c>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6153      	str	r3, [r2, #20]
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <EXTI3_IRQHandler+0x20>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4798      	blx	r3
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40010400 	.word	0x40010400
 80013c0:	20000080 	.word	0x20000080

080013c4 <EXTI4_IRQHandler>:
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <EXTI4_IRQHandler+0x1c>)
 80013ca:	695b      	ldr	r3, [r3, #20]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <EXTI4_IRQHandler+0x1c>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6153      	str	r3, [r2, #20]
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <EXTI4_IRQHandler+0x20>)
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	4798      	blx	r3
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40010400 	.word	0x40010400
 80013e4:	20000080 	.word	0x20000080

080013e8 <EXTI9_5_IRQHandler>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d008      	beq.n	800140a <EXTI9_5_IRQHandler+0x22>
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	4a22      	ldr	r2, [pc, #136]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 80013fe:	f043 0320 	orr.w	r3, r3, #32
 8001402:	6153      	str	r3, [r2, #20]
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <EXTI9_5_IRQHandler+0xa4>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4798      	blx	r3
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <EXTI9_5_IRQHandler+0x40>
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 800141c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001420:	6153      	str	r3, [r2, #20]
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <EXTI9_5_IRQHandler+0xa4>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	4798      	blx	r3
 8001428:	4b17      	ldr	r3, [pc, #92]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001430:	2b00      	cmp	r3, #0
 8001432:	d008      	beq.n	8001446 <EXTI9_5_IRQHandler+0x5e>
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	4a13      	ldr	r2, [pc, #76]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 800143a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800143e:	6153      	str	r3, [r2, #20]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <EXTI9_5_IRQHandler+0xa4>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4798      	blx	r3
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d008      	beq.n	8001464 <EXTI9_5_IRQHandler+0x7c>
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145c:	6153      	str	r3, [r2, #20]
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <EXTI9_5_IRQHandler+0xa4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4798      	blx	r3
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <EXTI9_5_IRQHandler+0x9a>
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4a04      	ldr	r2, [pc, #16]	; (8001488 <EXTI9_5_IRQHandler+0xa0>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800147a:	6153      	str	r3, [r2, #20]
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <EXTI9_5_IRQHandler+0xa4>)
 800147e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001480:	4798      	blx	r3
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40010400 	.word	0x40010400
 800148c:	20000080 	.word	0x20000080

08001490 <EXTI15_10_IRQHandler>:
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	2b00      	cmp	r3, #0
 800149e:	d008      	beq.n	80014b2 <EXTI15_10_IRQHandler+0x22>
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014a2:	695b      	ldr	r3, [r3, #20]
 80014a4:	4a29      	ldr	r2, [pc, #164]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014aa:	6153      	str	r3, [r2, #20]
 80014ac:	4b28      	ldr	r3, [pc, #160]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 80014ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b0:	4798      	blx	r3
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d008      	beq.n	80014d0 <EXTI15_10_IRQHandler+0x40>
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	4a22      	ldr	r2, [pc, #136]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c8:	6153      	str	r3, [r2, #20]
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	4798      	blx	r3
 80014d0:	4b1e      	ldr	r3, [pc, #120]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d008      	beq.n	80014ee <EXTI15_10_IRQHandler+0x5e>
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	4a1a      	ldr	r2, [pc, #104]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e6:	6153      	str	r3, [r2, #20]
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 80014ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ec:	4798      	blx	r3
 80014ee:	4b17      	ldr	r3, [pc, #92]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d008      	beq.n	800150c <EXTI15_10_IRQHandler+0x7c>
 80014fa:	4b14      	ldr	r3, [pc, #80]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 8001500:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001504:	6153      	str	r3, [r2, #20]
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	4798      	blx	r3
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <EXTI15_10_IRQHandler+0x9a>
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	4a0b      	ldr	r2, [pc, #44]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 800151e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001522:	6153      	str	r3, [r2, #20]
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 8001526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001528:	4798      	blx	r3
 800152a:	4b08      	ldr	r3, [pc, #32]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <EXTI15_10_IRQHandler+0xb8>
 8001536:	4b05      	ldr	r3, [pc, #20]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <EXTI15_10_IRQHandler+0xbc>)
 800153c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001540:	6153      	str	r3, [r2, #20]
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <EXTI15_10_IRQHandler+0xc0>)
 8001544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001546:	4798      	blx	r3
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010400 	.word	0x40010400
 8001550:	20000080 	.word	0x20000080

08001554 <get_position>:
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	88fb      	ldrh	r3, [r7, #6]
 8001560:	2b80      	cmp	r3, #128	; 0x80
 8001562:	d042      	beq.n	80015ea <get_position+0x96>
 8001564:	2b80      	cmp	r3, #128	; 0x80
 8001566:	dc11      	bgt.n	800158c <get_position+0x38>
 8001568:	2b08      	cmp	r3, #8
 800156a:	d036      	beq.n	80015da <get_position+0x86>
 800156c:	2b08      	cmp	r3, #8
 800156e:	dc06      	bgt.n	800157e <get_position+0x2a>
 8001570:	2b02      	cmp	r3, #2
 8001572:	d02e      	beq.n	80015d2 <get_position+0x7e>
 8001574:	2b04      	cmp	r3, #4
 8001576:	d02e      	beq.n	80015d6 <get_position+0x82>
 8001578:	2b01      	cmp	r3, #1
 800157a:	d028      	beq.n	80015ce <get_position+0x7a>
 800157c:	e047      	b.n	800160e <get_position+0xba>
 800157e:	2b20      	cmp	r3, #32
 8001580:	d02f      	beq.n	80015e2 <get_position+0x8e>
 8001582:	2b40      	cmp	r3, #64	; 0x40
 8001584:	d02f      	beq.n	80015e6 <get_position+0x92>
 8001586:	2b10      	cmp	r3, #16
 8001588:	d029      	beq.n	80015de <get_position+0x8a>
 800158a:	e040      	b.n	800160e <get_position+0xba>
 800158c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001590:	d033      	beq.n	80015fa <get_position+0xa6>
 8001592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001596:	dc09      	bgt.n	80015ac <get_position+0x58>
 8001598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800159c:	d029      	beq.n	80015f2 <get_position+0x9e>
 800159e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a2:	d028      	beq.n	80015f6 <get_position+0xa2>
 80015a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a8:	d021      	beq.n	80015ee <get_position+0x9a>
 80015aa:	e030      	b.n	800160e <get_position+0xba>
 80015ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b0:	d027      	beq.n	8001602 <get_position+0xae>
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	dc03      	bgt.n	80015c0 <get_position+0x6c>
 80015b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015bc:	d01f      	beq.n	80015fe <get_position+0xaa>
 80015be:	e026      	b.n	800160e <get_position+0xba>
 80015c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80015c4:	d01f      	beq.n	8001606 <get_position+0xb2>
 80015c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015ca:	d01e      	beq.n	800160a <get_position+0xb6>
 80015cc:	e01f      	b.n	800160e <get_position+0xba>
 80015ce:	2300      	movs	r3, #0
 80015d0:	e01e      	b.n	8001610 <get_position+0xbc>
 80015d2:	2304      	movs	r3, #4
 80015d4:	e01c      	b.n	8001610 <get_position+0xbc>
 80015d6:	2308      	movs	r3, #8
 80015d8:	e01a      	b.n	8001610 <get_position+0xbc>
 80015da:	230c      	movs	r3, #12
 80015dc:	e018      	b.n	8001610 <get_position+0xbc>
 80015de:	2310      	movs	r3, #16
 80015e0:	e016      	b.n	8001610 <get_position+0xbc>
 80015e2:	2314      	movs	r3, #20
 80015e4:	e014      	b.n	8001610 <get_position+0xbc>
 80015e6:	2318      	movs	r3, #24
 80015e8:	e012      	b.n	8001610 <get_position+0xbc>
 80015ea:	231c      	movs	r3, #28
 80015ec:	e010      	b.n	8001610 <get_position+0xbc>
 80015ee:	2300      	movs	r3, #0
 80015f0:	e00e      	b.n	8001610 <get_position+0xbc>
 80015f2:	2304      	movs	r3, #4
 80015f4:	e00c      	b.n	8001610 <get_position+0xbc>
 80015f6:	2308      	movs	r3, #8
 80015f8:	e00a      	b.n	8001610 <get_position+0xbc>
 80015fa:	230c      	movs	r3, #12
 80015fc:	e008      	b.n	8001610 <get_position+0xbc>
 80015fe:	2310      	movs	r3, #16
 8001600:	e006      	b.n	8001610 <get_position+0xbc>
 8001602:	2314      	movs	r3, #20
 8001604:	e004      	b.n	8001610 <get_position+0xbc>
 8001606:	2318      	movs	r3, #24
 8001608:	e002      	b.n	8001610 <get_position+0xbc>
 800160a:	231c      	movs	r3, #28
 800160c:	e000      	b.n	8001610 <get_position+0xbc>
 800160e:	2300      	movs	r3, #0
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr

0800161a <MCAL_GPIO_Init>:
 800161a:	b590      	push	{r4, r7, lr}
 800161c:	b085      	sub	sp, #20
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
 8001622:	6039      	str	r1, [r7, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	2bff      	cmp	r3, #255	; 0xff
 8001632:	d801      	bhi.n	8001638 <MCAL_GPIO_Init+0x1e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	e001      	b.n	800163c <MCAL_GPIO_Init+0x22>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	3304      	adds	r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff86 	bl	8001554 <get_position>
 8001648:	4603      	mov	r3, r0
 800164a:	461a      	mov	r2, r3
 800164c:	230f      	movs	r3, #15
 800164e:	4093      	lsls	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	401a      	ands	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d00b      	beq.n	800167c <MCAL_GPIO_Init+0x62>
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	2b06      	cmp	r3, #6
 800166a:	d007      	beq.n	800167c <MCAL_GPIO_Init+0x62>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d003      	beq.n	800167c <MCAL_GPIO_Init+0x62>
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	2b04      	cmp	r3, #4
 800167a:	d10e      	bne.n	800169a <MCAL_GPIO_Init+0x80>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	3b04      	subs	r3, #4
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	b25a      	sxtb	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	78db      	ldrb	r3, [r3, #3]
 800168a:	b25b      	sxtb	r3, r3
 800168c:	4313      	orrs	r3, r2
 800168e:	b25b      	sxtb	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e02c      	b.n	80016f4 <MCAL_GPIO_Init+0xda>
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	789b      	ldrb	r3, [r3, #2]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <MCAL_GPIO_Init+0x90>
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	789b      	ldrb	r3, [r3, #2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d107      	bne.n	80016ba <MCAL_GPIO_Init+0xa0>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	789b      	ldrb	r3, [r3, #2]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	73fb      	strb	r3, [r7, #15]
 80016b8:	e01c      	b.n	80016f4 <MCAL_GPIO_Init+0xda>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	789b      	ldrb	r3, [r3, #2]
 80016be:	2b08      	cmp	r3, #8
 80016c0:	d102      	bne.n	80016c8 <MCAL_GPIO_Init+0xae>
 80016c2:	2304      	movs	r3, #4
 80016c4:	73fb      	strb	r3, [r7, #15]
 80016c6:	e015      	b.n	80016f4 <MCAL_GPIO_Init+0xda>
 80016c8:	2308      	movs	r3, #8
 80016ca:	73fb      	strb	r3, [r7, #15]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	789b      	ldrb	r3, [r3, #2]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d107      	bne.n	80016e4 <MCAL_GPIO_Init+0xca>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	8812      	ldrh	r2, [r2, #0]
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	e007      	b.n	80016f4 <MCAL_GPIO_Init+0xda>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	8812      	ldrh	r2, [r2, #0]
 80016ec:	43d2      	mvns	r2, r2
 80016ee:	401a      	ands	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	7bfc      	ldrb	r4, [r7, #15]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff2a 	bl	8001554 <get_position>
 8001700:	4603      	mov	r3, r0
 8001702:	fa04 f203 	lsl.w	r2, r4, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}

08001718 <MCAL_GPIO_WritePin>:
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	807b      	strh	r3, [r7, #2]
 8001724:	4613      	mov	r3, r2
 8001726:	707b      	strb	r3, [r7, #1]
 8001728:	787b      	ldrb	r3, [r7, #1]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <MCAL_GPIO_WritePin+0x1e>
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	e002      	b.n	800173c <MCAL_GPIO_WritePin+0x24>
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	615a      	str	r2, [r3, #20]
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
	...

08001748 <Slave_Status>:
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a30      	ldr	r2, [pc, #192]	; (8001818 <Slave_Status+0xd0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf14      	ite	ne
 800175c:	2301      	movne	r3, #1
 800175e:	2300      	moveq	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d851      	bhi.n	800180e <Slave_Status+0xc6>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <Slave_Status+0x28>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	08001781 	.word	0x08001781
 8001774:	080017a5 	.word	0x080017a5
 8001778:	080017bd 	.word	0x080017bd
 800177c:	080017e1 	.word	0x080017e1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d03b      	beq.n	8001804 <Slave_Status+0xbc>
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	4923      	ldr	r1, [pc, #140]	; (800181c <Slave_Status+0xd4>)
 8001790:	4613      	mov	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	1a9b      	subs	r3, r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	3318      	adds	r3, #24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2000      	movs	r0, #0
 80017a0:	4798      	blx	r3
 80017a2:	e02f      	b.n	8001804 <Slave_Status+0xbc>
 80017a4:	7bfa      	ldrb	r2, [r7, #15]
 80017a6:	491d      	ldr	r1, [pc, #116]	; (800181c <Slave_Status+0xd4>)
 80017a8:	4613      	mov	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	3318      	adds	r3, #24
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2001      	movs	r0, #1
 80017b8:	4798      	blx	r3
 80017ba:	e028      	b.n	800180e <Slave_Status+0xc6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01f      	beq.n	8001808 <Slave_Status+0xc0>
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	4914      	ldr	r1, [pc, #80]	; (800181c <Slave_Status+0xd4>)
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	1a9b      	subs	r3, r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	3318      	adds	r3, #24
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2002      	movs	r0, #2
 80017dc:	4798      	blx	r3
 80017de:	e013      	b.n	8001808 <Slave_Status+0xc0>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <Slave_Status+0xc4>
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	490b      	ldr	r1, [pc, #44]	; (800181c <Slave_Status+0xd4>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	3318      	adds	r3, #24
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2003      	movs	r0, #3
 8001800:	4798      	blx	r3
 8001802:	e003      	b.n	800180c <Slave_Status+0xc4>
 8001804:	bf00      	nop
 8001806:	e002      	b.n	800180e <Slave_Status+0xc6>
 8001808:	bf00      	nop
 800180a:	e000      	b.n	800180e <Slave_Status+0xc6>
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3710      	adds	r7, #16
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40005400 	.word	0x40005400
 800181c:	20000020 	.word	0x20000020

08001820 <I2C1_EV_IRQHandler>:
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	4b31      	ldr	r3, [pc, #196]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <I2C1_EV_IRQHandler+0x44>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <I2C1_EV_IRQHandler+0x44>
 8001854:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001856:	4a2b      	ldr	r2, [pc, #172]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	2100      	movs	r1, #0
 800185e:	4829      	ldr	r0, [pc, #164]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001860:	f7ff ff72 	bl	8001748 <Slave_Status>
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d012      	beq.n	800189a <I2C1_EV_IRQHandler+0x7a>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00f      	beq.n	800189a <I2C1_EV_IRQHandler+0x7a>
 800187a:	4b22      	ldr	r3, [pc, #136]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <I2C1_EV_IRQHandler+0x7a>
 8001886:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	2101      	movs	r1, #1
 8001894:	481b      	ldr	r0, [pc, #108]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 8001896:	f7ff ff57 	bl	8001748 <Slave_Status>
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	60fb      	str	r3, [r7, #12]
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00f      	beq.n	80018ca <I2C1_EV_IRQHandler+0xaa>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00c      	beq.n	80018ca <I2C1_EV_IRQHandler+0xaa>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <I2C1_EV_IRQHandler+0xaa>
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d103      	bne.n	80018ca <I2C1_EV_IRQHandler+0xaa>
 80018c2:	2102      	movs	r1, #2
 80018c4:	480f      	ldr	r0, [pc, #60]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 80018c6:	f7ff ff3f 	bl	8001748 <Slave_Status>
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00f      	beq.n	80018fa <I2C1_EV_IRQHandler+0xda>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00c      	beq.n	80018fa <I2C1_EV_IRQHandler+0xda>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <I2C1_EV_IRQHandler+0xda>
 80018e6:	4b07      	ldr	r3, [pc, #28]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d103      	bne.n	80018fa <I2C1_EV_IRQHandler+0xda>
 80018f2:	2103      	movs	r1, #3
 80018f4:	4803      	ldr	r0, [pc, #12]	; (8001904 <I2C1_EV_IRQHandler+0xe4>)
 80018f6:	f7ff ff27 	bl	8001748 <Slave_Status>
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40005400 	.word	0x40005400

08001908 <SPI1_IRQHandler>:
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4b13      	ldr	r3, [pc, #76]	; (800195c <SPI1_IRQHandler+0x54>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	085b      	lsrs	r3, r3, #1
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	793b      	ldrb	r3, [r7, #4]
 800191c:	f362 0300 	bfi	r3, r2, #0, #1
 8001920:	713b      	strb	r3, [r7, #4]
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <SPI1_IRQHandler+0x54>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	793b      	ldrb	r3, [r7, #4]
 800192e:	f362 0341 	bfi	r3, r2, #1, #1
 8001932:	713b      	strb	r3, [r7, #4]
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <SPI1_IRQHandler+0x54>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	091b      	lsrs	r3, r3, #4
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	b2da      	uxtb	r2, r3
 8001940:	793b      	ldrb	r3, [r7, #4]
 8001942:	f362 0382 	bfi	r3, r2, #2, #1
 8001946:	713b      	strb	r3, [r7, #4]
 8001948:	4b05      	ldr	r3, [pc, #20]	; (8001960 <SPI1_IRQHandler+0x58>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	7938      	ldrb	r0, [r7, #4]
 8001950:	4798      	blx	r3
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40013000 	.word	0x40013000
 8001960:	20000058 	.word	0x20000058

08001964 <SPI2_IRQHandler>:
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <SPI2_IRQHandler+0x54>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	085b      	lsrs	r3, r3, #1
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	f362 0300 	bfi	r3, r2, #0, #1
 800197c:	713b      	strb	r3, [r7, #4]
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <SPI2_IRQHandler+0x54>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	793b      	ldrb	r3, [r7, #4]
 800198a:	f362 0341 	bfi	r3, r2, #1, #1
 800198e:	713b      	strb	r3, [r7, #4]
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <SPI2_IRQHandler+0x54>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	091b      	lsrs	r3, r3, #4
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	b2da      	uxtb	r2, r3
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f362 0382 	bfi	r3, r2, #2, #1
 80019a2:	713b      	strb	r3, [r7, #4]
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <SPI2_IRQHandler+0x58>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	7938      	ldrb	r0, [r7, #4]
 80019ac:	4798      	blx	r3
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40003800 	.word	0x40003800
 80019bc:	20000058 	.word	0x20000058

080019c0 <MCAL_TIMx_Init>:
* @param [in] 		-Chan:  specified channel from 1 to 4
* @retval 			-none
* Note				-Support Fast PWM and Normal ( delay mode )
*/
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2281      	movs	r2, #129	; 0x81
 80019d2:	601a      	str	r2, [r3, #0]
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	f000 80d4 	beq.w	8001b86 <MCAL_TIMx_Init+0x1c6>
	{
		// set pin
		if(TIMx==TIM2)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e4:	d131      	bne.n	8001a4a <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 80019e6:	4baa      	ldr	r3, [pc, #680]	; (8001c90 <MCAL_TIMx_Init+0x2d0>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4aa9      	ldr	r2, [pc, #676]	; (8001c90 <MCAL_TIMx_Init+0x2d0>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 80019f2:	2306      	movs	r3, #6
 80019f4:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d817      	bhi.n	8001a30 <MCAL_TIMx_Init+0x70>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <MCAL_TIMx_Init+0x48>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a1f 	.word	0x08001a1f
 8001a10:	08001a25 	.word	0x08001a25
 8001a14:	08001a2b 	.word	0x08001a2b
			{
			case CH1 :
				{
					//set pin outpt
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	82bb      	strh	r3, [r7, #20]
					break;
 8001a1c:	e008      	b.n	8001a30 <MCAL_TIMx_Init+0x70>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	82bb      	strh	r3, [r7, #20]
					break;
 8001a22:	e005      	b.n	8001a30 <MCAL_TIMx_Init+0x70>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_2 ;
 8001a24:	2304      	movs	r3, #4
 8001a26:	82bb      	strh	r3, [r7, #20]
					break;
 8001a28:	e002      	b.n	8001a30 <MCAL_TIMx_Init+0x70>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_3 ;
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	82bb      	strh	r3, [r7, #20]
					break;
 8001a2e:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4897      	ldr	r0, [pc, #604]	; (8001c94 <MCAL_TIMx_Init+0x2d4>)
 8001a38:	f7ff fdef 	bl	800161a <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8001a3c:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a95      	ldr	r2, [pc, #596]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	e072      	b.n	8001b30 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4a93      	ldr	r2, [pc, #588]	; (8001c9c <MCAL_TIMx_Init+0x2dc>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d13d      	bne.n	8001ace <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8001a52:	2306      	movs	r3, #6
 8001a54:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8001a56:	2301      	movs	r3, #1
 8001a58:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d82f      	bhi.n	8001ac0 <MCAL_TIMx_Init+0x100>
 8001a60:	a201      	add	r2, pc, #4	; (adr r2, 8001a68 <MCAL_TIMx_Init+0xa8>)
 8001a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a66:	bf00      	nop
 8001a68:	08001a79 	.word	0x08001a79
 8001a6c:	08001a8b 	.word	0x08001a8b
 8001a70:	08001a9d 	.word	0x08001a9d
 8001a74:	08001aaf 	.word	0x08001aaf
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8001a78:	2340      	movs	r3, #64	; 0x40
 8001a7a:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4619      	mov	r1, r3
 8001a82:	4884      	ldr	r0, [pc, #528]	; (8001c94 <MCAL_TIMx_Init+0x2d4>)
 8001a84:	f7ff fdc9 	bl	800161a <MCAL_GPIO_Init>
					break;
 8001a88:	e01a      	b.n	8001ac0 <MCAL_TIMx_Init+0x100>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001a8e:	f107 0314 	add.w	r3, r7, #20
 8001a92:	4619      	mov	r1, r3
 8001a94:	487f      	ldr	r0, [pc, #508]	; (8001c94 <MCAL_TIMx_Init+0x2d4>)
 8001a96:	f7ff fdc0 	bl	800161a <MCAL_GPIO_Init>
					break;
 8001a9a:	e011      	b.n	8001ac0 <MCAL_TIMx_Init+0x100>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	487e      	ldr	r0, [pc, #504]	; (8001ca0 <MCAL_TIMx_Init+0x2e0>)
 8001aa8:	f7ff fdb7 	bl	800161a <MCAL_GPIO_Init>
					break;
 8001aac:	e008      	b.n	8001ac0 <MCAL_TIMx_Init+0x100>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4879      	ldr	r0, [pc, #484]	; (8001ca0 <MCAL_TIMx_Init+0x2e0>)
 8001aba:	f7ff fdae 	bl	800161a <MCAL_GPIO_Init>
					break;
 8001abe:	bf00      	nop
				}
			}
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8001ac0:	4b75      	ldr	r3, [pc, #468]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a74      	ldr	r2, [pc, #464]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001ac6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aca:	6013      	str	r3, [r2, #0]
 8001acc:	e030      	b.n	8001b30 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4a74      	ldr	r2, [pc, #464]	; (8001ca4 <MCAL_TIMx_Init+0x2e4>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d12c      	bne.n	8001b30 <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8001ad6:	2306      	movs	r3, #6
 8001ad8:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8001ada:	2301      	movs	r3, #1
 8001adc:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d819      	bhi.n	8001b18 <MCAL_TIMx_Init+0x158>
 8001ae4:	a201      	add	r2, pc, #4	; (adr r2, 8001aec <MCAL_TIMx_Init+0x12c>)
 8001ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aea:	bf00      	nop
 8001aec:	08001afd 	.word	0x08001afd
 8001af0:	08001b03 	.word	0x08001b03
 8001af4:	08001b09 	.word	0x08001b09
 8001af8:	08001b11 	.word	0x08001b11
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8001afc:	2340      	movs	r3, #64	; 0x40
 8001afe:	82bb      	strh	r3, [r7, #20]
					break;
 8001b00:	e00a      	b.n	8001b18 <MCAL_TIMx_Init+0x158>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	82bb      	strh	r3, [r7, #20]
					break;
 8001b06:	e007      	b.n	8001b18 <MCAL_TIMx_Init+0x158>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_8 ;
 8001b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b0c:	82bb      	strh	r3, [r7, #20]
					break;
 8001b0e:	e003      	b.n	8001b18 <MCAL_TIMx_Init+0x158>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_9 ;
 8001b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b14:	82bb      	strh	r3, [r7, #20]

					break;
 8001b16:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4860      	ldr	r0, [pc, #384]	; (8001ca0 <MCAL_TIMx_Init+0x2e0>)
 8001b20:	f7ff fd7b 	bl	800161a <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ30_TIM4_Disable();
 8001b24:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a5b      	ldr	r2, [pc, #364]	; (8001c98 <MCAL_TIMx_Init+0x2d8>)
 8001b2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b2e:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d852      	bhi.n	8001bdc <MCAL_TIMx_Init+0x21c>
 8001b36:	a201      	add	r2, pc, #4	; (adr r2, 8001b3c <MCAL_TIMx_Init+0x17c>)
 8001b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3c:	08001b4d 	.word	0x08001b4d
 8001b40:	08001b5b 	.word	0x08001b5b
 8001b44:	08001b69 	.word	0x08001b69
 8001b48:	08001b77 	.word	0x08001b77
		{
		case CH1 :
			{
				TIMx->CCMR1 |=15<<3;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	619a      	str	r2, [r3, #24]
				break;
 8001b58:	e040      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH2 :
			{
				TIMx->CCMR1 |=15<<11;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	619a      	str	r2, [r3, #24]
				break;
 8001b66:	e039      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH3 :
			{
				TIMx->CCMR2 |=15<<3;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	61da      	str	r2, [r3, #28]
				break;
 8001b74:	e032      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH4 :
			{
				TIMx->CCMR2 |=15<<11;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	61da      	str	r2, [r3, #28]
				break;
 8001b82:	bf00      	nop
 8001b84:	e02a      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b03      	cmp	r3, #3
 8001b8a:	d827      	bhi.n	8001bdc <MCAL_TIMx_Init+0x21c>
 8001b8c:	a201      	add	r2, pc, #4	; (adr r2, 8001b94 <MCAL_TIMx_Init+0x1d4>)
 8001b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b92:	bf00      	nop
 8001b94:	08001ba5 	.word	0x08001ba5
 8001b98:	08001bb3 	.word	0x08001bb3
 8001b9c:	08001bc1 	.word	0x08001bc1
 8001ba0:	08001bcf 	.word	0x08001bcf
		{
		case CH1 :
			{
				TIMx->CCMR1 &=~(15<<3);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	619a      	str	r2, [r3, #24]
				break;
 8001bb0:	e014      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH2 :
			{
				TIMx->CCMR1 &=~(15<<11);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	619a      	str	r2, [r3, #24]
				break;
 8001bbe:	e00d      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH3 :
			{
				TIMx->CCMR2 &=~(15<<3);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	61da      	str	r2, [r3, #28]
				break;
 8001bcc:	e006      	b.n	8001bdc <MCAL_TIMx_Init+0x21c>
			}
		case CH4 :
			{
				TIMx->CCMR2  &=~(15<<11);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	61da      	str	r2, [r3, #28]
				break;
 8001bda:	bf00      	nop
			}
		}
	}
	//output polarity and  output enable
	switch(Chan)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d846      	bhi.n	8001c70 <MCAL_TIMx_Init+0x2b0>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <MCAL_TIMx_Init+0x228>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001bf9 	.word	0x08001bf9
 8001bec:	08001c17 	.word	0x08001c17
 8001bf0:	08001c35 	.word	0x08001c35
 8001bf4:	08001c53 	.word	0x08001c53
	{
	case CH1 :
		{
			TIMx->CCER|=1<<0;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	621a      	str	r2, [r3, #32]
			//set  Compare value
			MCAL_TIMx_Set_Compare_Value(TIMx,TIMx_Config->CompareValue,CH1);
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f8b4 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
			break;
 8001c14:	e02c      	b.n	8001c70 <MCAL_TIMx_Init+0x2b0>
		}
	case CH2 :
		{
			TIMx->CCER|=3<<4;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	621a      	str	r2, [r3, #32]
			//set  Compare value
			MCAL_TIMx_Set_Compare_Value(TIMx,TIMx_Config->CompareValue,CH2);
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	2201      	movs	r2, #1
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f8a5 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
			break;
 8001c32:	e01d      	b.n	8001c70 <MCAL_TIMx_Init+0x2b0>
		}
	case CH3 :
		{
			TIMx->CCER|=1<<8;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	621a      	str	r2, [r3, #32]
			//set  Compare value
			MCAL_TIMx_Set_Compare_Value(TIMx,TIMx_Config->CompareValue,CH3);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	2202      	movs	r2, #2
 8001c48:	4619      	mov	r1, r3
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 f896 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
			break;
 8001c50:	e00e      	b.n	8001c70 <MCAL_TIMx_Init+0x2b0>
		}
	case CH4 :
		{
			TIMx->CCER|=1<<12;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	621a      	str	r2, [r3, #32]
			//set  Compare value
			MCAL_TIMx_Set_Compare_Value(TIMx,TIMx_Config->CompareValue,CH4);
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	2203      	movs	r2, #3
 8001c66:	4619      	mov	r1, r3
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f887 	bl	8001d7c <MCAL_TIMx_Set_Compare_Value>
			break;
 8001c6e:	bf00      	nop
		}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	889b      	ldrh	r3, [r3, #4]
 8001c74:	461a      	mov	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value 
	MCAL_TIMx_Set_TOP_Value(TIMx ,TIMx_Config->TopValue);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4619      	mov	r1, r3
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	f000 f8ae 	bl	8001de4 <MCAL_TIMx_Set_TOP_Value>
}
 8001c88:	bf00      	nop
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010800 	.word	0x40010800
 8001c98:	e000e180 	.word	0xe000e180
 8001c9c:	40000400 	.word	0x40000400
 8001ca0:	40010c00 	.word	0x40010c00
 8001ca4:	40000800 	.word	0x40000800

08001ca8 <MCAL_TIM4_CAP_Init>:



void MCAL_TIM4_CAP_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
	//set pin capture input channel 1
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber=GPIO_PIN_6;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig);
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <MCAL_TIM4_CAP_Init+0x40>)
 8001cbc:	f7ff fcad 	bl	800161a <MCAL_GPIO_Init>
	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM4->PSC=7;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MCAL_TIM4_CAP_Init+0x44>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value
	TIM4->ARR=0XFFFF;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MCAL_TIM4_CAP_Init+0x44>)
 8001cc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
	//CC1 channel is configured as input, IC1 is mapped on TI1
	TIM4->CCMR1 =0x31;
 8001cce:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MCAL_TIM4_CAP_Init+0x44>)
 8001cd0:	2231      	movs	r2, #49	; 0x31
 8001cd2:	619a      	str	r2, [r3, #24]
	// Enable capture on CC1
	TIM4->CCER |= (1<<0);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <MCAL_TIM4_CAP_Init+0x44>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <MCAL_TIM4_CAP_Init+0x44>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6213      	str	r3, [r2, #32]
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40010c00 	.word	0x40010c00
 8001cec:	40000800 	.word	0x40000800

08001cf0 <MCAL_TIM4_CAP_Get_High>:


float MCAL_TIM4_CAP_Get_High(void)
{
 8001cf0:	b598      	push	{r3, r4, r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	// enable counter
	TIM4->CR1=1;
 8001cf4:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]
	//Set CAP at raising edge
	TIM4->CCER &=~(1<<1);
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	6213      	str	r3, [r2, #32]
	//wait until raising edge
	while(!(TIM4->SR &(1<<1)));
 8001d06:	bf00      	nop
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f9      	beq.n	8001d08 <MCAL_TIM4_CAP_Get_High+0x18>
	TIM4->SR=0;
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	611a      	str	r2, [r3, #16]
	//reset counter
	TIM4->CNT=0;
 8001d1a:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	625a      	str	r2, [r3, #36]	; 0x24
	//Set CAP at falling edge
	TIM4->CCER |=1<<1;
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d26:	f043 0302 	orr.w	r3, r3, #2
 8001d2a:	6213      	str	r3, [r2, #32]
	//wait until falling edge
	while(!(TIM4->SR &(1<<1)));
 8001d2c:	bf00      	nop
 8001d2e:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f9      	beq.n	8001d2e <MCAL_TIM4_CAP_Get_High+0x3e>
	TIM4->SR=0;
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM4->CR1=0;
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
	return ((1.0/1000000)*TIM4->CCR1);
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <MCAL_TIM4_CAP_Get_High+0x88>)
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7fe fb52 	bl	80003f4 <__aeabi_ui2d>
 8001d50:	a307      	add	r3, pc, #28	; (adr r3, 8001d70 <MCAL_TIM4_CAP_Get_High+0x80>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	f7fe fbc7 	bl	80004e8 <__aeabi_dmul>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	4618      	mov	r0, r3
 8001d60:	4621      	mov	r1, r4
 8001d62:	f7fe fdd3 	bl	800090c <__aeabi_d2f>
 8001d66:	4603      	mov	r3, r0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	bd98      	pop	{r3, r4, r7, pc}
 8001d6c:	f3af 8000 	nop.w
 8001d70:	a0b5ed8d 	.word	0xa0b5ed8d
 8001d74:	3eb0c6f7 	.word	0x3eb0c6f7
 8001d78:	40000800 	.word	0x40000800

08001d7c <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]

	switch(Chan)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d81a      	bhi.n	8001dc8 <MCAL_TIMx_Set_Compare_Value+0x4c>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <MCAL_TIMx_Set_Compare_Value+0x1c>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dc1 	.word	0x08001dc1
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 8001da8:	887a      	ldrh	r2, [r7, #2]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8001dae:	e00b      	b.n	8001dc8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8001db6:	e007      	b.n	8001dc8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 8001db8:	887a      	ldrh	r2, [r7, #2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001dbe:	e003      	b.n	8001dc8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 8001dc0:	887a      	ldrh	r2, [r7, #2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001dc6:	bf00      	nop
		}
	}
	TIM3->EGR |=1<<0;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <MCAL_TIMx_Set_Compare_Value+0x64>)
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	4a04      	ldr	r2, [pc, #16]	; (8001de0 <MCAL_TIMx_Set_Compare_Value+0x64>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6153      	str	r3, [r2, #20]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40000400 	.word	0x40000400

08001de4 <MCAL_TIMx_Set_TOP_Value>:
* @param [in] 		-TIMx:  specified TIMx x=[ 2 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_TOP_Value( TIMx_TypeDef* TIMx  , uint16_t TOP_Value )
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]
	TIMx->ARR=TOP_Value;
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <MCAL_TIMx_DeInit>:
* @param [in] 		-TIMx:  specified TIMx x=[ 2 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_DeInit( TIMx_TypeDef* TIMx )
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	TIMx->ARR=0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->CR1=0;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <USART1_IRQHandler>:
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	4b02      	ldr	r3, [pc, #8]	; (8001e30 <USART1_IRQHandler+0x10>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	4798      	blx	r3
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000060 	.word	0x20000060

08001e34 <USART2_IRQHandler>:
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <USART2_IRQHandler+0x10>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4798      	blx	r3
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000060 	.word	0x20000060

08001e48 <USART3_IRQHandler>:
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4b02      	ldr	r3, [pc, #8]	; (8001e58 <USART3_IRQHandler+0x10>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4798      	blx	r3
 8001e54:	bf00      	nop
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000060 	.word	0x20000060

08001e5c <__libc_init_array>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	2500      	movs	r5, #0
 8001e60:	4e0c      	ldr	r6, [pc, #48]	; (8001e94 <__libc_init_array+0x38>)
 8001e62:	4c0d      	ldr	r4, [pc, #52]	; (8001e98 <__libc_init_array+0x3c>)
 8001e64:	1ba4      	subs	r4, r4, r6
 8001e66:	10a4      	asrs	r4, r4, #2
 8001e68:	42a5      	cmp	r5, r4
 8001e6a:	d109      	bne.n	8001e80 <__libc_init_array+0x24>
 8001e6c:	f000 f81a 	bl	8001ea4 <_init>
 8001e70:	2500      	movs	r5, #0
 8001e72:	4e0a      	ldr	r6, [pc, #40]	; (8001e9c <__libc_init_array+0x40>)
 8001e74:	4c0a      	ldr	r4, [pc, #40]	; (8001ea0 <__libc_init_array+0x44>)
 8001e76:	1ba4      	subs	r4, r4, r6
 8001e78:	10a4      	asrs	r4, r4, #2
 8001e7a:	42a5      	cmp	r5, r4
 8001e7c:	d105      	bne.n	8001e8a <__libc_init_array+0x2e>
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e84:	4798      	blx	r3
 8001e86:	3501      	adds	r5, #1
 8001e88:	e7ee      	b.n	8001e68 <__libc_init_array+0xc>
 8001e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e8e:	4798      	blx	r3
 8001e90:	3501      	adds	r5, #1
 8001e92:	e7f2      	b.n	8001e7a <__libc_init_array+0x1e>
 8001e94:	08001ebc 	.word	0x08001ebc
 8001e98:	08001ebc 	.word	0x08001ebc
 8001e9c:	08001ebc 	.word	0x08001ebc
 8001ea0:	08001ec0 	.word	0x08001ec0

08001ea4 <_init>:
 8001ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ea6:	bf00      	nop
 8001ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eaa:	bc08      	pop	{r3}
 8001eac:	469e      	mov	lr, r3
 8001eae:	4770      	bx	lr

08001eb0 <_fini>:
 8001eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eb2:	bf00      	nop
 8001eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb6:	bc08      	pop	{r3}
 8001eb8:	469e      	mov	lr, r3
 8001eba:	4770      	bx	lr
