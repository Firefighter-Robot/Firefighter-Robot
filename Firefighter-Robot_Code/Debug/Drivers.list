
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001120  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001250  08001258  00011258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001250  08001250  00011258  2**0
                  CONTENTS
  4 .ARM          00000000  08001250  08001250  00011258  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001250  08001258  00011258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001250  08001250  00011250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001254  08001254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08001258  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001258  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006360  00000000  00000000  00011281  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f98  00000000  00000000  000175e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000013b4  00000000  00000000  00018579  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002d8  00000000  00000000  00019930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000260  00000000  00000000  00019c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000142a  00000000  00000000  00019e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000302d  00000000  00000000  0001b292  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000cf8c  00000000  00000000  0001e2bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002b24b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b04  00000000  00000000  0002b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001238 	.word	0x08001238

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001238 	.word	0x08001238

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <Clock_INIT>:




void Clock_INIT(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
    //set on the clock for PORTA
    RCC_GPIOA_CLK_EN();
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <Clock_INIT+0x6c>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <Clock_INIT+0x6c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	6193      	str	r3, [r2, #24]
    //set on the clock for PORTB
    RCC_GPIOB_CLK_EN();
 80009bc:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <Clock_INIT+0x6c>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <Clock_INIT+0x6c>)
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	6193      	str	r3, [r2, #24]
    //set on the clock for AFIO
    RCC_GPIOC_CLK_EN();
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <Clock_INIT+0x6c>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <Clock_INIT+0x6c>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6193      	str	r3, [r2, #24]
    RCC_AFIO_CLK_EN();
 80009d4:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <Clock_INIT+0x6c>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <Clock_INIT+0x6c>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6193      	str	r3, [r2, #24]
    RCC_TIM2_CLK_Enable();
 80009e0:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <Clock_INIT+0x6c>)
 80009e2:	69db      	ldr	r3, [r3, #28]
 80009e4:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <Clock_INIT+0x6c>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	61d3      	str	r3, [r2, #28]
    RCC_TIM3_CLK_Enable();
 80009ec:	4b0a      	ldr	r3, [pc, #40]	; (8000a18 <Clock_INIT+0x6c>)
 80009ee:	69db      	ldr	r3, [r3, #28]
 80009f0:	4a09      	ldr	r2, [pc, #36]	; (8000a18 <Clock_INIT+0x6c>)
 80009f2:	f043 0302 	orr.w	r3, r3, #2
 80009f6:	61d3      	str	r3, [r2, #28]
    RCC_TIM4_CLK_Enable();
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <Clock_INIT+0x6c>)
 80009fa:	69db      	ldr	r3, [r3, #28]
 80009fc:	4a06      	ldr	r2, [pc, #24]	; (8000a18 <Clock_INIT+0x6c>)
 80009fe:	f043 0304 	orr.w	r3, r3, #4
 8000a02:	61d3      	str	r3, [r2, #28]
    RCC_ADC1_CLK_Enable();
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <Clock_INIT+0x6c>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <Clock_INIT+0x6c>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6193      	str	r3, [r2, #24]
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr
 8000a18:	40021000 	.word	0x40021000

08000a1c <main>:
	pumb(pumb_off);
}


*/
int main (){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
	Clock_INIT();
 8000a20:	f7ff ffc4 	bl	80009ac <Clock_INIT>
	MCAL_TIM4_CAP_Init();
 8000a24:	f000 fb5c 	bl	80010e0 <MCAL_TIM4_CAP_Init>
	Init_pumb();

	unsigned char object_detected ;
	unsigned char flame_detected ;
*/
	MCAL_TIM4_CAP_Get_Low();
 8000a28:	f000 fb7e 	bl	8001128 <MCAL_TIM4_CAP_Get_Low>
	while(1)
 8000a2c:	e7fe      	b.n	8000a2c <main+0x10>
	...

08000a30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a3a:	490d      	ldr	r1, [pc, #52]	; (8000a70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <LoopForever+0xe>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a40:	e002      	b.n	8000a48 <LoopCopyDataInit>

08000a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a46:	3304      	adds	r3, #4

08000a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a4c:	d3f9      	bcc.n	8000a42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a50:	4c0a      	ldr	r4, [pc, #40]	; (8000a7c <LoopForever+0x16>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a54:	e001      	b.n	8000a5a <LoopFillZerobss>

08000a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a58:	3204      	adds	r2, #4

08000a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a5c:	d3fb      	bcc.n	8000a56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a5e:	f000 fbc7 	bl	80011f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff ffdb 	bl	8000a1c <main>

08000a66 <LoopForever>:

LoopForever:
    b LoopForever
 8000a66:	e7fe      	b.n	8000a66 <LoopForever>
  ldr   r0, =_estack
 8000a68:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a74:	08001258 	.word	0x08001258
  ldr r2, =_sbss
 8000a78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a7c:	200000a4 	.word	0x200000a4

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <EXTI0_IRQHandler+0x1c>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <EXTI0_IRQHandler+0x1c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <EXTI0_IRQHandler+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4798      	blx	r3
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010400 	.word	0x40010400
 8000aa4:	20000068 	.word	0x20000068

08000aa8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <EXTI1_IRQHandler+0x1c>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <EXTI1_IRQHandler+0x1c>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <EXTI1_IRQHandler+0x20>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4798      	blx	r3
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010400 	.word	0x40010400
 8000ac8:	20000068 	.word	0x20000068

08000acc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <EXTI2_IRQHandler+0x1c>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <EXTI2_IRQHandler+0x1c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <EXTI2_IRQHandler+0x20>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4798      	blx	r3
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010400 	.word	0x40010400
 8000aec:	20000068 	.word	0x20000068

08000af0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <EXTI3_IRQHandler+0x1c>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <EXTI3_IRQHandler+0x1c>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <EXTI3_IRQHandler+0x20>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4798      	blx	r3
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	20000068 	.word	0x20000068

08000b14 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <EXTI4_IRQHandler+0x1c>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <EXTI4_IRQHandler+0x1c>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <EXTI4_IRQHandler+0x20>)
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	4798      	blx	r3
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40010400 	.word	0x40010400
 8000b34:	20000068 	.word	0x20000068

08000b38 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8000b3c:	4b26      	ldr	r3, [pc, #152]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b3e:	695b      	ldr	r3, [r3, #20]
 8000b40:	f003 0320 	and.w	r3, r3, #32
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d008      	beq.n	8000b5a <EXTI9_5_IRQHandler+0x22>
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	4a22      	ldr	r2, [pc, #136]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6153      	str	r3, [r2, #20]
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <EXTI9_5_IRQHandler+0xa4>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 8000b5a:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b5c:	695b      	ldr	r3, [r3, #20]
 8000b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d008      	beq.n	8000b78 <EXTI9_5_IRQHandler+0x40>
 8000b66:	4b1c      	ldr	r3, [pc, #112]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b68:	695b      	ldr	r3, [r3, #20]
 8000b6a:	4a1b      	ldr	r2, [pc, #108]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b70:	6153      	str	r3, [r2, #20]
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <EXTI9_5_IRQHandler+0xa4>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000b78:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d008      	beq.n	8000b96 <EXTI9_5_IRQHandler+0x5e>
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b86:	695b      	ldr	r3, [r3, #20]
 8000b88:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b8e:	6153      	str	r3, [r2, #20]
 8000b90:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <EXTI9_5_IRQHandler+0xa4>)
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d008      	beq.n	8000bb4 <EXTI9_5_IRQHandler+0x7c>
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000ba8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bac:	6153      	str	r3, [r2, #20]
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <EXTI9_5_IRQHandler+0xa4>)
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d008      	beq.n	8000bd2 <EXTI9_5_IRQHandler+0x9a>
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <EXTI9_5_IRQHandler+0xa0>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6153      	str	r3, [r2, #20]
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <EXTI9_5_IRQHandler+0xa4>)
 8000bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bd0:	4798      	blx	r3
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40010400 	.word	0x40010400
 8000bdc:	20000068 	.word	0x20000068

08000be0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000be4:	4b2d      	ldr	r3, [pc, #180]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d008      	beq.n	8000c02 <EXTI15_10_IRQHandler+0x22>
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	4a29      	ldr	r2, [pc, #164]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000bf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bfa:	6153      	str	r3, [r2, #20]
 8000bfc:	4b28      	ldr	r3, [pc, #160]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d008      	beq.n	8000c20 <EXTI15_10_IRQHandler+0x40>
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c18:	6153      	str	r3, [r2, #20]
 8000c1a:	4b21      	ldr	r3, [pc, #132]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d008      	beq.n	8000c3e <EXTI15_10_IRQHandler+0x5e>
 8000c2c:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a1a      	ldr	r2, [pc, #104]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c36:	6153      	str	r3, [r2, #20]
 8000c38:	4b19      	ldr	r3, [pc, #100]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d008      	beq.n	8000c5c <EXTI15_10_IRQHandler+0x7c>
 8000c4a:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c4c:	695b      	ldr	r3, [r3, #20]
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c54:	6153      	str	r3, [r2, #20]
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c5e:	695b      	ldr	r3, [r3, #20]
 8000c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d008      	beq.n	8000c7a <EXTI15_10_IRQHandler+0x9a>
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	4a0b      	ldr	r2, [pc, #44]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6153      	str	r3, [r2, #20]
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c78:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d008      	beq.n	8000c98 <EXTI15_10_IRQHandler+0xb8>
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <EXTI15_10_IRQHandler+0xbc>)
 8000c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c90:	6153      	str	r3, [r2, #20]
 8000c92:	4b03      	ldr	r3, [pc, #12]	; (8000ca0 <EXTI15_10_IRQHandler+0xc0>)
 8000c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c96:	4798      	blx	r3
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40010400 	.word	0x40010400
 8000ca0:	20000068 	.word	0x20000068

08000ca4 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	2b80      	cmp	r3, #128	; 0x80
 8000cb2:	d042      	beq.n	8000d3a <get_position+0x96>
 8000cb4:	2b80      	cmp	r3, #128	; 0x80
 8000cb6:	dc11      	bgt.n	8000cdc <get_position+0x38>
 8000cb8:	2b08      	cmp	r3, #8
 8000cba:	d036      	beq.n	8000d2a <get_position+0x86>
 8000cbc:	2b08      	cmp	r3, #8
 8000cbe:	dc06      	bgt.n	8000cce <get_position+0x2a>
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d02e      	beq.n	8000d22 <get_position+0x7e>
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	d02e      	beq.n	8000d26 <get_position+0x82>
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d028      	beq.n	8000d1e <get_position+0x7a>
 8000ccc:	e047      	b.n	8000d5e <get_position+0xba>
 8000cce:	2b20      	cmp	r3, #32
 8000cd0:	d02f      	beq.n	8000d32 <get_position+0x8e>
 8000cd2:	2b40      	cmp	r3, #64	; 0x40
 8000cd4:	d02f      	beq.n	8000d36 <get_position+0x92>
 8000cd6:	2b10      	cmp	r3, #16
 8000cd8:	d029      	beq.n	8000d2e <get_position+0x8a>
 8000cda:	e040      	b.n	8000d5e <get_position+0xba>
 8000cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce0:	d033      	beq.n	8000d4a <get_position+0xa6>
 8000ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ce6:	dc09      	bgt.n	8000cfc <get_position+0x58>
 8000ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cec:	d029      	beq.n	8000d42 <get_position+0x9e>
 8000cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf2:	d028      	beq.n	8000d46 <get_position+0xa2>
 8000cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cf8:	d021      	beq.n	8000d3e <get_position+0x9a>
 8000cfa:	e030      	b.n	8000d5e <get_position+0xba>
 8000cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d00:	d027      	beq.n	8000d52 <get_position+0xae>
 8000d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d06:	dc03      	bgt.n	8000d10 <get_position+0x6c>
 8000d08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000d0c:	d01f      	beq.n	8000d4e <get_position+0xaa>
 8000d0e:	e026      	b.n	8000d5e <get_position+0xba>
 8000d10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d14:	d01f      	beq.n	8000d56 <get_position+0xb2>
 8000d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d1a:	d01e      	beq.n	8000d5a <get_position+0xb6>
 8000d1c:	e01f      	b.n	8000d5e <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e01e      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000d22:	2304      	movs	r3, #4
 8000d24:	e01c      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 8000d26:	2308      	movs	r3, #8
 8000d28:	e01a      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000d2a:	230c      	movs	r3, #12
 8000d2c:	e018      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000d2e:	2310      	movs	r3, #16
 8000d30:	e016      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000d32:	2314      	movs	r3, #20
 8000d34:	e014      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 8000d36:	2318      	movs	r3, #24
 8000d38:	e012      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000d3a:	231c      	movs	r3, #28
 8000d3c:	e010      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e00e      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000d42:	2304      	movs	r3, #4
 8000d44:	e00c      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	e00a      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	e008      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000d4e:	2310      	movs	r3, #16
 8000d50:	e006      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000d52:	2314      	movs	r3, #20
 8000d54:	e004      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000d56:	2318      	movs	r3, #24
 8000d58:	e002      	b.n	8000d60 <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	e000      	b.n	8000d60 <get_position+0xbc>
		break;
	default:
		return 0;
 8000d5e:	2300      	movs	r3, #0
	}
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 8000d6a:	b590      	push	{r4, r7, lr}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
 8000d72:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	2bff      	cmp	r3, #255	; 0xff
 8000d82:	d801      	bhi.n	8000d88 <MCAL_GPIO_Init+0x1e>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	e001      	b.n	8000d8c <MCAL_GPIO_Init+0x22>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3304      	adds	r3, #4
 8000d8c:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff86 	bl	8000ca4 <get_position>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	43da      	mvns	r2, r3
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	401a      	ands	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d00b      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	789b      	ldrb	r3, [r3, #2]
 8000db8:	2b06      	cmp	r3, #6
 8000dba:	d007      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	2b05      	cmp	r3, #5
 8000dc2:	d003      	beq.n	8000dcc <MCAL_GPIO_Init+0x62>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d10e      	bne.n	8000dea <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	789b      	ldrb	r3, [r3, #2]
 8000dd0:	3b04      	subs	r3, #4
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	78db      	ldrb	r3, [r3, #3]
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 030f 	and.w	r3, r3, #15
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e02c      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	789b      	ldrb	r3, [r3, #2]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d003      	beq.n	8000dfa <MCAL_GPIO_Init+0x90>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	789b      	ldrb	r3, [r3, #2]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d107      	bne.n	8000e0a <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	789b      	ldrb	r3, [r3, #2]
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 030f 	and.w	r3, r3, #15
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e01c      	b.n	8000e44 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	2b08      	cmp	r3, #8
 8000e10:	d102      	bne.n	8000e18 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8000e12:	2304      	movs	r3, #4
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e015      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8000e18:	2308      	movs	r3, #8
 8000e1a:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	789b      	ldrb	r3, [r3, #2]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d107      	bne.n	8000e34 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	8812      	ldrh	r2, [r2, #0]
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	e007      	b.n	8000e44 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	8812      	ldrh	r2, [r2, #0]
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8000e44:	7bfc      	ldrb	r4, [r7, #15]
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2a 	bl	8000ca4 <get_position>
 8000e50:	4603      	mov	r3, r0
 8000e52:	fa04 f203 	lsl.w	r2, r4, r3
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	601a      	str	r2, [r3, #0]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a30      	ldr	r2, [pc, #192]	; (8000f38 <Slave_Status+0xd0>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	bf14      	ite	ne
 8000e7c:	2301      	movne	r3, #1
 8000e7e:	2300      	moveq	r3, #0
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8000e84:	78fb      	ldrb	r3, [r7, #3]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d851      	bhi.n	8000f2e <Slave_Status+0xc6>
 8000e8a:	a201      	add	r2, pc, #4	; (adr r2, 8000e90 <Slave_Status+0x28>)
 8000e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e90:	08000ea1 	.word	0x08000ea1
 8000e94:	08000ec5 	.word	0x08000ec5
 8000e98:	08000edd 	.word	0x08000edd
 8000e9c:	08000f01 	.word	0x08000f01
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d03b      	beq.n	8000f24 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8000eac:	7bfa      	ldrb	r2, [r7, #15]
 8000eae:	4923      	ldr	r1, [pc, #140]	; (8000f3c <Slave_Status+0xd4>)
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	00db      	lsls	r3, r3, #3
 8000eb4:	1a9b      	subs	r3, r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	440b      	add	r3, r1
 8000eba:	3318      	adds	r3, #24
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	4798      	blx	r3
		}
		break;
 8000ec2:	e02f      	b.n	8000f24 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	491d      	ldr	r1, [pc, #116]	; (8000f3c <Slave_Status+0xd4>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	00db      	lsls	r3, r3, #3
 8000ecc:	1a9b      	subs	r3, r3, r2
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	3318      	adds	r3, #24
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	4798      	blx	r3
		break;
 8000eda:	e028      	b.n	8000f2e <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d01f      	beq.n	8000f28 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	4914      	ldr	r1, [pc, #80]	; (8000f3c <Slave_Status+0xd4>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	1a9b      	subs	r3, r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	3318      	adds	r3, #24
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2002      	movs	r0, #2
 8000efc:	4798      	blx	r3
		}
		break;
 8000efe:	e013      	b.n	8000f28 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10f      	bne.n	8000f2c <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	490b      	ldr	r1, [pc, #44]	; (8000f3c <Slave_Status+0xd4>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	440b      	add	r3, r1
 8000f1a:	3318      	adds	r3, #24
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2003      	movs	r0, #3
 8000f20:	4798      	blx	r3
		}
		break;
 8000f22:	e003      	b.n	8000f2c <Slave_Status+0xc4>
		break;
 8000f24:	bf00      	nop
 8000f26:	e002      	b.n	8000f2e <Slave_Status+0xc6>
		break;
 8000f28:	bf00      	nop
 8000f2a:	e000      	b.n	8000f2e <Slave_Status+0xc6>
		break;
 8000f2c:	bf00      	nop
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40005400 	.word	0x40005400
 8000f3c:	2000001c 	.word	0x2000001c

08000f40 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000f4a:	4b36      	ldr	r3, [pc, #216]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f5c:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000f5e:	4b31      	ldr	r3, [pc, #196]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f66:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00a      	beq.n	8000f84 <I2C1_EV_IRQHandler+0x44>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d007      	beq.n	8000f84 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f76:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4829      	ldr	r0, [pc, #164]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f80:	f7ff ff72 	bl	8000e68 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 8000f84:	4b27      	ldr	r3, [pc, #156]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d012      	beq.n	8000fba <I2C1_EV_IRQHandler+0x7a>
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00f      	beq.n	8000fba <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000f9a:	4b22      	ldr	r3, [pc, #136]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d109      	bne.n	8000fba <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	481b      	ldr	r0, [pc, #108]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fb6:	f7ff ff57 	bl	8000e68 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc2:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00f      	beq.n	8000fea <I2C1_EV_IRQHandler+0xaa>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00c      	beq.n	8000fea <I2C1_EV_IRQHandler+0xaa>
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000fd6:	4b13      	ldr	r3, [pc, #76]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fe6:	f7ff ff3f 	bl	8000e68 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff2:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00f      	beq.n	800101a <I2C1_EV_IRQHandler+0xda>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00c      	beq.n	800101a <I2C1_EV_IRQHandler+0xda>
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d009      	beq.n	800101a <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8001006:	4b07      	ldr	r3, [pc, #28]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d103      	bne.n	800101a <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8001012:	2103      	movs	r1, #3
 8001014:	4803      	ldr	r0, [pc, #12]	; (8001024 <I2C1_EV_IRQHandler+0xe4>)
 8001016:	f7ff ff27 	bl	8000e68 <Slave_Status>
		}
	}
}
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40005400 	.word	0x40005400

08001028 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <SPI1_IRQHandler+0x54>)
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	085b      	lsrs	r3, r3, #1
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	b2da      	uxtb	r2, r3
 800103a:	793b      	ldrb	r3, [r7, #4]
 800103c:	f362 0300 	bfi	r3, r2, #0, #1
 8001040:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <SPI1_IRQHandler+0x54>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	b2da      	uxtb	r2, r3
 800104c:	793b      	ldrb	r3, [r7, #4]
 800104e:	f362 0341 	bfi	r3, r2, #1, #1
 8001052:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <SPI1_IRQHandler+0x54>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	091b      	lsrs	r3, r3, #4
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	793b      	ldrb	r3, [r7, #4]
 8001062:	f362 0382 	bfi	r3, r2, #2, #1
 8001066:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SPI1_IRQHandler+0x58>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	7938      	ldrb	r0, [r7, #4]
 8001070:	4798      	blx	r3
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013000 	.word	0x40013000
 8001080:	20000054 	.word	0x20000054

08001084 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <SPI2_IRQHandler+0x54>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	085b      	lsrs	r3, r3, #1
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	793b      	ldrb	r3, [r7, #4]
 8001098:	f362 0300 	bfi	r3, r2, #0, #1
 800109c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <SPI2_IRQHandler+0x54>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	793b      	ldrb	r3, [r7, #4]
 80010aa:	f362 0341 	bfi	r3, r2, #1, #1
 80010ae:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <SPI2_IRQHandler+0x54>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	f362 0382 	bfi	r3, r2, #2, #1
 80010c2:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SPI2_IRQHandler+0x58>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	7938      	ldrb	r0, [r7, #4]
 80010cc:	4798      	blx	r3
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40003800 	.word	0x40003800
 80010dc:	20000054 	.word	0x20000054

080010e0 <MCAL_TIM4_CAP_Init>:
}



void MCAL_TIM4_CAP_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
	//set pin capture input channel 1
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber=GPIO_PIN_6;
 80010ea:	2340      	movs	r3, #64	; 0x40
 80010ec:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	4619      	mov	r1, r3
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <MCAL_TIM4_CAP_Init+0x40>)
 80010f4:	f7ff fe39 	bl	8000d6a <MCAL_GPIO_Init>
	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM4->PSC=7;
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <MCAL_TIM4_CAP_Init+0x44>)
 80010fa:	2207      	movs	r2, #7
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value
	TIM4->ARR=0XFFFF;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MCAL_TIM4_CAP_Init+0x44>)
 8001100:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001104:	62da      	str	r2, [r3, #44]	; 0x2c
	//CC1 channel is configured as input, IC1 is mapped on TI1
	TIM4->CCMR1 =0x31;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <MCAL_TIM4_CAP_Init+0x44>)
 8001108:	2231      	movs	r2, #49	; 0x31
 800110a:	619a      	str	r2, [r3, #24]
	// Enable capture on CC1
	TIM4->CCER |= (1<<0);
 800110c:	4b05      	ldr	r3, [pc, #20]	; (8001124 <MCAL_TIM4_CAP_Init+0x44>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <MCAL_TIM4_CAP_Init+0x44>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6213      	str	r3, [r2, #32]
}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40000800 	.word	0x40000800

08001128 <MCAL_TIM4_CAP_Get_Low>:
	TIM4->CR1=0;
	return ((1.0/1000000)*TIM4->CCR1);
}

float MCAL_TIM4_CAP_Get_Low(void)
{
 8001128:	b598      	push	{r3, r4, r7, lr}
 800112a:	af00      	add	r7, sp, #0
	// enable counter
	TIM4->CR1=1;
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]
	//Set CAP at falling edge
	TIM4->CCER |=1<<1;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a1e      	ldr	r2, [pc, #120]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6213      	str	r3, [r2, #32]
	//wait until falling edge
	while(!(TIM4->SR &(1<<1)));
 800113e:	bf00      	nop
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0f9      	beq.n	8001140 <MCAL_TIM4_CAP_Get_Low+0x18>
	TIM4->SR=0;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	//reset counter
	TIM4->CNT=0;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
	//Set CAP at raising edge
	TIM4->CCER &=~(1<<1);
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	4a14      	ldr	r2, [pc, #80]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 800115e:	f023 0302 	bic.w	r3, r3, #2
 8001162:	6213      	str	r3, [r2, #32]
	//wait until raising edge
	while(!(TIM4->SR &(1<<1)));
 8001164:	bf00      	nop
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f9      	beq.n	8001166 <MCAL_TIM4_CAP_Get_Low+0x3e>
	TIM4->SR=0;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM4->CR1=0;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
	return ((1.0/1000000)*TIM4->CCR1);
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MCAL_TIM4_CAP_Get_Low+0x88>)
 8001180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f936 	bl	80003f4 <__aeabi_ui2d>
 8001188:	a307      	add	r3, pc, #28	; (adr r3, 80011a8 <MCAL_TIM4_CAP_Get_Low+0x80>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff f9ab 	bl	80004e8 <__aeabi_dmul>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4618      	mov	r0, r3
 8001198:	4621      	mov	r1, r4
 800119a:	f7ff fbb7 	bl	800090c <__aeabi_d2f>
 800119e:	4603      	mov	r3, r0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd98      	pop	{r3, r4, r7, pc}
 80011a4:	f3af 8000 	nop.w
 80011a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80011ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80011b0:	40000800 	.word	0x40000800

080011b4 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <USART1_IRQHandler+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	4798      	blx	r3
}
 80011c0:	bf00      	nop
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000005c 	.word	0x2000005c

080011c8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 80011cc:	4b02      	ldr	r3, [pc, #8]	; (80011d8 <USART2_IRQHandler+0x10>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	4798      	blx	r3
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	2000005c 	.word	0x2000005c

080011dc <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <USART3_IRQHandler+0x10>)
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	4798      	blx	r3
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2000005c 	.word	0x2000005c

080011f0 <__libc_init_array>:
 80011f0:	b570      	push	{r4, r5, r6, lr}
 80011f2:	2500      	movs	r5, #0
 80011f4:	4e0c      	ldr	r6, [pc, #48]	; (8001228 <__libc_init_array+0x38>)
 80011f6:	4c0d      	ldr	r4, [pc, #52]	; (800122c <__libc_init_array+0x3c>)
 80011f8:	1ba4      	subs	r4, r4, r6
 80011fa:	10a4      	asrs	r4, r4, #2
 80011fc:	42a5      	cmp	r5, r4
 80011fe:	d109      	bne.n	8001214 <__libc_init_array+0x24>
 8001200:	f000 f81a 	bl	8001238 <_init>
 8001204:	2500      	movs	r5, #0
 8001206:	4e0a      	ldr	r6, [pc, #40]	; (8001230 <__libc_init_array+0x40>)
 8001208:	4c0a      	ldr	r4, [pc, #40]	; (8001234 <__libc_init_array+0x44>)
 800120a:	1ba4      	subs	r4, r4, r6
 800120c:	10a4      	asrs	r4, r4, #2
 800120e:	42a5      	cmp	r5, r4
 8001210:	d105      	bne.n	800121e <__libc_init_array+0x2e>
 8001212:	bd70      	pop	{r4, r5, r6, pc}
 8001214:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001218:	4798      	blx	r3
 800121a:	3501      	adds	r5, #1
 800121c:	e7ee      	b.n	80011fc <__libc_init_array+0xc>
 800121e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001222:	4798      	blx	r3
 8001224:	3501      	adds	r5, #1
 8001226:	e7f2      	b.n	800120e <__libc_init_array+0x1e>
 8001228:	08001250 	.word	0x08001250
 800122c:	08001250 	.word	0x08001250
 8001230:	08001250 	.word	0x08001250
 8001234:	08001254 	.word	0x08001254

08001238 <_init>:
 8001238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800123a:	bf00      	nop
 800123c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800123e:	bc08      	pop	{r3}
 8001240:	469e      	mov	lr, r3
 8001242:	4770      	bx	lr

08001244 <_fini>:
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	bf00      	nop
 8001248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800124a:	bc08      	pop	{r3}
 800124c:	469e      	mov	lr, r3
 800124e:	4770      	bx	lr
