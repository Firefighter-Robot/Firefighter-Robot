
Firefighter-Robot_Code.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dd0  08000dd8  00010dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dd0  08000dd0  00010dd8  2**0
                  CONTENTS
  4 .ARM          00000000  08000dd0  08000dd0  00010dd8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dd0  08000dd8  00010dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd4  08000dd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08000dd8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08000dd8  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c86  00000000  00000000  00010e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000db2  00000000  00000000  00013a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00014840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002b0  00000000  00000000  00014b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ac8  00000000  00000000  00014e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004a00  00000000  00000000  00018900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000d99a  00000000  00000000  0001d300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002ac9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b10  00000000  00000000  0002acec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000db8 	.word	0x08000db8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000db8 	.word	0x08000db8

08000170 <Car_Move>:
}



void Car_Move(uint16_t speed , char distance)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	460a      	mov	r2, r1
 800017a:	80fb      	strh	r3, [r7, #6]
 800017c:	4613      	mov	r3, r2
 800017e:	717b      	strb	r3, [r7, #5]
	// motor Front_Left_Motor move forward 
	MCAL_GPIO_WritePin(GPIOA,Motor1_Front,GPIO_PIN_SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000186:	4843      	ldr	r0, [pc, #268]	; (8000294 <Car_Move+0x124>)
 8000188:	f000 fc4f 	bl	8000a2a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,Motor1_Back,GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000192:	4840      	ldr	r0, [pc, #256]	; (8000294 <Car_Move+0x124>)
 8000194:	f000 fc49 	bl	8000a2a <MCAL_GPIO_WritePin>
	// motor Front_Right_Motor move forward 
	MCAL_GPIO_WritePin(GPIOA,Motor2_Front,GPIO_PIN_SET);
 8000198:	2201      	movs	r2, #1
 800019a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800019e:	483d      	ldr	r0, [pc, #244]	; (8000294 <Car_Move+0x124>)
 80001a0:	f000 fc43 	bl	8000a2a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOA,Motor2_Back,GPIO_PIN_RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001aa:	483a      	ldr	r0, [pc, #232]	; (8000294 <Car_Move+0x124>)
 80001ac:	f000 fc3d 	bl	8000a2a <MCAL_GPIO_WritePin>
	// motor Back_Left_Motor move forward 
	MCAL_GPIO_WritePin(GPIOB,Motor3_Front,GPIO_PIN_SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2108      	movs	r1, #8
 80001b4:	4838      	ldr	r0, [pc, #224]	; (8000298 <Car_Move+0x128>)
 80001b6:	f000 fc38 	bl	8000a2a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Motor3_Back,GPIO_PIN_RESET);
 80001ba:	2200      	movs	r2, #0
 80001bc:	2110      	movs	r1, #16
 80001be:	4836      	ldr	r0, [pc, #216]	; (8000298 <Car_Move+0x128>)
 80001c0:	f000 fc33 	bl	8000a2a <MCAL_GPIO_WritePin>
	// motor Back_Right_Motor move forward 
	MCAL_GPIO_WritePin(GPIOB,Motor4_Front,GPIO_PIN_SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2180      	movs	r1, #128	; 0x80
 80001c8:	4833      	ldr	r0, [pc, #204]	; (8000298 <Car_Move+0x128>)
 80001ca:	f000 fc2e 	bl	8000a2a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Motor4_Back,GPIO_PIN_RESET);
 80001ce:	2200      	movs	r2, #0
 80001d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001d4:	4830      	ldr	r0, [pc, #192]	; (8000298 <Car_Move+0x128>)
 80001d6:	f000 fc28 	bl	8000a2a <MCAL_GPIO_WritePin>


	// by iteration set duty cycle to specific speed
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Front_Left_Motor);
 80001da:	88fb      	ldrh	r3, [r7, #6]
 80001dc:	461a      	mov	r2, r3
 80001de:	0092      	lsls	r2, r2, #2
 80001e0:	4413      	add	r3, r2
 80001e2:	461a      	mov	r2, r3
 80001e4:	0091      	lsls	r1, r2, #2
 80001e6:	461a      	mov	r2, r3
 80001e8:	460b      	mov	r3, r1
 80001ea:	4413      	add	r3, r2
 80001ec:	00db      	lsls	r3, r3, #3
 80001ee:	b29b      	uxth	r3, r3
 80001f0:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 80001f4:	3320      	adds	r3, #32
 80001f6:	b29b      	uxth	r3, r3
 80001f8:	2200      	movs	r2, #0
 80001fa:	4619      	mov	r1, r3
 80001fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000200:	f000 fd66 	bl	8000cd0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Front_Right_Motor);
 8000204:	88fb      	ldrh	r3, [r7, #6]
 8000206:	461a      	mov	r2, r3
 8000208:	0092      	lsls	r2, r2, #2
 800020a:	4413      	add	r3, r2
 800020c:	461a      	mov	r2, r3
 800020e:	0091      	lsls	r1, r2, #2
 8000210:	461a      	mov	r2, r3
 8000212:	460b      	mov	r3, r1
 8000214:	4413      	add	r3, r2
 8000216:	00db      	lsls	r3, r3, #3
 8000218:	b29b      	uxth	r3, r3
 800021a:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 800021e:	3320      	adds	r3, #32
 8000220:	b29b      	uxth	r3, r3
 8000222:	2201      	movs	r2, #1
 8000224:	4619      	mov	r1, r3
 8000226:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800022a:	f000 fd51 	bl	8000cd0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Back_Left_Motor);
 800022e:	88fb      	ldrh	r3, [r7, #6]
 8000230:	461a      	mov	r2, r3
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	4413      	add	r3, r2
 8000236:	461a      	mov	r2, r3
 8000238:	0091      	lsls	r1, r2, #2
 800023a:	461a      	mov	r2, r3
 800023c:	460b      	mov	r3, r1
 800023e:	4413      	add	r3, r2
 8000240:	00db      	lsls	r3, r3, #3
 8000242:	b29b      	uxth	r3, r3
 8000244:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000248:	3320      	adds	r3, #32
 800024a:	b29b      	uxth	r3, r3
 800024c:	2202      	movs	r2, #2
 800024e:	4619      	mov	r1, r3
 8000250:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000254:	f000 fd3c 	bl	8000cd0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Back_Right_Motor);
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	461a      	mov	r2, r3
 800025c:	0092      	lsls	r2, r2, #2
 800025e:	4413      	add	r3, r2
 8000260:	461a      	mov	r2, r3
 8000262:	0091      	lsls	r1, r2, #2
 8000264:	461a      	mov	r2, r3
 8000266:	460b      	mov	r3, r1
 8000268:	4413      	add	r3, r2
 800026a:	00db      	lsls	r3, r3, #3
 800026c:	b29b      	uxth	r3, r3
 800026e:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000272:	3320      	adds	r3, #32
 8000274:	b29b      	uxth	r3, r3
 8000276:	2203      	movs	r2, #3
 8000278:	4619      	mov	r1, r3
 800027a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027e:	f000 fd27 	bl	8000cd0 <MCAL_TIMx_Set_Compare_Value>

	// by iteration set delay to specific distance
	delay_ms(2000);
 8000282:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000286:	f000 f963 	bl	8000550 <delay_ms>

	// stop the movement
	//Car_Stop_Moving();

}
 800028a:	bf00      	nop
 800028c:	3708      	adds	r7, #8
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010800 	.word	0x40010800
 8000298:	40010c00 	.word	0x40010c00

0800029c <Clock_INIT>:




void Clock_INIT(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 80002a0:	4b19      	ldr	r3, [pc, #100]	; (8000308 <Clock_INIT+0x6c>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a18      	ldr	r2, [pc, #96]	; (8000308 <Clock_INIT+0x6c>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <Clock_INIT+0x6c>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a15      	ldr	r2, [pc, #84]	; (8000308 <Clock_INIT+0x6c>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_GPIOC_CLK_EN();
 80002b8:	4b13      	ldr	r3, [pc, #76]	; (8000308 <Clock_INIT+0x6c>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a12      	ldr	r2, [pc, #72]	; (8000308 <Clock_INIT+0x6c>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80002c4:	4b10      	ldr	r3, [pc, #64]	; (8000308 <Clock_INIT+0x6c>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a0f      	ldr	r2, [pc, #60]	; (8000308 <Clock_INIT+0x6c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 80002d0:	4b0d      	ldr	r3, [pc, #52]	; (8000308 <Clock_INIT+0x6c>)
 80002d2:	69db      	ldr	r3, [r3, #28]
 80002d4:	4a0c      	ldr	r2, [pc, #48]	; (8000308 <Clock_INIT+0x6c>)
 80002d6:	f043 0301 	orr.w	r3, r3, #1
 80002da:	61d3      	str	r3, [r2, #28]
	RCC_TIM3_CLK_Enable();
 80002dc:	4b0a      	ldr	r3, [pc, #40]	; (8000308 <Clock_INIT+0x6c>)
 80002de:	69db      	ldr	r3, [r3, #28]
 80002e0:	4a09      	ldr	r2, [pc, #36]	; (8000308 <Clock_INIT+0x6c>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	61d3      	str	r3, [r2, #28]
	RCC_TIM4_CLK_Enable();
 80002e8:	4b07      	ldr	r3, [pc, #28]	; (8000308 <Clock_INIT+0x6c>)
 80002ea:	69db      	ldr	r3, [r3, #28]
 80002ec:	4a06      	ldr	r2, [pc, #24]	; (8000308 <Clock_INIT+0x6c>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	61d3      	str	r3, [r2, #28]
	RCC_ADC1_CLK_Enable();
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <Clock_INIT+0x6c>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a03      	ldr	r2, [pc, #12]	; (8000308 <Clock_INIT+0x6c>)
 80002fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002fe:	6193      	str	r3, [r2, #24]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <main>:
	//Init_pumb();

}
TIMx_config_t Timer2;

int main (){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0

	Clock_INIT();
 8000312:	f7ff ffc3 	bl	800029c <Clock_INIT>
	//Car_Routation(Angle_Step_70,Car_TurnRight);
	//MCAL_TIMx_Set_Compare_Value(TIM2,0,CH1);

//
	GPIO_Pinconfig_t ghh;
	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000316:	2304      	movs	r3, #4
 8000318:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800031a:	2301      	movs	r3, #1
 800031c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_0;
 800031e:	2301      	movs	r3, #1
 8000320:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	4874      	ldr	r0, [pc, #464]	; (80004f8 <main+0x1ec>)
 8000328:	f000 fb00 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	4871      	ldr	r0, [pc, #452]	; (80004f8 <main+0x1ec>)
 8000332:	f000 fb7a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000336:	2304      	movs	r3, #4
 8000338:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800033a:	2301      	movs	r3, #1
 800033c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_1;
 800033e:	2302      	movs	r3, #2
 8000340:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	4619      	mov	r1, r3
 8000346:	486c      	ldr	r0, [pc, #432]	; (80004f8 <main+0x1ec>)
 8000348:	f000 faf0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 800034c:	2201      	movs	r2, #1
 800034e:	2102      	movs	r1, #2
 8000350:	4869      	ldr	r0, [pc, #420]	; (80004f8 <main+0x1ec>)
 8000352:	f000 fb6a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000356:	2304      	movs	r3, #4
 8000358:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800035a:	2301      	movs	r3, #1
 800035c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_2;
 800035e:	2304      	movs	r3, #4
 8000360:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	4619      	mov	r1, r3
 8000366:	4864      	ldr	r0, [pc, #400]	; (80004f8 <main+0x1ec>)
 8000368:	f000 fae0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800036c:	2201      	movs	r2, #1
 800036e:	2104      	movs	r1, #4
 8000370:	4861      	ldr	r0, [pc, #388]	; (80004f8 <main+0x1ec>)
 8000372:	f000 fb5a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000376:	2304      	movs	r3, #4
 8000378:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800037a:	2301      	movs	r3, #1
 800037c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_3;
 800037e:	2308      	movs	r3, #8
 8000380:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	4619      	mov	r1, r3
 8000386:	485c      	ldr	r0, [pc, #368]	; (80004f8 <main+0x1ec>)
 8000388:	f000 fad0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 800038c:	2201      	movs	r2, #1
 800038e:	2108      	movs	r1, #8
 8000390:	4859      	ldr	r0, [pc, #356]	; (80004f8 <main+0x1ec>)
 8000392:	f000 fb4a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000396:	2304      	movs	r3, #4
 8000398:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800039a:	2301      	movs	r3, #1
 800039c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_4;
 800039e:	2310      	movs	r3, #16
 80003a0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	4619      	mov	r1, r3
 80003a6:	4854      	ldr	r0, [pc, #336]	; (80004f8 <main+0x1ec>)
 80003a8:	f000 fac0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	4851      	ldr	r0, [pc, #324]	; (80004f8 <main+0x1ec>)
 80003b2:	f000 fb3a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003b6:	2304      	movs	r3, #4
 80003b8:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 80003ba:	2301      	movs	r3, #1
 80003bc:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_5;
 80003be:	2320      	movs	r3, #32
 80003c0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	484c      	ldr	r0, [pc, #304]	; (80004f8 <main+0x1ec>)
 80003c8:	f000 fab0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80003cc:	2201      	movs	r2, #1
 80003ce:	2120      	movs	r1, #32
 80003d0:	4849      	ldr	r0, [pc, #292]	; (80004f8 <main+0x1ec>)
 80003d2:	f000 fb2a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003d6:	2304      	movs	r3, #4
 80003d8:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 80003da:	2301      	movs	r3, #1
 80003dc:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_6;
 80003de:	2340      	movs	r3, #64	; 0x40
 80003e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	4619      	mov	r1, r3
 80003e6:	4844      	ldr	r0, [pc, #272]	; (80004f8 <main+0x1ec>)
 80003e8:	f000 faa0 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	4841      	ldr	r0, [pc, #260]	; (80004f8 <main+0x1ec>)
 80003f2:	f000 fb1a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f6:	2304      	movs	r3, #4
 80003f8:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 80003fa:	2301      	movs	r3, #1
 80003fc:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_7;
 80003fe:	2380      	movs	r3, #128	; 0x80
 8000400:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	4619      	mov	r1, r3
 8000406:	483c      	ldr	r0, [pc, #240]	; (80004f8 <main+0x1ec>)
 8000408:	f000 fa90 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 800040c:	2201      	movs	r2, #1
 800040e:	2180      	movs	r1, #128	; 0x80
 8000410:	4839      	ldr	r0, [pc, #228]	; (80004f8 <main+0x1ec>)
 8000412:	f000 fb0a 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000416:	2304      	movs	r3, #4
 8000418:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800041a:	2301      	movs	r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_8;
 800041e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000422:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	4619      	mov	r1, r3
 8000428:	4833      	ldr	r0, [pc, #204]	; (80004f8 <main+0x1ec>)
 800042a:	f000 fa7f 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000434:	4830      	ldr	r0, [pc, #192]	; (80004f8 <main+0x1ec>)
 8000436:	f000 faf8 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800043a:	2304      	movs	r3, #4
 800043c:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800043e:	2301      	movs	r3, #1
 8000440:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_9;
 8000442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000446:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000448:	1d3b      	adds	r3, r7, #4
 800044a:	4619      	mov	r1, r3
 800044c:	482a      	ldr	r0, [pc, #168]	; (80004f8 <main+0x1ec>)
 800044e:	f000 fa6d 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000458:	4827      	ldr	r0, [pc, #156]	; (80004f8 <main+0x1ec>)
 800045a:	f000 fae6 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800045e:	2304      	movs	r3, #4
 8000460:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000462:	2301      	movs	r3, #1
 8000464:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_10;
 8000466:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800046a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	4619      	mov	r1, r3
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <main+0x1ec>)
 8000472:	f000 fa5b 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047c:	481e      	ldr	r0, [pc, #120]	; (80004f8 <main+0x1ec>)
 800047e:	f000 fad4 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000482:	2304      	movs	r3, #4
 8000484:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000486:	2301      	movs	r3, #1
 8000488:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_11;
 800048a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800048e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4619      	mov	r1, r3
 8000494:	4818      	ldr	r0, [pc, #96]	; (80004f8 <main+0x1ec>)
 8000496:	f000 fa49 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004a0:	4815      	ldr	r0, [pc, #84]	; (80004f8 <main+0x1ec>)
 80004a2:	f000 fac2 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004a6:	2304      	movs	r3, #4
 80004a8:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 80004aa:	2301      	movs	r3, #1
 80004ac:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_12;
 80004ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b2:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4619      	mov	r1, r3
 80004b8:	480f      	ldr	r0, [pc, #60]	; (80004f8 <main+0x1ec>)
 80004ba:	f000 fa37 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c4:	480c      	ldr	r0, [pc, #48]	; (80004f8 <main+0x1ec>)
 80004c6:	f000 fab0 	bl	8000a2a <MCAL_GPIO_WritePin>

	ghh.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ca:	2304      	movs	r3, #4
 80004cc:	71bb      	strb	r3, [r7, #6]
	ghh.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 80004ce:	2301      	movs	r3, #1
 80004d0:	71fb      	strb	r3, [r7, #7]
	ghh.pinNumber = GPIO_PIN_15;
 80004d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004d6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &ghh);
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	4619      	mov	r1, r3
 80004dc:	4806      	ldr	r0, [pc, #24]	; (80004f8 <main+0x1ec>)
 80004de:	f000 fa25 	bl	800092c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80004e2:	2201      	movs	r2, #1
 80004e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <main+0x1ec>)
 80004ea:	f000 fa9e 	bl	8000a2a <MCAL_GPIO_WritePin>
//	MCAL_GPIO_Init(GPIOA, &ghh);
//	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
	while(1)
	{
		//delay_ms(4000);
		Car_Move(Car_Speed_50, 5);
 80004ee:	2105      	movs	r1, #5
 80004f0:	2032      	movs	r0, #50	; 0x32
 80004f2:	f7ff fe3d 	bl	8000170 <Car_Move>
 80004f6:	e7fa      	b.n	80004ee <main+0x1e2>
 80004f8:	40010c00 	.word	0x40010c00

080004fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000500:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480c      	ldr	r0, [pc, #48]	; (8000538 <LoopForever+0x6>)
  ldr r1, =_edata
 8000506:	490d      	ldr	r1, [pc, #52]	; (800053c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000508:	4a0d      	ldr	r2, [pc, #52]	; (8000540 <LoopForever+0xe>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <LoopForever+0x12>)
  ldr r4, =_ebss
 800051c:	4c0a      	ldr	r4, [pc, #40]	; (8000548 <LoopForever+0x16>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800052a:	f000 fc21 	bl	8000d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff feed 	bl	800030c <main>

08000532 <LoopForever>:

LoopForever:
    b LoopForever
 8000532:	e7fe      	b.n	8000532 <LoopForever>
  ldr   r0, =_estack
 8000534:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000538:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800053c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000540:	08000dd8 	.word	0x08000dd8
  ldr r2, =_sbss
 8000544:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000548:	200000a4 	.word	0x200000a4

0800054c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800054c:	e7fe      	b.n	800054c <ADC1_2_IRQHandler>
	...

08000550 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM3->PSC=7999;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <delay_ms+0x48>)
 800055a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM3->ARR=ms-1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1e5a      	subs	r2, r3, #1
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <delay_ms+0x48>)
 8000566:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM3->CR1 |=1<<0;
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <delay_ms+0x48>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <delay_ms+0x48>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register
	while(!(TIM3->SR & 1<<0));
 8000574:	bf00      	nop
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <delay_ms+0x48>)
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f9      	beq.n	8000576 <delay_ms+0x26>
	// clear flag
	TIM3->SR=0;
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <delay_ms+0x48>)
 8000584:	2200      	movs	r2, #0
 8000586:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM3->CR1 =0;
 8000588:	4b03      	ldr	r3, [pc, #12]	; (8000598 <delay_ms+0x48>)
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40000400 	.word	0x40000400

0800059c <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <EXTI0_IRQHandler+0x1c>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a04      	ldr	r2, [pc, #16]	; (80005b8 <EXTI0_IRQHandler+0x1c>)
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <EXTI0_IRQHandler+0x20>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4798      	blx	r3
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010400 	.word	0x40010400
 80005bc:	2000001c 	.word	0x2000001c

080005c0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 80005c4:	4b05      	ldr	r3, [pc, #20]	; (80005dc <EXTI1_IRQHandler+0x1c>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <EXTI1_IRQHandler+0x1c>)
 80005ca:	f043 0302 	orr.w	r3, r3, #2
 80005ce:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 80005d0:	4b03      	ldr	r3, [pc, #12]	; (80005e0 <EXTI1_IRQHandler+0x20>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4798      	blx	r3
}
 80005d6:	bf00      	nop
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40010400 	.word	0x40010400
 80005e0:	2000001c 	.word	0x2000001c

080005e4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 80005e8:	4b05      	ldr	r3, [pc, #20]	; (8000600 <EXTI2_IRQHandler+0x1c>)
 80005ea:	695b      	ldr	r3, [r3, #20]
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <EXTI2_IRQHandler+0x1c>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <EXTI2_IRQHandler+0x20>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	4798      	blx	r3
}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010400 	.word	0x40010400
 8000604:	2000001c 	.word	0x2000001c

08000608 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI3_IRQHandler+0x1c>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI3_IRQHandler+0x1c>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI3_IRQHandler+0x20>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4798      	blx	r3
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	2000001c 	.word	0x2000001c

0800062c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <EXTI4_IRQHandler+0x1c>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <EXTI4_IRQHandler+0x1c>)
 8000636:	f043 0310 	orr.w	r3, r3, #16
 800063a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <EXTI4_IRQHandler+0x20>)
 800063e:	691b      	ldr	r3, [r3, #16]
 8000640:	4798      	blx	r3
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40010400 	.word	0x40010400
 800064c:	2000001c 	.word	0x2000001c

08000650 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8000654:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000656:	695b      	ldr	r3, [r3, #20]
 8000658:	f003 0320 	and.w	r3, r3, #32
 800065c:	2b00      	cmp	r3, #0
 800065e:	d008      	beq.n	8000672 <EXTI9_5_IRQHandler+0x22>
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000662:	695b      	ldr	r3, [r3, #20]
 8000664:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000666:	f043 0320 	orr.w	r3, r3, #32
 800066a:	6153      	str	r3, [r2, #20]
 800066c:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <EXTI9_5_IRQHandler+0xa4>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800067a:	2b00      	cmp	r3, #0
 800067c:	d008      	beq.n	8000690 <EXTI9_5_IRQHandler+0x40>
 800067e:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000688:	6153      	str	r3, [r2, #20]
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <EXTI9_5_IRQHandler+0xa4>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000698:	2b00      	cmp	r3, #0
 800069a:	d008      	beq.n	80006ae <EXTI9_5_IRQHandler+0x5e>
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a6:	6153      	str	r3, [r2, #20]
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <EXTI9_5_IRQHandler+0xa4>)
 80006aa:	69db      	ldr	r3, [r3, #28]
 80006ac:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d008      	beq.n	80006cc <EXTI9_5_IRQHandler+0x7c>
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006bc:	695b      	ldr	r3, [r3, #20]
 80006be:	4a0c      	ldr	r2, [pc, #48]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6153      	str	r3, [r2, #20]
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <EXTI9_5_IRQHandler+0xa4>)
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d008      	beq.n	80006ea <EXTI9_5_IRQHandler+0x9a>
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006da:	695b      	ldr	r3, [r3, #20]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <EXTI9_5_IRQHandler+0xa0>)
 80006de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006e2:	6153      	str	r3, [r2, #20]
 80006e4:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <EXTI9_5_IRQHandler+0xa4>)
 80006e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e8:	4798      	blx	r3
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40010400 	.word	0x40010400
 80006f4:	2000001c 	.word	0x2000001c

080006f8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000704:	2b00      	cmp	r3, #0
 8000706:	d008      	beq.n	800071a <EXTI15_10_IRQHandler+0x22>
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a29      	ldr	r2, [pc, #164]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800070e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000712:	6153      	str	r3, [r2, #20]
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 8000716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000718:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000722:	2b00      	cmp	r3, #0
 8000724:	d008      	beq.n	8000738 <EXTI15_10_IRQHandler+0x40>
 8000726:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	4a22      	ldr	r2, [pc, #136]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800072c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000730:	6153      	str	r3, [r2, #20]
 8000732:	4b21      	ldr	r3, [pc, #132]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000738:	4b1e      	ldr	r3, [pc, #120]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <EXTI15_10_IRQHandler+0x5e>
 8000744:	4b1b      	ldr	r3, [pc, #108]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 800074a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800074e:	6153      	str	r3, [r2, #20]
 8000750:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 8000752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000754:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075e:	2b00      	cmp	r3, #0
 8000760:	d008      	beq.n	8000774 <EXTI15_10_IRQHandler+0x7c>
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a13      	ldr	r2, [pc, #76]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 8000770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000772:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <EXTI15_10_IRQHandler+0x9a>
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6153      	str	r3, [r2, #20]
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 800078e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000790:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <EXTI15_10_IRQHandler+0xb8>
 800079e:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a04      	ldr	r2, [pc, #16]	; (80007b4 <EXTI15_10_IRQHandler+0xbc>)
 80007a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <EXTI15_10_IRQHandler+0xc0>)
 80007ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80007ae:	4798      	blx	r3
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40010400 	.word	0x40010400
 80007b8:	2000001c 	.word	0x2000001c

080007bc <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007cc:	f000 80a5 	beq.w	800091a <get_position+0x15e>
 80007d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80007d4:	f300 80a3 	bgt.w	800091e <get_position+0x162>
 80007d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007dc:	f000 809b 	beq.w	8000916 <get_position+0x15a>
 80007e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007e4:	f300 809b 	bgt.w	800091e <get_position+0x162>
 80007e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ec:	f000 8091 	beq.w	8000912 <get_position+0x156>
 80007f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f4:	f300 8093 	bgt.w	800091e <get_position+0x162>
 80007f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007fc:	f000 8087 	beq.w	800090e <get_position+0x152>
 8000800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000804:	f300 808b 	bgt.w	800091e <get_position+0x162>
 8000808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080c:	d07d      	beq.n	800090a <get_position+0x14e>
 800080e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000812:	f300 8084 	bgt.w	800091e <get_position+0x162>
 8000816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081a:	d074      	beq.n	8000906 <get_position+0x14a>
 800081c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000820:	dc7d      	bgt.n	800091e <get_position+0x162>
 8000822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000826:	d06c      	beq.n	8000902 <get_position+0x146>
 8000828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800082c:	dc77      	bgt.n	800091e <get_position+0x162>
 800082e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000832:	d064      	beq.n	80008fe <get_position+0x142>
 8000834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000838:	dc71      	bgt.n	800091e <get_position+0x162>
 800083a:	2b80      	cmp	r3, #128	; 0x80
 800083c:	d05d      	beq.n	80008fa <get_position+0x13e>
 800083e:	2b80      	cmp	r3, #128	; 0x80
 8000840:	dc6d      	bgt.n	800091e <get_position+0x162>
 8000842:	2b20      	cmp	r3, #32
 8000844:	dc48      	bgt.n	80008d8 <get_position+0x11c>
 8000846:	2b00      	cmp	r3, #0
 8000848:	dd69      	ble.n	800091e <get_position+0x162>
 800084a:	3b01      	subs	r3, #1
 800084c:	2b1f      	cmp	r3, #31
 800084e:	d866      	bhi.n	800091e <get_position+0x162>
 8000850:	a201      	add	r2, pc, #4	; (adr r2, 8000858 <get_position+0x9c>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	080008df 	.word	0x080008df
 800085c:	080008e3 	.word	0x080008e3
 8000860:	0800091f 	.word	0x0800091f
 8000864:	080008e7 	.word	0x080008e7
 8000868:	0800091f 	.word	0x0800091f
 800086c:	0800091f 	.word	0x0800091f
 8000870:	0800091f 	.word	0x0800091f
 8000874:	080008eb 	.word	0x080008eb
 8000878:	0800091f 	.word	0x0800091f
 800087c:	0800091f 	.word	0x0800091f
 8000880:	0800091f 	.word	0x0800091f
 8000884:	0800091f 	.word	0x0800091f
 8000888:	0800091f 	.word	0x0800091f
 800088c:	0800091f 	.word	0x0800091f
 8000890:	0800091f 	.word	0x0800091f
 8000894:	080008ef 	.word	0x080008ef
 8000898:	0800091f 	.word	0x0800091f
 800089c:	0800091f 	.word	0x0800091f
 80008a0:	0800091f 	.word	0x0800091f
 80008a4:	0800091f 	.word	0x0800091f
 80008a8:	0800091f 	.word	0x0800091f
 80008ac:	0800091f 	.word	0x0800091f
 80008b0:	0800091f 	.word	0x0800091f
 80008b4:	0800091f 	.word	0x0800091f
 80008b8:	0800091f 	.word	0x0800091f
 80008bc:	0800091f 	.word	0x0800091f
 80008c0:	0800091f 	.word	0x0800091f
 80008c4:	0800091f 	.word	0x0800091f
 80008c8:	0800091f 	.word	0x0800091f
 80008cc:	0800091f 	.word	0x0800091f
 80008d0:	0800091f 	.word	0x0800091f
 80008d4:	080008f3 	.word	0x080008f3
 80008d8:	2b40      	cmp	r3, #64	; 0x40
 80008da:	d00c      	beq.n	80008f6 <get_position+0x13a>
 80008dc:	e01f      	b.n	800091e <get_position+0x162>
	{
	case GPIO_PIN_0 :
		return 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	e01e      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 80008e2:	2304      	movs	r3, #4
 80008e4:	e01c      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 80008e6:	2308      	movs	r3, #8
 80008e8:	e01a      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 80008ea:	230c      	movs	r3, #12
 80008ec:	e018      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 80008ee:	2310      	movs	r3, #16
 80008f0:	e016      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 80008f2:	2314      	movs	r3, #20
 80008f4:	e014      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 80008f6:	2318      	movs	r3, #24
 80008f8:	e012      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 80008fa:	231c      	movs	r3, #28
 80008fc:	e010      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	e00e      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000902:	2304      	movs	r3, #4
 8000904:	e00c      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 8000906:	2308      	movs	r3, #8
 8000908:	e00a      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 800090a:	230c      	movs	r3, #12
 800090c:	e008      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 800090e:	2310      	movs	r3, #16
 8000910:	e006      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 8000912:	2314      	movs	r3, #20
 8000914:	e004      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 8000916:	2318      	movs	r3, #24
 8000918:	e002      	b.n	8000920 <get_position+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 800091a:	231c      	movs	r3, #28
 800091c:	e000      	b.n	8000920 <get_position+0x164>
		break;
	default:
		return 0;
 800091e:	2300      	movs	r3, #0
	}
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop

0800092c <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	2bff      	cmp	r3, #255	; 0xff
 8000944:	d801      	bhi.n	800094a <MCAL_GPIO_Init+0x1e>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	e001      	b.n	800094e <MCAL_GPIO_Init+0x22>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	3304      	adds	r3, #4
 800094e:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	881b      	ldrh	r3, [r3, #0]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff31 	bl	80007bc <get_position>
 800095a:	4603      	mov	r3, r0
 800095c:	461a      	mov	r2, r3
 800095e:	230f      	movs	r3, #15
 8000960:	4093      	lsls	r3, r2
 8000962:	43da      	mvns	r2, r3
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	401a      	ands	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	789b      	ldrb	r3, [r3, #2]
 8000972:	2b07      	cmp	r3, #7
 8000974:	d00b      	beq.n	800098e <MCAL_GPIO_Init+0x62>
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	789b      	ldrb	r3, [r3, #2]
 800097a:	2b06      	cmp	r3, #6
 800097c:	d007      	beq.n	800098e <MCAL_GPIO_Init+0x62>
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	789b      	ldrb	r3, [r3, #2]
 8000982:	2b05      	cmp	r3, #5
 8000984:	d003      	beq.n	800098e <MCAL_GPIO_Init+0x62>
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	789b      	ldrb	r3, [r3, #2]
 800098a:	2b04      	cmp	r3, #4
 800098c:	d10e      	bne.n	80009ac <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	3b04      	subs	r3, #4
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	b25a      	sxtb	r2, r3
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	78db      	ldrb	r3, [r3, #3]
 800099c:	b25b      	sxtb	r3, r3
 800099e:	4313      	orrs	r3, r2
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	f003 030f 	and.w	r3, r3, #15
 80009a8:	73fb      	strb	r3, [r7, #15]
 80009aa:	e02c      	b.n	8000a06 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	789b      	ldrb	r3, [r3, #2]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d003      	beq.n	80009bc <MCAL_GPIO_Init+0x90>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d107      	bne.n	80009cc <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	789b      	ldrb	r3, [r3, #2]
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 030f 	and.w	r3, r3, #15
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e01c      	b.n	8000a06 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	789b      	ldrb	r3, [r3, #2]
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d102      	bne.n	80009da <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 80009d4:	2304      	movs	r3, #4
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	e015      	b.n	8000a06 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 80009da:	2308      	movs	r3, #8
 80009dc:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	789b      	ldrb	r3, [r3, #2]
 80009e2:	2b02      	cmp	r3, #2
 80009e4:	d107      	bne.n	80009f6 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	68db      	ldr	r3, [r3, #12]
 80009ea:	683a      	ldr	r2, [r7, #0]
 80009ec:	8812      	ldrh	r2, [r2, #0]
 80009ee:	431a      	orrs	r2, r3
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	e007      	b.n	8000a06 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	8812      	ldrh	r2, [r2, #0]
 80009fe:	43d2      	mvns	r2, r2
 8000a00:	401a      	ands	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8000a06:	7bfc      	ldrb	r4, [r7, #15]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f7ff fed5 	bl	80007bc <get_position>
 8000a12:	4603      	mov	r3, r0
 8000a14:	fa04 f203 	lsl.w	r2, r4, r3
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd90      	pop	{r4, r7, pc}

08000a2a <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	460b      	mov	r3, r1
 8000a34:	807b      	strh	r3, [r7, #2]
 8000a36:	4613      	mov	r3, r2
 8000a38:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8000a3a:	787b      	ldrb	r3, [r7, #1]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 8000a40:	887a      	ldrh	r2, [r7, #2]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 8000a46:	e002      	b.n	8000a4e <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 8000a48:	887a      	ldrh	r2, [r7, #2]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	615a      	str	r2, [r3, #20]
}
 8000a4e:	bf00      	nop
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	460b      	mov	r3, r1
 8000a62:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a30      	ldr	r2, [pc, #192]	; (8000b28 <Slave_Status+0xd0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b03      	cmp	r3, #3
 8000a78:	d851      	bhi.n	8000b1e <Slave_Status+0xc6>
 8000a7a:	a201      	add	r2, pc, #4	; (adr r2, 8000a80 <Slave_Status+0x28>)
 8000a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a80:	08000a91 	.word	0x08000a91
 8000a84:	08000ab5 	.word	0x08000ab5
 8000a88:	08000acd 	.word	0x08000acd
 8000a8c:	08000af1 	.word	0x08000af1
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d03b      	beq.n	8000b14 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8000a9c:	7bfa      	ldrb	r2, [r7, #15]
 8000a9e:	4923      	ldr	r1, [pc, #140]	; (8000b2c <Slave_Status+0xd4>)
 8000aa0:	4613      	mov	r3, r2
 8000aa2:	00db      	lsls	r3, r3, #3
 8000aa4:	1a9b      	subs	r3, r3, r2
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	3318      	adds	r3, #24
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2000      	movs	r0, #0
 8000ab0:	4798      	blx	r3
		}
		break;
 8000ab2:	e02f      	b.n	8000b14 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8000ab4:	7bfa      	ldrb	r2, [r7, #15]
 8000ab6:	491d      	ldr	r1, [pc, #116]	; (8000b2c <Slave_Status+0xd4>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	00db      	lsls	r3, r3, #3
 8000abc:	1a9b      	subs	r3, r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3318      	adds	r3, #24
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	4798      	blx	r3
		break;
 8000aca:	e028      	b.n	8000b1e <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d01f      	beq.n	8000b18 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8000ad8:	7bfa      	ldrb	r2, [r7, #15]
 8000ada:	4914      	ldr	r1, [pc, #80]	; (8000b2c <Slave_Status+0xd4>)
 8000adc:	4613      	mov	r3, r2
 8000ade:	00db      	lsls	r3, r3, #3
 8000ae0:	1a9b      	subs	r3, r3, r2
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	3318      	adds	r3, #24
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2002      	movs	r0, #2
 8000aec:	4798      	blx	r3
		}
		break;
 8000aee:	e013      	b.n	8000b18 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	f003 0304 	and.w	r3, r3, #4
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10f      	bne.n	8000b1c <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8000afc:	7bfa      	ldrb	r2, [r7, #15]
 8000afe:	490b      	ldr	r1, [pc, #44]	; (8000b2c <Slave_Status+0xd4>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	1a9b      	subs	r3, r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	3318      	adds	r3, #24
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2003      	movs	r0, #3
 8000b10:	4798      	blx	r3
		}
		break;
 8000b12:	e003      	b.n	8000b1c <Slave_Status+0xc4>
		break;
 8000b14:	bf00      	nop
 8000b16:	e002      	b.n	8000b1e <Slave_Status+0xc6>
		break;
 8000b18:	bf00      	nop
 8000b1a:	e000      	b.n	8000b1e <Slave_Status+0xc6>
		break;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40005400 	.word	0x40005400
 8000b2c:	20000058 	.word	0x20000058

08000b30 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000b3a:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8000b44:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4c:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000b4e:	4b31      	ldr	r3, [pc, #196]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b56:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d00a      	beq.n	8000b74 <I2C1_EV_IRQHandler+0x44>
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d007      	beq.n	8000b74 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b66:	4a2b      	ldr	r2, [pc, #172]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4829      	ldr	r0, [pc, #164]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b70:	f7ff ff72 	bl	8000a58 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 8000b74:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d012      	beq.n	8000baa <I2C1_EV_IRQHandler+0x7a>
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d00f      	beq.n	8000baa <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d109      	bne.n	8000baa <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 8000b96:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	481b      	ldr	r0, [pc, #108]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000ba6:	f7ff ff57 	bl	8000a58 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8000baa:	4b1a      	ldr	r3, [pc, #104]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000bac:	695b      	ldr	r3, [r3, #20]
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d00f      	beq.n	8000bda <I2C1_EV_IRQHandler+0xaa>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00c      	beq.n	8000bda <I2C1_EV_IRQHandler+0xaa>
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d009      	beq.n	8000bda <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	480f      	ldr	r0, [pc, #60]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000bd6:	f7ff ff3f 	bl	8000a58 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be2:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d00f      	beq.n	8000c0a <I2C1_EV_IRQHandler+0xda>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d00c      	beq.n	8000c0a <I2C1_EV_IRQHandler+0xda>
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d009      	beq.n	8000c0a <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000bf8:	699b      	ldr	r3, [r3, #24]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d103      	bne.n	8000c0a <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8000c02:	2103      	movs	r1, #3
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <I2C1_EV_IRQHandler+0xe4>)
 8000c06:	f7ff ff27 	bl	8000a58 <Slave_Status>
		}
	}
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40005400 	.word	0x40005400

08000c18 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <SPI1_IRQHandler+0x54>)
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	085b      	lsrs	r3, r3, #1
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	793b      	ldrb	r3, [r7, #4]
 8000c2c:	f362 0300 	bfi	r3, r2, #0, #1
 8000c30:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <SPI1_IRQHandler+0x54>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	793b      	ldrb	r3, [r7, #4]
 8000c3e:	f362 0341 	bfi	r3, r2, #1, #1
 8000c42:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <SPI1_IRQHandler+0x54>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	091b      	lsrs	r3, r3, #4
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	793b      	ldrb	r3, [r7, #4]
 8000c52:	f362 0382 	bfi	r3, r2, #2, #1
 8000c56:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SPI1_IRQHandler+0x58>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	7938      	ldrb	r0, [r7, #4]
 8000c60:	4798      	blx	r3
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	20000090 	.word	0x20000090

08000c74 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <SPI2_IRQHandler+0x54>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	085b      	lsrs	r3, r3, #1
 8000c80:	f003 0301 	and.w	r3, r3, #1
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	793b      	ldrb	r3, [r7, #4]
 8000c88:	f362 0300 	bfi	r3, r2, #0, #1
 8000c8c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <SPI2_IRQHandler+0x54>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	793b      	ldrb	r3, [r7, #4]
 8000c9a:	f362 0341 	bfi	r3, r2, #1, #1
 8000c9e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <SPI2_IRQHandler+0x54>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	091b      	lsrs	r3, r3, #4
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	793b      	ldrb	r3, [r7, #4]
 8000cae:	f362 0382 	bfi	r3, r2, #2, #1
 8000cb2:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SPI2_IRQHandler+0x58>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	7938      	ldrb	r0, [r7, #4]
 8000cbc:	4798      	blx	r3
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40003800 	.word	0x40003800
 8000ccc:	20000090 	.word	0x20000090

08000cd0 <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
 8000cdc:	4613      	mov	r3, r2
 8000cde:	707b      	strb	r3, [r7, #1]


	switch(Chan)
 8000ce0:	787b      	ldrb	r3, [r7, #1]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d81a      	bhi.n	8000d1c <MCAL_TIMx_Set_Compare_Value+0x4c>
 8000ce6:	a201      	add	r2, pc, #4	; (adr r2, 8000cec <MCAL_TIMx_Set_Compare_Value+0x1c>)
 8000ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cec:	08000cfd 	.word	0x08000cfd
 8000cf0:	08000d05 	.word	0x08000d05
 8000cf4:	08000d0d 	.word	0x08000d0d
 8000cf8:	08000d15 	.word	0x08000d15
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 8000cfc:	887a      	ldrh	r2, [r7, #2]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000d02:	e00b      	b.n	8000d1c <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 8000d04:	887a      	ldrh	r2, [r7, #2]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000d0a:	e007      	b.n	8000d1c <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 8000d0c:	887a      	ldrh	r2, [r7, #2]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000d12:	e003      	b.n	8000d1c <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 8000d14:	887a      	ldrh	r2, [r7, #2]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000d1a:	bf00      	nop
		}
	}

	TIMx->EGR |=1<<0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	f043 0201 	orr.w	r2, r3, #1
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	615a      	str	r2, [r3, #20]

}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop

08000d34 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <USART1_IRQHandler+0x10>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	4798      	blx	r3
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000098 	.word	0x20000098

08000d48 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000d4c:	4b02      	ldr	r3, [pc, #8]	; (8000d58 <USART2_IRQHandler+0x10>)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	4798      	blx	r3
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000098 	.word	0x20000098

08000d5c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000d60:	4b02      	ldr	r3, [pc, #8]	; (8000d6c <USART3_IRQHandler+0x10>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	4798      	blx	r3
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20000098 	.word	0x20000098

08000d70 <__libc_init_array>:
 8000d70:	b570      	push	{r4, r5, r6, lr}
 8000d72:	2600      	movs	r6, #0
 8000d74:	4d0c      	ldr	r5, [pc, #48]	; (8000da8 <__libc_init_array+0x38>)
 8000d76:	4c0d      	ldr	r4, [pc, #52]	; (8000dac <__libc_init_array+0x3c>)
 8000d78:	1b64      	subs	r4, r4, r5
 8000d7a:	10a4      	asrs	r4, r4, #2
 8000d7c:	42a6      	cmp	r6, r4
 8000d7e:	d109      	bne.n	8000d94 <__libc_init_array+0x24>
 8000d80:	f000 f81a 	bl	8000db8 <_init>
 8000d84:	2600      	movs	r6, #0
 8000d86:	4d0a      	ldr	r5, [pc, #40]	; (8000db0 <__libc_init_array+0x40>)
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <__libc_init_array+0x44>)
 8000d8a:	1b64      	subs	r4, r4, r5
 8000d8c:	10a4      	asrs	r4, r4, #2
 8000d8e:	42a6      	cmp	r6, r4
 8000d90:	d105      	bne.n	8000d9e <__libc_init_array+0x2e>
 8000d92:	bd70      	pop	{r4, r5, r6, pc}
 8000d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d98:	4798      	blx	r3
 8000d9a:	3601      	adds	r6, #1
 8000d9c:	e7ee      	b.n	8000d7c <__libc_init_array+0xc>
 8000d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000da2:	4798      	blx	r3
 8000da4:	3601      	adds	r6, #1
 8000da6:	e7f2      	b.n	8000d8e <__libc_init_array+0x1e>
 8000da8:	08000dd0 	.word	0x08000dd0
 8000dac:	08000dd0 	.word	0x08000dd0
 8000db0:	08000dd0 	.word	0x08000dd0
 8000db4:	08000dd4 	.word	0x08000dd4

08000db8 <_init>:
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dba:	bf00      	nop
 8000dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dbe:	bc08      	pop	{r3}
 8000dc0:	469e      	mov	lr, r3
 8000dc2:	4770      	bx	lr

08000dc4 <_fini>:
 8000dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dc6:	bf00      	nop
 8000dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dca:	bc08      	pop	{r3}
 8000dcc:	469e      	mov	lr, r3
 8000dce:	4770      	bx	lr
