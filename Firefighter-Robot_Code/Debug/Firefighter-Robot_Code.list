
Firefighter-Robot_Code.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000225c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800238c  0800238c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800238c  0800238c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800238c  0800238c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800238c  0800238c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002390  08002390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000004  08002398  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002398  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003983  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001156  00000000  00000000  000239b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001ac4  00000000  00000000  00024b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  000265d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000360  00000000  00000000  000269e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003ec9  00000000  00000000  00026d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005973  00000000  00000000  0002ac11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dd9a  00000000  00000000  00030584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003e31e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fe8  00000000  00000000  0003e370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	08002374 	.word	0x08002374

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	08002374 	.word	0x08002374

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	bf28      	it	cs
 8000a68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a6c:	d2ed      	bcs.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__gesf2>:
 8000bc8:	f04f 3cff 	mov.w	ip, #4294967295
 8000bcc:	e006      	b.n	8000bdc <__cmpsf2+0x4>
 8000bce:	bf00      	nop

08000bd0 <__lesf2>:
 8000bd0:	f04f 0c01 	mov.w	ip, #1
 8000bd4:	e002      	b.n	8000bdc <__cmpsf2+0x4>
 8000bd6:	bf00      	nop

08000bd8 <__cmpsf2>:
 8000bd8:	f04f 0c01 	mov.w	ip, #1
 8000bdc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000be0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d011      	beq.n	8000c18 <__cmpsf2+0x40>
 8000bf4:	b001      	add	sp, #4
 8000bf6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bfa:	bf18      	it	ne
 8000bfc:	ea90 0f01 	teqne	r0, r1
 8000c00:	bf58      	it	pl
 8000c02:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c06:	bf88      	it	hi
 8000c08:	17c8      	asrhi	r0, r1, #31
 8000c0a:	bf38      	it	cc
 8000c0c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c10:	bf18      	it	ne
 8000c12:	f040 0001 	orrne.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c1c:	d102      	bne.n	8000c24 <__cmpsf2+0x4c>
 8000c1e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c22:	d105      	bne.n	8000c30 <__cmpsf2+0x58>
 8000c24:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c28:	d1e4      	bne.n	8000bf4 <__cmpsf2+0x1c>
 8000c2a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2e:	d0e1      	beq.n	8000bf4 <__cmpsf2+0x1c>
 8000c30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_cfrcmple>:
 8000c38:	4684      	mov	ip, r0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	4661      	mov	r1, ip
 8000c3e:	e7ff      	b.n	8000c40 <__aeabi_cfcmpeq>

08000c40 <__aeabi_cfcmpeq>:
 8000c40:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c42:	f7ff ffc9 	bl	8000bd8 <__cmpsf2>
 8000c46:	2800      	cmp	r0, #0
 8000c48:	bf48      	it	mi
 8000c4a:	f110 0f00 	cmnmi.w	r0, #0
 8000c4e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c50 <__aeabi_fcmpeq>:
 8000c50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c54:	f7ff fff4 	bl	8000c40 <__aeabi_cfcmpeq>
 8000c58:	bf0c      	ite	eq
 8000c5a:	2001      	moveq	r0, #1
 8000c5c:	2000      	movne	r0, #0
 8000c5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c62:	bf00      	nop

08000c64 <__aeabi_fcmplt>:
 8000c64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c68:	f7ff ffea 	bl	8000c40 <__aeabi_cfcmpeq>
 8000c6c:	bf34      	ite	cc
 8000c6e:	2001      	movcc	r0, #1
 8000c70:	2000      	movcs	r0, #0
 8000c72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c76:	bf00      	nop

08000c78 <__aeabi_fcmple>:
 8000c78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c7c:	f7ff ffe0 	bl	8000c40 <__aeabi_cfcmpeq>
 8000c80:	bf94      	ite	ls
 8000c82:	2001      	movls	r0, #1
 8000c84:	2000      	movhi	r0, #0
 8000c86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c8a:	bf00      	nop

08000c8c <__aeabi_fcmpge>:
 8000c8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c90:	f7ff ffd2 	bl	8000c38 <__aeabi_cfrcmple>
 8000c94:	bf94      	ite	ls
 8000c96:	2001      	movls	r0, #1
 8000c98:	2000      	movhi	r0, #0
 8000c9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fcmpgt>:
 8000ca0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca4:	f7ff ffc8 	bl	8000c38 <__aeabi_cfrcmple>
 8000ca8:	bf34      	ite	cc
 8000caa:	2001      	movcc	r0, #1
 8000cac:	2000      	movcs	r0, #0
 8000cae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb2:	bf00      	nop

08000cb4 <Set_GPIO_pins>:
//Motor3_Front     Back_Left_Motor                GPIO_PIN_3   PORTB
//Motor3_Back      Back_Left_Motor                GPIO_PIN_4   PORTB
//Motor4_Front     Back_Right_Motor               GPIO_PIN_7   PORTB
//Motor4_Back      Back_Right_Motor               GPIO_PIN_8   PORTB
void Set_GPIO_pins(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	70da      	strb	r2, [r3, #3]



#ifdef HALF_Controle_2_Channel
	// Left_Motors				Front
	GPIO_Pin.pinNumber = Left_Motors_Front;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cca:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000ccc:	490d      	ldr	r1, [pc, #52]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cce:	480e      	ldr	r0, [pc, #56]	; (8000d08 <Set_GPIO_pins+0x54>)
 8000cd0:	f000 ff1a 	bl	8001b08 <MCAL_GPIO_Init>

	// Left_Motors  			 Back
	GPIO_Pin.pinNumber = Left_Motors_Back;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cda:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000cdc:	4909      	ldr	r1, [pc, #36]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <Set_GPIO_pins+0x54>)
 8000ce0:	f000 ff12 	bl	8001b08 <MCAL_GPIO_Init>

	// Right_Motors				Front
	GPIO_Pin.pinNumber = Right_Motors_Front;
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000ce6:	2280      	movs	r2, #128	; 0x80
 8000ce8:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000cea:	4906      	ldr	r1, [pc, #24]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <Set_GPIO_pins+0x54>)
 8000cee:	f000 ff0b 	bl	8001b08 <MCAL_GPIO_Init>

	// Right_Motors				Back
	GPIO_Pin.pinNumber = Right_Motors_Back;
 8000cf2:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cf4:	2240      	movs	r2, #64	; 0x40
 8000cf6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000cf8:	4902      	ldr	r1, [pc, #8]	; (8000d04 <Set_GPIO_pins+0x50>)
 8000cfa:	4803      	ldr	r0, [pc, #12]	; (8000d08 <Set_GPIO_pins+0x54>)
 8000cfc:	f000 ff04 	bl	8001b08 <MCAL_GPIO_Init>
	GPIO_Pin.pinNumber = Motor4_Back;
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);

#endif

}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000030 	.word	0x20000030
 8000d08:	40010c00 	.word	0x40010c00

08000d0c <HAL_DC_Motors_init>:



void HAL_DC_Motors_init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
	Timer2.MODE = TIMx_MODE_PWM1;
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <HAL_DC_Motors_init+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	801a      	strh	r2, [r3, #0]
	Timer2.COUNT_MODE = TIMx_COUNT_MODE_UP;
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_DC_Motors_init+0x38>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	805a      	strh	r2, [r3, #2]
	Timer2.Prescalers =7;      // 1M
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <HAL_DC_Motors_init+0x38>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	809a      	strh	r2, [r3, #4]

#endif

#ifdef HALF_Controle_2_Channel
	// set Channel 1 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Left_Motors);
 8000d22:	2200      	movs	r2, #0
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <HAL_DC_Motors_init+0x38>)
 8000d26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d2a:	f001 f8e7 	bl	8001efc <MCAL_TIMx_Init>

	// set Channel 2 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Right_Motors);
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4904      	ldr	r1, [pc, #16]	; (8000d44 <HAL_DC_Motors_init+0x38>)
 8000d32:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d36:	f001 f8e1 	bl	8001efc <MCAL_TIMx_Init>
#endif

	Set_GPIO_pins();
 8000d3a:	f7ff ffbb 	bl	8000cb4 <Set_GPIO_pins>
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000020 	.word	0x20000020

08000d48 <Car_GetBack>:


void Car_GetBack( uint32_t del)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <Car_GetBack+0x60>)
 8000d56:	f000 ff6d 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2140      	movs	r1, #64	; 0x40
 8000d5e:	4812      	ldr	r0, [pc, #72]	; (8000da8 <Car_GetBack+0x60>)
 8000d60:	f000 ff68 	bl	8001c34 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6a:	480f      	ldr	r0, [pc, #60]	; (8000da8 <Car_GetBack+0x60>)
 8000d6c:	f000 ff62 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d76:	480c      	ldr	r0, [pc, #48]	; (8000da8 <Car_GetBack+0x60>)
 8000d78:	f000 ff5c 	bl	8001c34 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(30),Right_Motors);
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	f243 61b0 	movw	r1, #14000	; 0x36b0
 8000d82:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d86:	f001 fa81 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(30),Left_Motors);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f243 61b0 	movw	r1, #14000	; 0x36b0
 8000d90:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d94:	f001 fa7a 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 fcc2 	bl	8001724 <delay_ms>


}
 8000da0:	bf00      	nop
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010c00 	.word	0x40010c00

08000dac <Car_Rotation_Object>:


void Car_Rotation_Object(uint8_t direction , uint32_t del)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
	if(direction == HAL_Car_TurnRight)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d128      	bne.n	8000e10 <Car_Rotation_Object+0x64>
	{
		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	482c      	ldr	r0, [pc, #176]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000dc4:	f000 ff36 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2140      	movs	r1, #64	; 0x40
 8000dcc:	4829      	ldr	r0, [pc, #164]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000dce:	f000 ff31 	bl	8001c34 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd8:	4826      	ldr	r0, [pc, #152]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000dda:	f000 ff2b 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000de6:	f000 ff25 	bl	8001c34 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Right_Motors);
 8000dea:	2203      	movs	r2, #3
 8000dec:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000df0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000df4:	f001 fa4a 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Left_Motors);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000dfe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e02:	f001 fa43 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fc8b 	bl	8001724 <delay_ms>
 8000e0e:	e02a      	b.n	8000e66 <Car_Rotation_Object+0xba>

	}
	else if(direction == HAL_Car_TurnLeft)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d127      	bne.n	8000e66 <Car_Rotation_Object+0xba>
	{

		// motor Front_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000e1e:	f000 ff09 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	4812      	ldr	r0, [pc, #72]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000e2a:	f000 ff03 	bl	8001c34 <MCAL_GPIO_WritePin>
		// motor Back_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2140      	movs	r1, #64	; 0x40
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000e34:	f000 fefe 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2180      	movs	r1, #128	; 0x80
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <Car_Rotation_Object+0xc8>)
 8000e3e:	f000 fef9 	bl	8001c34 <MCAL_GPIO_WritePin>

		// by iteration set the duty cycle  according to specific angle to the Front_Left_Motor
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Left_Motors);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000e48:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e4c:	f001 fa1e 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Right_Motors);
 8000e50:	2203      	movs	r2, #3
 8000e52:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000e56:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e5a:	f001 fa17 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f000 fc5f 	bl	8001724 <delay_ms>

	}
	Car_Stop_Moving();
 8000e66:	f000 f8bb 	bl	8000fe0 <Car_Stop_Moving>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <Car_Routation>:

void Car_Routation(uint8_t direction)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]

	}
#endif

#ifdef HALF_Controle_2_Channel
	if(direction == HAL_Car_TurnRight)
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d124      	bne.n	8000ed2 <Car_Routation+0x5a>
	{
		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2180      	movs	r1, #128	; 0x80
 8000e8c:	4829      	ldr	r0, [pc, #164]	; (8000f34 <Car_Routation+0xbc>)
 8000e8e:	f000 fed1 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	2140      	movs	r1, #64	; 0x40
 8000e96:	4827      	ldr	r0, [pc, #156]	; (8000f34 <Car_Routation+0xbc>)
 8000e98:	f000 fecc 	bl	8001c34 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ea2:	4824      	ldr	r0, [pc, #144]	; (8000f34 <Car_Routation+0xbc>)
 8000ea4:	f000 fec6 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eae:	4821      	ldr	r0, [pc, #132]	; (8000f34 <Car_Routation+0xbc>)
 8000eb0:	f000 fec0 	bl	8001c34 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Right_Motors);
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	f242 7110 	movw	r1, #10000	; 0x2710
 8000eba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ebe:	f001 f9e5 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Left_Motors);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f242 7110 	movw	r1, #10000	; 0x2710
 8000ec8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ecc:	f001 f9de 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
 8000ed0:	e026      	b.n	8000f20 <Car_Routation+0xa8>

	}
	else if(direction == HAL_Car_TurnLeft)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d123      	bne.n	8000f20 <Car_Routation+0xa8>
	{

		// motor Front_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ede:	4815      	ldr	r0, [pc, #84]	; (8000f34 <Car_Routation+0xbc>)
 8000ee0:	f000 fea8 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	4812      	ldr	r0, [pc, #72]	; (8000f34 <Car_Routation+0xbc>)
 8000eec:	f000 fea2 	bl	8001c34 <MCAL_GPIO_WritePin>
		// motor Back_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2140      	movs	r1, #64	; 0x40
 8000ef4:	480f      	ldr	r0, [pc, #60]	; (8000f34 <Car_Routation+0xbc>)
 8000ef6:	f000 fe9d 	bl	8001c34 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <Car_Routation+0xbc>)
 8000f00:	f000 fe98 	bl	8001c34 <MCAL_GPIO_WritePin>

		// by iteration set the duty cycle  according to specific angle to the Front_Left_Motor
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Left_Motors);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f0e:	f001 f9bd 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(50),Right_Motors);
 8000f12:	2203      	movs	r2, #3
 8000f14:	f242 7110 	movw	r1, #10000	; 0x2710
 8000f18:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f1c:	f001 f9b6 	bl	800228c <MCAL_TIMx_Set_Compare_Value>

	}
#endif

	// by iteration set delay to specific rotation
	delay_ms(540);
 8000f20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000f24:	f000 fbfe 	bl	8001724 <delay_ms>


	// stop the movement
	Car_Stop_Moving();
 8000f28:	f000 f85a 	bl	8000fe0 <Car_Stop_Moving>
}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40010c00 	.word	0x40010c00

08000f38 <Car_Move>:



void Car_Move(uint8_t speed , uint32_t distance)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
#endif


#ifdef HALF_Controle_2_Channel

	MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4824      	ldr	r0, [pc, #144]	; (8000fdc <Car_Move+0xa4>)
 8000f4c:	f000 fe72 	bl	8001c34 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <Car_Move+0xa4>)
 8000f58:	f000 fe6c 	bl	8001c34 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <Car_Move+0xa4>)
 8000f62:	f000 fe67 	bl	8001c34 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2140      	movs	r1, #64	; 0x40
 8000f6a:	481c      	ldr	r0, [pc, #112]	; (8000fdc <Car_Move+0xa4>)
 8000f6c:	f000 fe62 	bl	8001c34 <MCAL_GPIO_WritePin>

	//uint8_t b = speed - ;

	// by iteration set duty cycle to specific speed
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Left_Motors);	// prefered left - > 40 duty , right -> 70 duty cycle
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	461a      	mov	r2, r3
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	4413      	add	r3, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	0091      	lsls	r1, r2, #2
 8000f7e:	461a      	mov	r2, r3
 8000f80:	460b      	mov	r3, r1
 8000f82:	4413      	add	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	4619      	mov	r1, r3
 8000f94:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f98:	f001 f978 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Right_Motors);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	0091      	lsls	r1, r2, #2
 8000faa:	461a      	mov	r2, r3
 8000fac:	460b      	mov	r3, r1
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	b29b      	uxth	r3, r3
 8000fb4:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000fb8:	3320      	adds	r3, #32
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fc4:	f001 f962 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
	//delay_ms(distance);

#endif
	// by iteration set delay to specific distance
	delay_ms(distance);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fbaa 	bl	8001724 <delay_ms>

	// stop the movement
	Car_Stop_Moving();
 8000fd0:	f000 f806 	bl	8000fe0 <Car_Stop_Moving>


}
 8000fd4:	bf00      	nop
 8000fd6:	3708      	adds	r7, #8
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40010c00 	.word	0x40010c00

08000fe0 <Car_Stop_Moving>:

	Car_Move(speed,0); // 0 is the distance we will set it in the delay function
}

void Car_Stop_Moving(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Front_Right_Motor);
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Back_Left_Motor);
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Back_Right_Motor);
#endif
#ifdef HALF_Controle_2_Channel
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Left_Motors);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000fea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fee:	f001 f94d 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Right_Motors);
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000ff8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ffc:	f001 f946 	bl	800228c <MCAL_TIMx_Set_Compare_Value>
#endif
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <HAL_Flame_init>:

ADC_config_t ADC_Pin;


void HAL_Flame_init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800100a:	2302      	movs	r3, #2
 800100c:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_14 ;
 800100e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001012:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	4619      	mov	r1, r3
 8001018:	481f      	ldr	r0, [pc, #124]	; (8001098 <HAL_Flame_init+0x94>)
 800101a:	f000 fd75 	bl	8001b08 <MCAL_GPIO_Init>

//	pinconfig.GPIO_MODE = GPIO_MODE_Analog  ;
//	pinconfig.pinNumber = GPIO_PIN_1 ;
//	MCAL_GPIO_Init(GPIOB, &pinconfig) ;

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800101e:	2302      	movs	r3, #2
 8001020:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_1 ;
 8001022:	2302      	movs	r3, #2
 8001024:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	4619      	mov	r1, r3
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <HAL_Flame_init+0x94>)
 800102c:	f000 fd6c 	bl	8001b08 <MCAL_GPIO_Init>


	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001030:	2302      	movs	r3, #2
 8001032:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_4 ;
 8001034:	2310      	movs	r3, #16
 8001036:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	4619      	mov	r1, r3
 800103c:	4817      	ldr	r0, [pc, #92]	; (800109c <HAL_Flame_init+0x98>)
 800103e:	f000 fd63 	bl	8001b08 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001042:	2302      	movs	r3, #2
 8001044:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_5 ;
 8001046:	2320      	movs	r3, #32
 8001048:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800104a:	1d3b      	adds	r3, r7, #4
 800104c:	4619      	mov	r1, r3
 800104e:	4813      	ldr	r0, [pc, #76]	; (800109c <HAL_Flame_init+0x98>)
 8001050:	f000 fd5a 	bl	8001b08 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001054:	2302      	movs	r3, #2
 8001056:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_7 ;
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	480e      	ldr	r0, [pc, #56]	; (800109c <HAL_Flame_init+0x98>)
 8001062:	f000 fd51 	bl	8001b08 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001066:	2302      	movs	r3, #2
 8001068:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_15 ;
 800106a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800106e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <HAL_Flame_init+0x94>)
 8001076:	f000 fd47 	bl	8001b08 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800107a:	2302      	movs	r3, #2
 800107c:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_13 ;
 800107e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001082:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <HAL_Flame_init+0x94>)
 800108a:	f000 fd3d 	bl	8001b08 <MCAL_GPIO_Init>
//	ADC_Pin.MODE=ADC_MODE_Single;
//	ADC_Pin.Data_alignment=ADC_Data_alignment_Right;
//	ADC_Pin.sampling_time=ADC_sampling_time_1_5;
//	ADC_Pin.Channel=Ch8;
//	MCAL_ADC_Init(&ADC_Pin);
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40010c00 	.word	0x40010c00
 800109c:	40010800 	.word	0x40010800

080010a0 <Flame_Frontmid_Read>:
int Flame_Frontmid_Read()
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80010a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <Flame_Frontmid_Read+0x14>)
 80010aa:	f000 fdac 	bl	8001c06 <MCAL_GPIO_ReadPin>
 80010ae:	4603      	mov	r3, r0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40010c00 	.word	0x40010c00

080010b8 <Flame_FrontLeft_Read>:
int Flame_FrontLeft_Read()
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80010bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <Flame_FrontLeft_Read+0x14>)
 80010c2:	f000 fda0 	bl	8001c06 <MCAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <Flame_FrontRight_Read>:
{
	//return MCAL_ADC_Read(Ch9);
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
}
int Flame_FrontRight_Read()
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80010d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <Flame_FrontRight_Read+0x14>)
 80010da:	f000 fd94 	bl	8001c06 <MCAL_GPIO_ReadPin>
 80010de:	4603      	mov	r3, r0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40010c00 	.word	0x40010c00

080010e8 <Flame_Back_Read>:
int Flame_Back_Read()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80010ec:	2120      	movs	r1, #32
 80010ee:	4803      	ldr	r0, [pc, #12]	; (80010fc <Flame_Back_Read+0x14>)
 80010f0:	f000 fd89 	bl	8001c06 <MCAL_GPIO_ReadPin>
 80010f4:	4603      	mov	r3, r0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010800 	.word	0x40010800

08001100 <Flame_Right_Read>:
int Flame_Right_Read()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);///
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <Flame_Right_Read+0x14>)
 8001108:	f000 fd7d 	bl	8001c06 <MCAL_GPIO_ReadPin>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40010800 	.word	0x40010800

08001118 <Flame_Left_Read>:
int Flame_Left_Read()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 800111c:	2110      	movs	r1, #16
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <Flame_Left_Read+0x14>)
 8001120:	f000 fd71 	bl	8001c06 <MCAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40010800 	.word	0x40010800

08001130 <HAL_Ultrasonic_init>:

static GPIO_Pinconfig_t GPIO_Pin;


void HAL_Ultrasonic_init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	MCAL_TIM4_CAP_Init();
 8001134:	f001 f842 	bl	80021bc <MCAL_TIM4_CAP_Init>
	// set trigger as an output
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_Ultrasonic_init+0x28>)
 800113a:	2204      	movs	r2, #4
 800113c:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_Ultrasonic_init+0x28>)
 8001140:	2201      	movs	r2, #1
 8001142:	70da      	strb	r2, [r3, #3]
	GPIO_Pin.pinNumber = Trigger_Pin;
 8001144:	4b04      	ldr	r3, [pc, #16]	; (8001158 <HAL_Ultrasonic_init+0x28>)
 8001146:	2220      	movs	r2, #32
 8001148:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 800114a:	4903      	ldr	r1, [pc, #12]	; (8001158 <HAL_Ultrasonic_init+0x28>)
 800114c:	4803      	ldr	r0, [pc, #12]	; (800115c <HAL_Ultrasonic_init+0x2c>)
 800114e:	f000 fcdb 	bl	8001b08 <MCAL_GPIO_Init>

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000034 	.word	0x20000034
 800115c:	40010c00 	.word	0x40010c00

08001160 <Ultrasnic_Read>:

float Ultrasnic_Read(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	float Distance = 0 ;
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	607b      	str	r3, [r7, #4]

	//trigger pulse for 10ms to start the ultrasonic
	MCAL_GPIO_WritePin(PORT, Trigger_Pin, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	2120      	movs	r1, #32
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <Ultrasnic_Read+0x60>)
 8001172:	f000 fd5f 	bl	8001c34 <MCAL_GPIO_WritePin>
	delay_ms(10);
 8001176:	200a      	movs	r0, #10
 8001178:	f000 fad4 	bl	8001724 <delay_ms>
	MCAL_GPIO_WritePin(PORT, Trigger_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	480f      	ldr	r0, [pc, #60]	; (80011c0 <Ultrasnic_Read+0x60>)
 8001182:	f000 fd57 	bl	8001c34 <MCAL_GPIO_WritePin>

	// The speed of sound in free space is 340 m/s = 34000 cm/s
	// the speed = Distance / time
	// the Distance = speed * time = 34000 * time (the time of pulse on ECHO pin)
	Distance = (MCAL_TIM4_CAP_Get_High()/58.3);
 8001186:	f001 f841 	bl	800220c <MCAL_TIM4_CAP_Get_High>
 800118a:	4603      	mov	r3, r0
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f953 	bl	8000438 <__aeabi_f2d>
 8001192:	a309      	add	r3, pc, #36	; (adr r3, 80011b8 <Ultrasnic_Read+0x58>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fad0 	bl	800073c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fbb2 	bl	800090c <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	607b      	str	r3, [r7, #4]
	return Distance;
 80011ac:	687b      	ldr	r3, [r7, #4]

}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	66666666 	.word	0x66666666
 80011bc:	404d2666 	.word	0x404d2666
 80011c0:	40010c00 	.word	0x40010c00

080011c4 <Clock_INIT>:




void Clock_INIT(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0



	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 80011c8:	4b28      	ldr	r3, [pc, #160]	; (800126c <Clock_INIT+0xa8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a27      	ldr	r2, [pc, #156]	; (800126c <Clock_INIT+0xa8>)
 80011ce:	f043 0304 	orr.w	r3, r3, #4
 80011d2:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <Clock_INIT+0xa8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a24      	ldr	r2, [pc, #144]	; (800126c <Clock_INIT+0xa8>)
 80011da:	f043 0308 	orr.w	r3, r3, #8
 80011de:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_GPIOC_CLK_EN();
 80011e0:	4b22      	ldr	r3, [pc, #136]	; (800126c <Clock_INIT+0xa8>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a21      	ldr	r2, [pc, #132]	; (800126c <Clock_INIT+0xa8>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <Clock_INIT+0xa8>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <Clock_INIT+0xa8>)
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <Clock_INIT+0xa8>)
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	4a1b      	ldr	r2, [pc, #108]	; (800126c <Clock_INIT+0xa8>)
 80011fe:	f043 0301 	orr.w	r3, r3, #1
 8001202:	61d3      	str	r3, [r2, #28]
	RCC_TIM3_CLK_Enable();
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <Clock_INIT+0xa8>)
 8001206:	69db      	ldr	r3, [r3, #28]
 8001208:	4a18      	ldr	r2, [pc, #96]	; (800126c <Clock_INIT+0xa8>)
 800120a:	f043 0302 	orr.w	r3, r3, #2
 800120e:	61d3      	str	r3, [r2, #28]
	RCC_TIM4_CLK_Enable();
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <Clock_INIT+0xa8>)
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	4a15      	ldr	r2, [pc, #84]	; (800126c <Clock_INIT+0xa8>)
 8001216:	f043 0304 	orr.w	r3, r3, #4
 800121a:	61d3      	str	r3, [r2, #28]
	RCC_ADC1_CLK_Enable();
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <Clock_INIT+0xa8>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <Clock_INIT+0xa8>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6193      	str	r3, [r2, #24]
	RCC_TIM1_CLK_Enable();
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <Clock_INIT+0xa8>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <Clock_INIT+0xa8>)
 800122e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001232:	6193      	str	r3, [r2, #24]


	  RCC_CFGR |=0b10<<0;  // sw select PLL
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <Clock_INIT+0xac>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <Clock_INIT+0xac>)
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	6013      	str	r3, [r2, #0]
	  RCC_CFGR |=0b0110<<18;  //PLL multiplication factor(8)
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <Clock_INIT+0xac>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <Clock_INIT+0xac>)
 8001246:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 800124a:	6013      	str	r3, [r2, #0]
	  RCC_CFGR |=0b1001<<4;  //AHB prescaler (AHB at 8 MH)
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <Clock_INIT+0xac>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a07      	ldr	r2, [pc, #28]	; (8001270 <Clock_INIT+0xac>)
 8001252:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001256:	6013      	str	r3, [r2, #0]
	  RCC_CR |=0b1<<24;  // PLL enable
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <Clock_INIT+0xa8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <Clock_INIT+0xa8>)
 800125e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001262:	6013      	str	r3, [r2, #0]

}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40021004 	.word	0x40021004

08001274 <pumb>:


void pumb(uint8_t x)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, x);
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	461a      	mov	r2, r3
 8001282:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <pumb+0x20>)
 8001288:	f000 fcd4 	bl	8001c34 <MCAL_GPIO_WritePin>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010c00 	.word	0x40010c00

08001298 <Flame_MaxReading>:



Redirection Flame_MaxReading()
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0

	if (Flame_Frontmid_Read())
 800129c:	f7ff ff00 	bl	80010a0 <Flame_Frontmid_Read>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <Flame_MaxReading+0x12>
	{
		return Front_mid_en;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e023      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}
	else if (Flame_Back_Read())
 80012aa:	f7ff ff1d 	bl	80010e8 <Flame_Back_Read>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <Flame_MaxReading+0x20>
	{
		return Back_en;
 80012b4:	2304      	movs	r3, #4
 80012b6:	e01c      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}
	else if (Flame_Right_Read())
 80012b8:	f7ff ff22 	bl	8001100 <Flame_Right_Read>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <Flame_MaxReading+0x2e>
	{
		return Right_en;
 80012c2:	2302      	movs	r3, #2
 80012c4:	e015      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}
	else if(Flame_Left_Read())
 80012c6:	f7ff ff27 	bl	8001118 <Flame_Left_Read>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <Flame_MaxReading+0x3c>
	{
		return Left_en;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e00e      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}
	else if(Flame_FrontRight_Read())
 80012d4:	f7ff fefc 	bl	80010d0 <Flame_FrontRight_Read>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <Flame_MaxReading+0x4a>
	{
		return Front_Right_en;
 80012de:	2305      	movs	r3, #5
 80012e0:	e007      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}
	else if(Flame_FrontLeft_Read())
 80012e2:	f7ff fee9 	bl	80010b8 <Flame_FrontLeft_Read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <Flame_MaxReading+0x58>
	{
		return Front_Left_en;
 80012ec:	2306      	movs	r3, #6
 80012ee:	e000      	b.n	80012f2 <Flame_MaxReading+0x5a>
	}



	return NONE;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <CarAdjustament>:

void CarAdjustament (Redirection MaxReading)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	int m = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
	switch (MaxReading)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b06      	cmp	r3, #6
 800130a:	d83b      	bhi.n	8001384 <CarAdjustament+0x8c>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <CarAdjustament+0x1c>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001383 	.word	0x08001383
 8001318:	08001385 	.word	0x08001385
 800131c:	0800136f 	.word	0x0800136f
 8001320:	08001347 	.word	0x08001347
 8001324:	0800136f 	.word	0x0800136f
 8001328:	0800136f 	.word	0x0800136f
 800132c:	08001347 	.word	0x08001347
	case Left_en :
	case Front_Left_en:
		//turn left
		while(Flame_MaxReading() != Front_mid_en)
		{
			m++;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3301      	adds	r3, #1
 8001334:	60fb      	str	r3, [r7, #12]
			Car_Rotation_Object(Car_TurnLeft , 20);
 8001336:	2114      	movs	r1, #20
 8001338:	2001      	movs	r0, #1
 800133a:	f7ff fd37 	bl	8000dac <Car_Rotation_Object>
			if(m == 300)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001344:	d005      	beq.n	8001352 <CarAdjustament+0x5a>
		while(Flame_MaxReading() != Front_mid_en)
 8001346:	f7ff ffa7 	bl	8001298 <Flame_MaxReading>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	d1ef      	bne.n	8001330 <CarAdjustament+0x38>
 8001350:	e000      	b.n	8001354 <CarAdjustament+0x5c>
			{

				break;
 8001352:	bf00      	nop
			}
		}
		Car_Stop_Moving();
 8001354:	f7ff fe44 	bl	8000fe0 <Car_Stop_Moving>
		break;
 8001358:	e014      	b.n	8001384 <CarAdjustament+0x8c>
	case Front_Right_en:

		//turn right
		while(Flame_MaxReading() != Front_mid_en)
		{
			m++;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3301      	adds	r3, #1
 800135e:	60fb      	str	r3, [r7, #12]
			Car_Rotation_Object(Car_TurnRight , 20);
 8001360:	2114      	movs	r1, #20
 8001362:	2000      	movs	r0, #0
 8001364:	f7ff fd22 	bl	8000dac <Car_Rotation_Object>
			if(m == 200)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2bc8      	cmp	r3, #200	; 0xc8
 800136c:	d005      	beq.n	800137a <CarAdjustament+0x82>
		while(Flame_MaxReading() != Front_mid_en)
 800136e:	f7ff ff93 	bl	8001298 <Flame_MaxReading>
 8001372:	4603      	mov	r3, r0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d1f0      	bne.n	800135a <CarAdjustament+0x62>
 8001378:	e000      	b.n	800137c <CarAdjustament+0x84>
			{

				break;
 800137a:	bf00      	nop
			}
		}
		Car_Stop_Moving();
 800137c:	f7ff fe30 	bl	8000fe0 <Car_Stop_Moving>
		break;
 8001380:	e000      	b.n	8001384 <CarAdjustament+0x8c>
		break;
 8001382:	bf00      	nop
	}
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <CarMovements>:
//	n++;
//
//}

char CarMovements()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0



	int i = 0 ;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]

//	if(n > 50)
//	{
//		n = 1;
//	}
	for(i = 0 ; i < n; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	e034      	b.n	8001406 <CarMovements+0x7a>
	{
		//turn_right -> n * count
		Car_Move( Car_Speed_60, DISTANCE);
 800139c:	2132      	movs	r1, #50	; 0x32
 800139e:	203c      	movs	r0, #60	; 0x3c
 80013a0:	f7ff fdca 	bl	8000f38 <Car_Move>
		Car_Stop_Moving();
 80013a4:	f7ff fe1c 	bl	8000fe0 <Car_Stop_Moving>
		if(((Ultrasnic_Read() <= ULTRA_Threshold) || (Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read()) ))
 80013a8:	f7ff feda 	bl	8001160 <Ultrasnic_Read>
 80013ac:	4603      	mov	r3, r0
 80013ae:	493f      	ldr	r1, [pc, #252]	; (80014ac <CarMovements+0x120>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fc61 	bl	8000c78 <__aeabi_fcmple>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d118      	bne.n	80013ee <CarMovements+0x62>
 80013bc:	f7ff fe70 	bl	80010a0 <Flame_Frontmid_Read>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d113      	bne.n	80013ee <CarMovements+0x62>
 80013c6:	f7ff fe8f 	bl	80010e8 <Flame_Back_Read>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d10e      	bne.n	80013ee <CarMovements+0x62>
 80013d0:	f7ff fe96 	bl	8001100 <Flame_Right_Read>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <CarMovements+0x62>
 80013da:	f7ff fe9d 	bl	8001118 <Flame_Left_Read>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d104      	bne.n	80013ee <CarMovements+0x62>
 80013e4:	f7ff fe74 	bl	80010d0 <Flame_FrontRight_Read>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d008      	beq.n	8001400 <CarMovements+0x74>
		{
			Car_Stop_Moving();
 80013ee:	f7ff fdf7 	bl	8000fe0 <Car_Stop_Moving>
			n--;
 80013f2:	4b2f      	ldr	r3, [pc, #188]	; (80014b0 <CarMovements+0x124>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <CarMovements+0x124>)
 80013fa:	6013      	str	r3, [r2, #0]
			return 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e050      	b.n	80014a2 <CarMovements+0x116>
	for(i = 0 ; i < n; i++)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3301      	adds	r3, #1
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b2a      	ldr	r3, [pc, #168]	; (80014b0 <CarMovements+0x124>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbc5      	blt.n	800139c <CarMovements+0x10>
		}

	}
	Car_Routation( Car_TurnRight); // angle 90 -> duty 30 . and delay 800
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fd31 	bl	8000e78 <Car_Routation>
	for(i = 0 ; i < n; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	e034      	b.n	8001486 <CarMovements+0xfa>
	{
		//turn_right -> n * count
		Car_Move( Car_Speed_60, DISTANCE);
 800141c:	2132      	movs	r1, #50	; 0x32
 800141e:	203c      	movs	r0, #60	; 0x3c
 8001420:	f7ff fd8a 	bl	8000f38 <Car_Move>
		Car_Stop_Moving();
 8001424:	f7ff fddc 	bl	8000fe0 <Car_Stop_Moving>
		if(((Ultrasnic_Read() <= ULTRA_Threshold) || (Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read()) ))
 8001428:	f7ff fe9a 	bl	8001160 <Ultrasnic_Read>
 800142c:	4603      	mov	r3, r0
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <CarMovements+0x120>)
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff fc21 	bl	8000c78 <__aeabi_fcmple>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d118      	bne.n	800146e <CarMovements+0xe2>
 800143c:	f7ff fe30 	bl	80010a0 <Flame_Frontmid_Read>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d113      	bne.n	800146e <CarMovements+0xe2>
 8001446:	f7ff fe4f 	bl	80010e8 <Flame_Back_Read>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d10e      	bne.n	800146e <CarMovements+0xe2>
 8001450:	f7ff fe56 	bl	8001100 <Flame_Right_Read>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d109      	bne.n	800146e <CarMovements+0xe2>
 800145a:	f7ff fe5d 	bl	8001118 <Flame_Left_Read>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <CarMovements+0xe2>
 8001464:	f7ff fe34 	bl	80010d0 <Flame_FrontRight_Read>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <CarMovements+0xf4>
		{
			Car_Stop_Moving();
 800146e:	f7ff fdb7 	bl	8000fe0 <Car_Stop_Moving>
			n--;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <CarMovements+0x124>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	3b01      	subs	r3, #1
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <CarMovements+0x124>)
 800147a:	6013      	str	r3, [r2, #0]
			return 0;
 800147c:	2300      	movs	r3, #0
 800147e:	e010      	b.n	80014a2 <CarMovements+0x116>
	for(i = 0 ; i < n; i++)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <CarMovements+0x124>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	dbc5      	blt.n	800141c <CarMovements+0x90>
		}
	}	//turn right -> n * count
	Car_Routation( Car_TurnRight);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fcf1 	bl	8000e78 <Car_Routation>
	n++;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <CarMovements+0x124>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <CarMovements+0x124>)
 800149e:	6013      	str	r3, [r2, #0]
	return 0;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	42200000 	.word	0x42200000
 80014b0:	20000000 	.word	0x20000000

080014b4 <CarAction>:

void CarAction ()
{
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0

	int k = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
//	((!(Flame_Distance_Read() <= Flame_Threshold)) && (Flame_Frontmid_Read()))

	while(((!(Ultrasnic_Read() <= ULTRA_Fire_Threshold)) && (Flame_Frontmid_Read())))
 80014be:	e013      	b.n	80014e8 <CarAction+0x34>
	{
//		if(Flame_Distance_Read() <= Flame_Threshold)
//		{
//			k = 0 ;
//		}
		if(Flame_FrontRight_Read() || Flame_FrontLeft_Read())
 80014c0:	f7ff fe06 	bl	80010d0 <Flame_FrontRight_Read>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d104      	bne.n	80014d4 <CarAction+0x20>
 80014ca:	f7ff fdf5 	bl	80010b8 <Flame_FrontLeft_Read>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <CarAction+0x2c>
		{
			CarAdjustament (Flame_MaxReading());
 80014d4:	f7ff fee0 	bl	8001298 <Flame_MaxReading>
 80014d8:	4603      	mov	r3, r0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff0c 	bl	80012f8 <CarAdjustament>
		}
		//move forward
		Car_Move(Car_Speed_40 , distance_step);
 80014e0:	2114      	movs	r1, #20
 80014e2:	2028      	movs	r0, #40	; 0x28
 80014e4:	f7ff fd28 	bl	8000f38 <Car_Move>
	while(((!(Ultrasnic_Read() <= ULTRA_Fire_Threshold)) && (Flame_Frontmid_Read())))
 80014e8:	f7ff fe3a 	bl	8001160 <Ultrasnic_Read>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2201      	movs	r2, #1
 80014f0:	4614      	mov	r4, r2
 80014f2:	4914      	ldr	r1, [pc, #80]	; (8001544 <CarAction+0x90>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fbbf 	bl	8000c78 <__aeabi_fcmple>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <CarAction+0x50>
 8001500:	2300      	movs	r3, #0
 8001502:	461c      	mov	r4, r3
 8001504:	b2e3      	uxtb	r3, r4
 8001506:	f083 0301 	eor.w	r3, r3, #1
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <CarAction+0x66>
 8001510:	f7ff fdc6 	bl	80010a0 <Flame_Frontmid_Read>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1d2      	bne.n	80014c0 <CarAction+0xc>
	}
	k = 1;
 800151a:	2301      	movs	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
	Car_Stop_Moving();
 800151e:	f7ff fd5f 	bl	8000fe0 <Car_Stop_Moving>
	//Routate the servo
	//Servo_RotationAngle(char angle , char dirction);
	//pumb on
	while(Flame_Frontmid_Read())
 8001522:	e002      	b.n	800152a <CarAction+0x76>
	{
		pumb(pumb_on);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fea5 	bl	8001274 <pumb>
	while(Flame_Frontmid_Read())
 800152a:	f7ff fdb9 	bl	80010a0 <Flame_Frontmid_Read>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f7      	bne.n	8001524 <CarAction+0x70>
	}
	pumb(pumb_off);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff fe9d 	bl	8001274 <pumb>
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	41c80000 	.word	0x41c80000

08001548 <Init_pumb>:

void Init_pumb()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t Conf;
	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800154e:	2304      	movs	r3, #4
 8001550:	71bb      	strb	r3, [r7, #6]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8001552:	2301      	movs	r3, #1
 8001554:	71fb      	strb	r3, [r7, #7]
	Conf.pinNumber=GPIO_PIN_12;
 8001556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB,&Conf);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <Init_pumb+0x28>)
 8001562:	f000 fad1 	bl	8001b08 <MCAL_GPIO_Init>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40010c00 	.word	0x40010c00

08001574 <HAL_Driver_init>:

void HAL_Driver_init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	HAL_Flame_init();
 8001578:	f7ff fd44 	bl	8001004 <HAL_Flame_init>
	HAL_DC_Motors_init();
 800157c:	f7ff fbc6 	bl	8000d0c <HAL_DC_Motors_init>
	HAL_Ultrasonic_init();
 8001580:	f7ff fdd6 	bl	8001130 <HAL_Ultrasonic_init>
	// Servo_Init();
	Init_pumb();
 8001584:	f7ff ffe0 	bl	8001548 <Init_pumb>

}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}

0800158c <Object_Handle>:


void Object_Handle()
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
	Car_Stop_Moving();
 8001590:	f7ff fd26 	bl	8000fe0 <Car_Stop_Moving>
	Car_GetBack(400);
 8001594:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001598:	f7ff fbd6 	bl	8000d48 <Car_GetBack>
	Car_Rotation_Object(Car_TurnRight , 600 );
 800159c:	f44f 7116 	mov.w	r1, #600	; 0x258
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fc03 	bl	8000dac <Car_Rotation_Object>
	Car_Stop_Moving();
 80015a6:	f7ff fd1b 	bl	8000fe0 <Car_Stop_Moving>
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <main>:



int main (){
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0

	Clock_INIT();
 80015b6:	f7ff fe05 	bl	80011c4 <Clock_INIT>
	HAL_Driver_init();
 80015ba:	f7ff ffdb 	bl	8001574 <HAL_Driver_init>

	//    LCD_init();

	unsigned char object_detected = 0 ;
 80015be:	2300      	movs	r3, #0
 80015c0:	71fb      	strb	r3, [r7, #7]
	unsigned char flame_detected = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	71bb      	strb	r3, [r7, #6]

	GPIO_Pinconfig_t Conf;
	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_OD;
 80015c6:	2305      	movs	r3, #5
 80015c8:	70bb      	strb	r3, [r7, #2]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_2M;
 80015ca:	2302      	movs	r3, #2
 80015cc:	70fb      	strb	r3, [r7, #3]
	Conf.pinNumber=GPIO_PIN_13;
 80015ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d2:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC,&Conf);
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	483a      	ldr	r0, [pc, #232]	; (80016c4 <main+0x114>)
 80015da:	f000 fa95 	bl	8001b08 <MCAL_GPIO_Init>


	while(1)
	{

		object_detected = (Ultrasnic_Read() <= ULTRA_Threshold);
 80015de:	f7ff fdbf 	bl	8001160 <Ultrasnic_Read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2201      	movs	r2, #1
 80015e6:	4614      	mov	r4, r2
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <main+0x118>)
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fb44 	bl	8000c78 <__aeabi_fcmple>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <main+0x4a>
 80015f6:	2300      	movs	r3, #0
 80015f8:	461c      	mov	r4, r3
 80015fa:	b2e3      	uxtb	r3, r4
 80015fc:	71fb      	strb	r3, [r7, #7]
		flame_detected = ((Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read()) || ( Flame_FrontLeft_Read()) );
 80015fe:	f7ff fd4f 	bl	80010a0 <Flame_Frontmid_Read>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <main+0x8a>
 8001608:	f7ff fd6e 	bl	80010e8 <Flame_Back_Read>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d113      	bne.n	800163a <main+0x8a>
 8001612:	f7ff fd75 	bl	8001100 <Flame_Right_Read>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10e      	bne.n	800163a <main+0x8a>
 800161c:	f7ff fd7c 	bl	8001118 <Flame_Left_Read>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <main+0x8a>
 8001626:	f7ff fd53 	bl	80010d0 <Flame_FrontRight_Read>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d104      	bne.n	800163a <main+0x8a>
 8001630:	f7ff fd42 	bl	80010b8 <Flame_FrontLeft_Read>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <main+0x8e>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <main+0x90>
 800163e:	2300      	movs	r3, #0
 8001640:	71bb      	strb	r3, [r7, #6]
		if(!(object_detected || flame_detected))
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <main+0xa4>
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <main+0xa4>
		{
			CarMovements();
 800164e:	f7ff fe9d 	bl	800138c <CarMovements>
 8001652:	e02e      	b.n	80016b2 <main+0x102>
		}
		else if(object_detected && flame_detected) // detected object
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d010      	beq.n	800167c <main+0xcc>
 800165a:	79bb      	ldrb	r3, [r7, #6]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00d      	beq.n	800167c <main+0xcc>
		{
			CarAdjustament (Flame_MaxReading());
 8001660:	f7ff fe1a 	bl	8001298 <Flame_MaxReading>
 8001664:	4603      	mov	r3, r0
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fe46 	bl	80012f8 <CarAdjustament>
			CarAction();
 800166c:	f7ff ff22 	bl	80014b4 <CarAction>
			n-- ;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <main+0x11c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	4a15      	ldr	r2, [pc, #84]	; (80016cc <main+0x11c>)
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	e01a      	b.n	80016b2 <main+0x102>
		}
		else if (object_detected)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <main+0xe2>
		{
			n--;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <main+0x11c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3b01      	subs	r3, #1
 8001688:	4a10      	ldr	r2, [pc, #64]	; (80016cc <main+0x11c>)
 800168a:	6013      	str	r3, [r2, #0]
			Object_Handle();
 800168c:	f7ff ff7e 	bl	800158c <Object_Handle>
 8001690:	e00f      	b.n	80016b2 <main+0x102>
			//todo

		}
		else if (flame_detected)
 8001692:	79bb      	ldrb	r3, [r7, #6]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d00c      	beq.n	80016b2 <main+0x102>
		{
			CarAdjustament (Flame_MaxReading());
 8001698:	f7ff fdfe 	bl	8001298 <Flame_MaxReading>
 800169c:	4603      	mov	r3, r0
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fe2a 	bl	80012f8 <CarAdjustament>
			CarAction();
 80016a4:	f7ff ff06 	bl	80014b4 <CarAction>
			n--;
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <main+0x11c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	4a07      	ldr	r2, [pc, #28]	; (80016cc <main+0x11c>)
 80016b0:	6013      	str	r3, [r2, #0]
		}


		MCAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80016b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b6:	4803      	ldr	r0, [pc, #12]	; (80016c4 <main+0x114>)
 80016b8:	f000 fad3 	bl	8001c62 <MCAL_GPIO_TogglePin>
		delay_ms(100);
 80016bc:	2064      	movs	r0, #100	; 0x64
 80016be:	f000 f831 	bl	8001724 <delay_ms>
		object_detected = (Ultrasnic_Read() <= ULTRA_Threshold);
 80016c2:	e78c      	b.n	80015de <main+0x2e>
 80016c4:	40011000 	.word	0x40011000
 80016c8:	42200000 	.word	0x42200000
 80016cc:	20000000 	.word	0x20000000

080016d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016d0:	480d      	ldr	r0, [pc, #52]	; (8001708 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80016d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d8:	480c      	ldr	r0, [pc, #48]	; (800170c <LoopForever+0x6>)
  ldr r1, =_edata
 80016da:	490d      	ldr	r1, [pc, #52]	; (8001710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016dc:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <LoopForever+0xe>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016e0:	e002      	b.n	80016e8 <LoopCopyDataInit>

080016e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e6:	3304      	adds	r3, #4

080016e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016ec:	d3f9      	bcc.n	80016e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016f0:	4c0a      	ldr	r4, [pc, #40]	; (800171c <LoopForever+0x16>)
  movs r3, #0
 80016f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f4:	e001      	b.n	80016fa <LoopFillZerobss>

080016f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f8:	3204      	adds	r2, #4

080016fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016fc:	d3fb      	bcc.n	80016f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80016fe:	f000 fe15 	bl	800232c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001702:	f7ff ff55 	bl	80015b0 <main>

08001706 <LoopForever>:

LoopForever:
    b LoopForever
 8001706:	e7fe      	b.n	8001706 <LoopForever>
  ldr   r0, =_estack
 8001708:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800170c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001710:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001714:	08002394 	.word	0x08002394
  ldr r2, =_sbss
 8001718:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800171c:	200000c0 	.word	0x200000c0

08001720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001720:	e7fe      	b.n	8001720 <ADC1_2_IRQHandler>
	...

08001724 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM1->PSC=7999;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <delay_ms+0x50>)
 800172e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001732:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM1->ARR=ms-1;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	1e5a      	subs	r2, r3, #1
 8001738:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <delay_ms+0x50>)
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM1->CR1 |=1<<0;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <delay_ms+0x50>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <delay_ms+0x50>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register

	while(!(TIM1->SR & 1<<0));
 8001748:	bf00      	nop
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <delay_ms+0x50>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d0f9      	beq.n	800174a <delay_ms+0x26>
	// clear flag
	TIM1->SR=0;
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <delay_ms+0x50>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM1->CR1 =0;
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <delay_ms+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
	TIM1->CNT=0;
 8001762:	4b04      	ldr	r3, [pc, #16]	; (8001774 <delay_ms+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40012c00 	.word	0x40012c00

08001778 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <EXTI0_IRQHandler+0x1c>)
 800177e:	695b      	ldr	r3, [r3, #20]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <EXTI0_IRQHandler+0x1c>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8001788:	4b03      	ldr	r3, [pc, #12]	; (8001798 <EXTI0_IRQHandler+0x20>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4798      	blx	r3
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40010400 	.word	0x40010400
 8001798:	20000038 	.word	0x20000038

0800179c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <EXTI1_IRQHandler+0x1c>)
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <EXTI1_IRQHandler+0x1c>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <EXTI1_IRQHandler+0x20>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4798      	blx	r3
}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40010400 	.word	0x40010400
 80017bc:	20000038 	.word	0x20000038

080017c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <EXTI2_IRQHandler+0x1c>)
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <EXTI2_IRQHandler+0x1c>)
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <EXTI2_IRQHandler+0x20>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4798      	blx	r3
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40010400 	.word	0x40010400
 80017e0:	20000038 	.word	0x20000038

080017e4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <EXTI3_IRQHandler+0x1c>)
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	4a04      	ldr	r2, [pc, #16]	; (8001800 <EXTI3_IRQHandler+0x1c>)
 80017ee:	f043 0308 	orr.w	r3, r3, #8
 80017f2:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <EXTI3_IRQHandler+0x20>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4798      	blx	r3
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40010400 	.word	0x40010400
 8001804:	20000038 	.word	0x20000038

08001808 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <EXTI4_IRQHandler+0x1c>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <EXTI4_IRQHandler+0x1c>)
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <EXTI4_IRQHandler+0x20>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	4798      	blx	r3
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40010400 	.word	0x40010400
 8001828:	20000038 	.word	0x20000038

0800182c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8001830:	4b26      	ldr	r3, [pc, #152]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 8001832:	695b      	ldr	r3, [r3, #20]
 8001834:	f003 0320 	and.w	r3, r3, #32
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <EXTI9_5_IRQHandler+0x22>
 800183c:	4b23      	ldr	r3, [pc, #140]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 8001842:	f043 0320 	orr.w	r3, r3, #32
 8001846:	6153      	str	r3, [r2, #20]
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <EXTI9_5_IRQHandler+0xa4>)
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <EXTI9_5_IRQHandler+0x40>
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 8001860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001864:	6153      	str	r3, [r2, #20]
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <EXTI9_5_IRQHandler+0xa4>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <EXTI9_5_IRQHandler+0x5e>
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	4a13      	ldr	r2, [pc, #76]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001882:	6153      	str	r3, [r2, #20]
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <EXTI9_5_IRQHandler+0xa4>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <EXTI9_5_IRQHandler+0x7c>
 8001896:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	4a0c      	ldr	r2, [pc, #48]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a0:	6153      	str	r3, [r2, #20]
 80018a2:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <EXTI9_5_IRQHandler+0xa4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 80018aa:	695b      	ldr	r3, [r3, #20]
 80018ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d008      	beq.n	80018c6 <EXTI9_5_IRQHandler+0x9a>
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 80018b6:	695b      	ldr	r3, [r3, #20]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <EXTI9_5_IRQHandler+0xa0>)
 80018ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018be:	6153      	str	r3, [r2, #20]
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <EXTI9_5_IRQHandler+0xa4>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	4798      	blx	r3
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40010400 	.word	0x40010400
 80018d0:	20000038 	.word	0x20000038

080018d4 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d008      	beq.n	80018f6 <EXTI15_10_IRQHandler+0x22>
 80018e4:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4a29      	ldr	r2, [pc, #164]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6153      	str	r3, [r2, #20]
 80018f0:	4b28      	ldr	r3, [pc, #160]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 80018f6:	4b26      	ldr	r3, [pc, #152]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <EXTI15_10_IRQHandler+0x40>
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a22      	ldr	r2, [pc, #136]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800190c:	6153      	str	r3, [r2, #20]
 800190e:	4b21      	ldr	r3, [pc, #132]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d008      	beq.n	8001932 <EXTI15_10_IRQHandler+0x5e>
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	4a1a      	ldr	r2, [pc, #104]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800192a:	6153      	str	r3, [r2, #20]
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d008      	beq.n	8001950 <EXTI15_10_IRQHandler+0x7c>
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a13      	ldr	r2, [pc, #76]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001944:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 800194c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194e:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d008      	beq.n	800196e <EXTI15_10_IRQHandler+0x9a>
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a0b      	ldr	r2, [pc, #44]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001966:	6153      	str	r3, [r2, #20]
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <EXTI15_10_IRQHandler+0xb8>
 800197a:	4b05      	ldr	r3, [pc, #20]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <EXTI15_10_IRQHandler+0xbc>)
 8001980:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001984:	6153      	str	r3, [r2, #20]
 8001986:	4b03      	ldr	r3, [pc, #12]	; (8001994 <EXTI15_10_IRQHandler+0xc0>)
 8001988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198a:	4798      	blx	r3
}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40010400 	.word	0x40010400
 8001994:	20000038 	.word	0x20000038

08001998 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019a8:	f000 80a5 	beq.w	8001af6 <get_position+0x15e>
 80019ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019b0:	f300 80a3 	bgt.w	8001afa <get_position+0x162>
 80019b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019b8:	f000 809b 	beq.w	8001af2 <get_position+0x15a>
 80019bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019c0:	f300 809b 	bgt.w	8001afa <get_position+0x162>
 80019c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019c8:	f000 8091 	beq.w	8001aee <get_position+0x156>
 80019cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019d0:	f300 8093 	bgt.w	8001afa <get_position+0x162>
 80019d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019d8:	f000 8087 	beq.w	8001aea <get_position+0x152>
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e0:	f300 808b 	bgt.w	8001afa <get_position+0x162>
 80019e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019e8:	d07d      	beq.n	8001ae6 <get_position+0x14e>
 80019ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80019ee:	f300 8084 	bgt.w	8001afa <get_position+0x162>
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d074      	beq.n	8001ae2 <get_position+0x14a>
 80019f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019fc:	dc7d      	bgt.n	8001afa <get_position+0x162>
 80019fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a02:	d06c      	beq.n	8001ade <get_position+0x146>
 8001a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a08:	dc77      	bgt.n	8001afa <get_position+0x162>
 8001a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a0e:	d064      	beq.n	8001ada <get_position+0x142>
 8001a10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a14:	dc71      	bgt.n	8001afa <get_position+0x162>
 8001a16:	2b80      	cmp	r3, #128	; 0x80
 8001a18:	d05d      	beq.n	8001ad6 <get_position+0x13e>
 8001a1a:	2b80      	cmp	r3, #128	; 0x80
 8001a1c:	dc6d      	bgt.n	8001afa <get_position+0x162>
 8001a1e:	2b20      	cmp	r3, #32
 8001a20:	dc48      	bgt.n	8001ab4 <get_position+0x11c>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dd69      	ble.n	8001afa <get_position+0x162>
 8001a26:	3b01      	subs	r3, #1
 8001a28:	2b1f      	cmp	r3, #31
 8001a2a:	d866      	bhi.n	8001afa <get_position+0x162>
 8001a2c:	a201      	add	r2, pc, #4	; (adr r2, 8001a34 <get_position+0x9c>)
 8001a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a32:	bf00      	nop
 8001a34:	08001abb 	.word	0x08001abb
 8001a38:	08001abf 	.word	0x08001abf
 8001a3c:	08001afb 	.word	0x08001afb
 8001a40:	08001ac3 	.word	0x08001ac3
 8001a44:	08001afb 	.word	0x08001afb
 8001a48:	08001afb 	.word	0x08001afb
 8001a4c:	08001afb 	.word	0x08001afb
 8001a50:	08001ac7 	.word	0x08001ac7
 8001a54:	08001afb 	.word	0x08001afb
 8001a58:	08001afb 	.word	0x08001afb
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001acb 	.word	0x08001acb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001afb 	.word	0x08001afb
 8001a94:	08001afb 	.word	0x08001afb
 8001a98:	08001afb 	.word	0x08001afb
 8001a9c:	08001afb 	.word	0x08001afb
 8001aa0:	08001afb 	.word	0x08001afb
 8001aa4:	08001afb 	.word	0x08001afb
 8001aa8:	08001afb 	.word	0x08001afb
 8001aac:	08001afb 	.word	0x08001afb
 8001ab0:	08001acf 	.word	0x08001acf
 8001ab4:	2b40      	cmp	r3, #64	; 0x40
 8001ab6:	d00c      	beq.n	8001ad2 <get_position+0x13a>
 8001ab8:	e01f      	b.n	8001afa <get_position+0x162>
	{
	case GPIO_PIN_0 :
		return 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e01e      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e01c      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e01a      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	e018      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8001aca:	2310      	movs	r3, #16
 8001acc:	e016      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 8001ace:	2314      	movs	r3, #20
 8001ad0:	e014      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 8001ad2:	2318      	movs	r3, #24
 8001ad4:	e012      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8001ad6:	231c      	movs	r3, #28
 8001ad8:	e010      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	e00e      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e00c      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	e00a      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 8001ae6:	230c      	movs	r3, #12
 8001ae8:	e008      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 8001aea:	2310      	movs	r3, #16
 8001aec:	e006      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 8001aee:	2314      	movs	r3, #20
 8001af0:	e004      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 8001af2:	2318      	movs	r3, #24
 8001af4:	e002      	b.n	8001afc <get_position+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 8001af6:	231c      	movs	r3, #28
 8001af8:	e000      	b.n	8001afc <get_position+0x164>
		break;
	default:
		return 0;
 8001afa:	2300      	movs	r3, #0
	}
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bc80      	pop	{r7}
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 8001b08:	b590      	push	{r4, r7, lr}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	2bff      	cmp	r3, #255	; 0xff
 8001b20:	d801      	bhi.n	8001b26 <MCAL_GPIO_Init+0x1e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e001      	b.n	8001b2a <MCAL_GPIO_Init+0x22>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff ff31 	bl	8001998 <get_position>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	230f      	movs	r3, #15
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	401a      	ands	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	789b      	ldrb	r3, [r3, #2]
 8001b4e:	2b07      	cmp	r3, #7
 8001b50:	d00b      	beq.n	8001b6a <MCAL_GPIO_Init+0x62>
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	789b      	ldrb	r3, [r3, #2]
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d007      	beq.n	8001b6a <MCAL_GPIO_Init+0x62>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	789b      	ldrb	r3, [r3, #2]
 8001b5e:	2b05      	cmp	r3, #5
 8001b60:	d003      	beq.n	8001b6a <MCAL_GPIO_Init+0x62>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	789b      	ldrb	r3, [r3, #2]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d10e      	bne.n	8001b88 <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	789b      	ldrb	r3, [r3, #2]
 8001b6e:	3b04      	subs	r3, #4
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	b25a      	sxtb	r2, r3
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	78db      	ldrb	r3, [r3, #3]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f003 030f 	and.w	r3, r3, #15
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e02c      	b.n	8001be2 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	789b      	ldrb	r3, [r3, #2]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d003      	beq.n	8001b98 <MCAL_GPIO_Init+0x90>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	789b      	ldrb	r3, [r3, #2]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d107      	bne.n	8001ba8 <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	789b      	ldrb	r3, [r3, #2]
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e01c      	b.n	8001be2 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	789b      	ldrb	r3, [r3, #2]
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d102      	bne.n	8001bb6 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e015      	b.n	8001be2 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d107      	bne.n	8001bd2 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	8812      	ldrh	r2, [r2, #0]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	e007      	b.n	8001be2 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	8812      	ldrh	r2, [r2, #0]
 8001bda:	43d2      	mvns	r2, r2
 8001bdc:	401a      	ands	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8001be2:	7bfc      	ldrb	r4, [r7, #15]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fed5 	bl	8001998 <get_position>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	fa04 f203 	lsl.w	r2, r4, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	601a      	str	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <MCAL_GPIO_ReadPin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-the input pin value (two value based on @ ref  GPIO_PINS_state)
* Note				-none
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 8001c06:	b480      	push	{r7}
 8001c08:	b085      	sub	sp, #20
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	807b      	strh	r3, [r7, #2]
	uint8_t bit_state;
	if (((GPIOx->IDR) & pinNumber) !=  (uint32_t) GPIO_PIN_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <MCAL_GPIO_ReadPin+0x1e>
	{
		bit_state=GPIO_PIN_SET;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	73fb      	strb	r3, [r7, #15]
 8001c22:	e001      	b.n	8001c28 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bit_state=GPIO_PIN_RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]
	}
	return bit_state;
 8001c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr

08001c34 <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 8001c50:	e002      	b.n	8001c58 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 8001c52:	887a      	ldrh	r2, [r7, #2]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <MCAL_GPIO_TogglePin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=pinNumber;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	405a      	eors	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr

08001c84 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a30      	ldr	r2, [pc, #192]	; (8001d54 <Slave_Status+0xd0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	bf14      	ite	ne
 8001c98:	2301      	movne	r3, #1
 8001c9a:	2300      	moveq	r3, #0
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d851      	bhi.n	8001d4a <Slave_Status+0xc6>
 8001ca6:	a201      	add	r2, pc, #4	; (adr r2, 8001cac <Slave_Status+0x28>)
 8001ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cac:	08001cbd 	.word	0x08001cbd
 8001cb0:	08001ce1 	.word	0x08001ce1
 8001cb4:	08001cf9 	.word	0x08001cf9
 8001cb8:	08001d1d 	.word	0x08001d1d
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d03b      	beq.n	8001d40 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	4923      	ldr	r1, [pc, #140]	; (8001d58 <Slave_Status+0xd4>)
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3318      	adds	r3, #24
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2000      	movs	r0, #0
 8001cdc:	4798      	blx	r3
		}
		break;
 8001cde:	e02f      	b.n	8001d40 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	491d      	ldr	r1, [pc, #116]	; (8001d58 <Slave_Status+0xd4>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	1a9b      	subs	r3, r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	3318      	adds	r3, #24
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	4798      	blx	r3
		break;
 8001cf6:	e028      	b.n	8001d4a <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01f      	beq.n	8001d44 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	4914      	ldr	r1, [pc, #80]	; (8001d58 <Slave_Status+0xd4>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	3318      	adds	r3, #24
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2002      	movs	r0, #2
 8001d18:	4798      	blx	r3
		}
		break;
 8001d1a:	e013      	b.n	8001d44 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10f      	bne.n	8001d48 <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8001d28:	7bfa      	ldrb	r2, [r7, #15]
 8001d2a:	490b      	ldr	r1, [pc, #44]	; (8001d58 <Slave_Status+0xd4>)
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	3318      	adds	r3, #24
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2003      	movs	r0, #3
 8001d3c:	4798      	blx	r3
		}
		break;
 8001d3e:	e003      	b.n	8001d48 <Slave_Status+0xc4>
		break;
 8001d40:	bf00      	nop
 8001d42:	e002      	b.n	8001d4a <Slave_Status+0xc6>
		break;
 8001d44:	bf00      	nop
 8001d46:	e000      	b.n	8001d4a <Slave_Status+0xc6>
		break;
 8001d48:	bf00      	nop
	}
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40005400 	.word	0x40005400
 8001d58:	20000074 	.word	0x20000074

08001d5c <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8001d66:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 8001d70:	4b33      	ldr	r3, [pc, #204]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d78:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <I2C1_EV_IRQHandler+0x44>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d92:	4a2b      	ldr	r2, [pc, #172]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	4829      	ldr	r0, [pc, #164]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001d9c:	f7ff ff72 	bl	8001c84 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <I2C1_EV_IRQHandler+0x7a>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00f      	beq.n	8001dd6 <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8001db6:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 8001dce:	2101      	movs	r1, #1
 8001dd0:	481b      	ldr	r0, [pc, #108]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001dd2:	f7ff ff57 	bl	8001c84 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00f      	beq.n	8001e06 <I2C1_EV_IRQHandler+0xaa>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d00c      	beq.n	8001e06 <I2C1_EV_IRQHandler+0xaa>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d009      	beq.n	8001e06 <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d103      	bne.n	8001e06 <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8001dfe:	2102      	movs	r1, #2
 8001e00:	480f      	ldr	r0, [pc, #60]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001e02:	f7ff ff3f 	bl	8001c84 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0e:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00f      	beq.n	8001e36 <I2C1_EV_IRQHandler+0xda>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00c      	beq.n	8001e36 <I2C1_EV_IRQHandler+0xda>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d103      	bne.n	8001e36 <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8001e2e:	2103      	movs	r1, #3
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <I2C1_EV_IRQHandler+0xe4>)
 8001e32:	f7ff ff27 	bl	8001c84 <Slave_Status>
		}
	}
}
 8001e36:	bf00      	nop
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40005400 	.word	0x40005400

08001e44 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <SPI1_IRQHandler+0x54>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	085b      	lsrs	r3, r3, #1
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	793b      	ldrb	r3, [r7, #4]
 8001e58:	f362 0300 	bfi	r3, r2, #0, #1
 8001e5c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <SPI1_IRQHandler+0x54>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	793b      	ldrb	r3, [r7, #4]
 8001e6a:	f362 0341 	bfi	r3, r2, #1, #1
 8001e6e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <SPI1_IRQHandler+0x54>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	793b      	ldrb	r3, [r7, #4]
 8001e7e:	f362 0382 	bfi	r3, r2, #2, #1
 8001e82:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SPI1_IRQHandler+0x58>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	7938      	ldrb	r0, [r7, #4]
 8001e8c:	4798      	blx	r3
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40013000 	.word	0x40013000
 8001e9c:	200000ac 	.word	0x200000ac

08001ea0 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8001ea6:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <SPI2_IRQHandler+0x54>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	793b      	ldrb	r3, [r7, #4]
 8001eb4:	f362 0300 	bfi	r3, r2, #0, #1
 8001eb8:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8001eba:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <SPI2_IRQHandler+0x54>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	793b      	ldrb	r3, [r7, #4]
 8001ec6:	f362 0341 	bfi	r3, r2, #1, #1
 8001eca:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <SPI2_IRQHandler+0x54>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	b2da      	uxtb	r2, r3
 8001ed8:	793b      	ldrb	r3, [r7, #4]
 8001eda:	f362 0382 	bfi	r3, r2, #2, #1
 8001ede:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	; (8001ef8 <SPI2_IRQHandler+0x58>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	7938      	ldrb	r0, [r7, #4]
 8001ee8:	4798      	blx	r3
}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40003800 	.word	0x40003800
 8001ef8:	200000ac 	.word	0x200000ac

08001efc <MCAL_TIMx_Init>:
* @param [in] 		-Chan:  specified channel from 1 to 4
* @retval 			-none
* Note				-Support Fast PWM and Normal ( delay mode )
*/
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2281      	movs	r2, #129	; 0x81
 8001f0e:	601a      	str	r2, [r3, #0]
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	f000 80d3 	beq.w	80020c0 <MCAL_TIMx_Init+0x1c4>
	{
		// set pin
		if(TIMx==TIM2)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d131      	bne.n	8001f86 <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 8001f22:	4ba0      	ldr	r3, [pc, #640]	; (80021a4 <MCAL_TIMx_Init+0x2a8>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a9f      	ldr	r2, [pc, #636]	; (80021a4 <MCAL_TIMx_Init+0x2a8>)
 8001f28:	f043 0301 	orr.w	r3, r3, #1
 8001f2c:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8001f2e:	2306      	movs	r3, #6
 8001f30:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8001f32:	2301      	movs	r3, #1
 8001f34:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d817      	bhi.n	8001f6c <MCAL_TIMx_Init+0x70>
 8001f3c:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <MCAL_TIMx_Init+0x48>)
 8001f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f42:	bf00      	nop
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f61 	.word	0x08001f61
 8001f50:	08001f67 	.word	0x08001f67
			{
			case CH1 :
				{
					//set pin outpt
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8001f54:	2301      	movs	r3, #1
 8001f56:	82bb      	strh	r3, [r7, #20]
					break;
 8001f58:	e008      	b.n	8001f6c <MCAL_TIMx_Init+0x70>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	82bb      	strh	r3, [r7, #20]
					break;
 8001f5e:	e005      	b.n	8001f6c <MCAL_TIMx_Init+0x70>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_2 ;
 8001f60:	2304      	movs	r3, #4
 8001f62:	82bb      	strh	r3, [r7, #20]
					break;
 8001f64:	e002      	b.n	8001f6c <MCAL_TIMx_Init+0x70>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_3 ;
 8001f66:	2308      	movs	r3, #8
 8001f68:	82bb      	strh	r3, [r7, #20]
					break;
 8001f6a:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	488d      	ldr	r0, [pc, #564]	; (80021a8 <MCAL_TIMx_Init+0x2ac>)
 8001f74:	f7ff fdc8 	bl	8001b08 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a8b      	ldr	r2, [pc, #556]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8001f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e072      	b.n	800206c <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4a89      	ldr	r2, [pc, #548]	; (80021b0 <MCAL_TIMx_Init+0x2b4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d13d      	bne.n	800200a <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8001f8e:	2306      	movs	r3, #6
 8001f90:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8001f92:	2301      	movs	r3, #1
 8001f94:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d82f      	bhi.n	8001ffc <MCAL_TIMx_Init+0x100>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <MCAL_TIMx_Init+0xa8>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fb5 	.word	0x08001fb5
 8001fa8:	08001fc7 	.word	0x08001fc7
 8001fac:	08001fd9 	.word	0x08001fd9
 8001fb0:	08001feb 	.word	0x08001feb
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8001fb4:	2340      	movs	r3, #64	; 0x40
 8001fb6:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	487a      	ldr	r0, [pc, #488]	; (80021a8 <MCAL_TIMx_Init+0x2ac>)
 8001fc0:	f7ff fda2 	bl	8001b08 <MCAL_GPIO_Init>
					break;
 8001fc4:	e01a      	b.n	8001ffc <MCAL_TIMx_Init+0x100>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001fca:	f107 0314 	add.w	r3, r7, #20
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4875      	ldr	r0, [pc, #468]	; (80021a8 <MCAL_TIMx_Init+0x2ac>)
 8001fd2:	f7ff fd99 	bl	8001b08 <MCAL_GPIO_Init>
					break;
 8001fd6:	e011      	b.n	8001ffc <MCAL_TIMx_Init+0x100>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4874      	ldr	r0, [pc, #464]	; (80021b4 <MCAL_TIMx_Init+0x2b8>)
 8001fe4:	f7ff fd90 	bl	8001b08 <MCAL_GPIO_Init>
					break;
 8001fe8:	e008      	b.n	8001ffc <MCAL_TIMx_Init+0x100>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8001fea:	2302      	movs	r3, #2
 8001fec:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	486f      	ldr	r0, [pc, #444]	; (80021b4 <MCAL_TIMx_Init+0x2b8>)
 8001ff6:	f7ff fd87 	bl	8001b08 <MCAL_GPIO_Init>
					break;
 8001ffa:	bf00      	nop
				}
			}
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8002002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	e030      	b.n	800206c <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <MCAL_TIMx_Init+0x2bc>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12c      	bne.n	800206c <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8002012:	2306      	movs	r3, #6
 8002014:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8002016:	2301      	movs	r3, #1
 8002018:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d819      	bhi.n	8002054 <MCAL_TIMx_Init+0x158>
 8002020:	a201      	add	r2, pc, #4	; (adr r2, 8002028 <MCAL_TIMx_Init+0x12c>)
 8002022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002026:	bf00      	nop
 8002028:	08002039 	.word	0x08002039
 800202c:	0800203f 	.word	0x0800203f
 8002030:	08002045 	.word	0x08002045
 8002034:	0800204d 	.word	0x0800204d
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8002038:	2340      	movs	r3, #64	; 0x40
 800203a:	82bb      	strh	r3, [r7, #20]
					break;
 800203c:	e00a      	b.n	8002054 <MCAL_TIMx_Init+0x158>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	82bb      	strh	r3, [r7, #20]
					break;
 8002042:	e007      	b.n	8002054 <MCAL_TIMx_Init+0x158>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_8 ;
 8002044:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002048:	82bb      	strh	r3, [r7, #20]
					break;
 800204a:	e003      	b.n	8002054 <MCAL_TIMx_Init+0x158>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_9 ;
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	82bb      	strh	r3, [r7, #20]

					break;
 8002052:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4856      	ldr	r0, [pc, #344]	; (80021b4 <MCAL_TIMx_Init+0x2b8>)
 800205c:	f7ff fd54 	bl	8001b08 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ30_TIM4_Disable();
 8002060:	4b52      	ldr	r3, [pc, #328]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <MCAL_TIMx_Init+0x2b0>)
 8002066:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800206a:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	2b03      	cmp	r3, #3
 8002070:	d850      	bhi.n	8002114 <MCAL_TIMx_Init+0x218>
 8002072:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <MCAL_TIMx_Init+0x17c>)
 8002074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002078:	08002089 	.word	0x08002089
 800207c:	08002097 	.word	0x08002097
 8002080:	080020a5 	.word	0x080020a5
 8002084:	080020b3 	.word	0x080020b3
		{
		case CH1 :
			{
				TIMx->CCMR1 |=15<<3;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	619a      	str	r2, [r3, #24]
				break;
 8002094:	e03e      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 |=15<<11;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	619a      	str	r2, [r3, #24]
				break;
 80020a2:	e037      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 |=15<<3;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	69db      	ldr	r3, [r3, #28]
 80020a8:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	61da      	str	r2, [r3, #28]
				break;
 80020b0:	e030      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2 |=15<<11;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	61da      	str	r2, [r3, #28]
				break;
 80020be:	e029      	b.n	8002114 <MCAL_TIMx_Init+0x218>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d826      	bhi.n	8002114 <MCAL_TIMx_Init+0x218>
 80020c6:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <MCAL_TIMx_Init+0x1d0>)
 80020c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020eb 	.word	0x080020eb
 80020d4:	080020f9 	.word	0x080020f9
 80020d8:	08002107 	.word	0x08002107
		{
		case CH1 :
			{
				TIMx->CCMR1 &=~(15<<3);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	619a      	str	r2, [r3, #24]
				break;
 80020e8:	e014      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 &=~(15<<11);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	619a      	str	r2, [r3, #24]
				break;
 80020f6:	e00d      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 &=~(15<<3);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	61da      	str	r2, [r3, #28]
				break;
 8002104:	e006      	b.n	8002114 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2  &=~(15<<11);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	61da      	str	r2, [r3, #28]
				break;
 8002112:	bf00      	nop
			}
		}
	}
	//output polarity and  output enable
	switch(Chan)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d836      	bhi.n	8002188 <MCAL_TIMx_Init+0x28c>
 800211a:	a201      	add	r2, pc, #4	; (adr r2, 8002120 <MCAL_TIMx_Init+0x224>)
 800211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002120:	08002131 	.word	0x08002131
 8002124:	08002147 	.word	0x08002147
 8002128:	0800215d 	.word	0x0800215d
 800212c:	08002173 	.word	0x08002173
	{
	case CH1 :
		{
			TIMx->CCER|=1<<0;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	f043 0201 	orr.w	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR1 = 10000;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002142:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002144:	e020      	b.n	8002188 <MCAL_TIMx_Init+0x28c>
		}
	case CH2 :
		{
			TIMx->CCER|=1<<4;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f043 0210 	orr.w	r2, r3, #16
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR2 = 10000;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f242 7210 	movw	r2, #10000	; 0x2710
 8002158:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800215a:	e015      	b.n	8002188 <MCAL_TIMx_Init+0x28c>
		}
	case CH3 :
		{
			TIMx->CCER|=1<<8;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR3 = 10000;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f242 7210 	movw	r2, #10000	; 0x2710
 800216e:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8002170:	e00a      	b.n	8002188 <MCAL_TIMx_Init+0x28c>
		}
	case CH4 :
		{
			TIMx->CCER|=1<<12;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR4 = 10000;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f242 7210 	movw	r2, #10000	; 0x2710
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8002186:	bf00      	nop
		}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	461a      	mov	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	629a      	str	r2, [r3, #40]	; 0x28
	//set init top value 20000
	TIMx->ARR = 20000;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002198:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800219a:	bf00      	nop
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40010800 	.word	0x40010800
 80021ac:	e000e180 	.word	0xe000e180
 80021b0:	40000400 	.word	0x40000400
 80021b4:	40010c00 	.word	0x40010c00
 80021b8:	40000800 	.word	0x40000800

080021bc <MCAL_TIM4_CAP_Init>:



void MCAL_TIM4_CAP_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
	TIM3->CR1=0b10000001;
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021c4:	2281      	movs	r2, #129	; 0x81
 80021c6:	601a      	str	r2, [r3, #0]
	//set pin capture input channel 1
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80021c8:	2301      	movs	r3, #1
 80021ca:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber=GPIO_PIN_6;
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig);
 80021d0:	1d3b      	adds	r3, r7, #4
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	; (8002208 <MCAL_TIM4_CAP_Init+0x4c>)
 80021d6:	f7ff fc97 	bl	8001b08 <MCAL_GPIO_Init>
	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM3->PSC=7;
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021dc:	2207      	movs	r2, #7
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value
	TIM3->ARR=0XFFFF;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021e6:	62da      	str	r2, [r3, #44]	; 0x2c
	//CC1 channel is configured as input, IC1 is mapped on TI1
	TIM3->CCMR1 =0x31;
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021ea:	2231      	movs	r2, #49	; 0x31
 80021ec:	619a      	str	r2, [r3, #24]
	// Enable capture on CC1
	TIM3->CCER |= (1<<0);
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <MCAL_TIM4_CAP_Init+0x48>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6213      	str	r3, [r2, #32]
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40000400 	.word	0x40000400
 8002208:	40010800 	.word	0x40010800

0800220c <MCAL_TIM4_CAP_Get_High>:


float MCAL_TIM4_CAP_Get_High(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
	float dis=0;
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	607b      	str	r3, [r7, #4]
	TIM3->CCER &=~(1<<1);
 8002218:	4b1b      	ldr	r3, [pc, #108]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 800221e:	f023 0302 	bic.w	r3, r3, #2
 8002222:	6213      	str	r3, [r2, #32]
	while(!(TIM3->SR &(1<<1)));
 8002224:	bf00      	nop
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f9      	beq.n	8002226 <MCAL_TIM4_CAP_Get_High+0x1a>
	TIM3->EGR |=1<<0;
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6153      	str	r3, [r2, #20]
	TIM3->SR=0;
 800223e:	4b12      	ldr	r3, [pc, #72]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
	TIM3->CCER |=1<<1;
 8002244:	4b10      	ldr	r3, [pc, #64]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 800224a:	f043 0302 	orr.w	r3, r3, #2
 800224e:	6213      	str	r3, [r2, #32]
	while(!(TIM3->SR &(1<<1)));
 8002250:	bf00      	nop
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f9      	beq.n	8002252 <MCAL_TIM4_CAP_Get_High+0x46>
	TIM3->SR=0;
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
	TIM3->CCER &=~(1<<1);
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 800226a:	f023 0302 	bic.w	r3, r3, #2
 800226e:	6213      	str	r3, [r2, #32]
	dis=TIM3->CCR1;
 8002270:	4b05      	ldr	r3, [pc, #20]	; (8002288 <MCAL_TIM4_CAP_Get_High+0x7c>)
 8002272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe fc4f 	bl	8000b18 <__aeabi_ui2f>
 800227a:	4603      	mov	r3, r0
 800227c:	607b      	str	r3, [r7, #4]
	return dis ;
 800227e:	687b      	ldr	r3, [r7, #4]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40000400 	.word	0x40000400

0800228c <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]

	switch(Chan)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d81a      	bhi.n	80022d8 <MCAL_TIMx_Set_Compare_Value+0x4c>
 80022a2:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <MCAL_TIMx_Set_Compare_Value+0x1c>)
 80022a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022c1 	.word	0x080022c1
 80022b0:	080022c9 	.word	0x080022c9
 80022b4:	080022d1 	.word	0x080022d1
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80022be:	e00b      	b.n	80022d8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80022c6:	e007      	b.n	80022d8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80022ce:	e003      	b.n	80022d8 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80022d6:	bf00      	nop
		}
	}
	TIMx->EGR |=1<<0;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	615a      	str	r2, [r3, #20]
}
 80022e4:	bf00      	nop
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop

080022f0 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 80022f4:	4b02      	ldr	r3, [pc, #8]	; (8002300 <USART1_IRQHandler+0x10>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	4798      	blx	r3
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200000b4 	.word	0x200000b4

08002304 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8002308:	4b02      	ldr	r3, [pc, #8]	; (8002314 <USART2_IRQHandler+0x10>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4798      	blx	r3
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200000b4 	.word	0x200000b4

08002318 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 800231c:	4b02      	ldr	r3, [pc, #8]	; (8002328 <USART3_IRQHandler+0x10>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4798      	blx	r3
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200000b4 	.word	0x200000b4

0800232c <__libc_init_array>:
 800232c:	b570      	push	{r4, r5, r6, lr}
 800232e:	2600      	movs	r6, #0
 8002330:	4d0c      	ldr	r5, [pc, #48]	; (8002364 <__libc_init_array+0x38>)
 8002332:	4c0d      	ldr	r4, [pc, #52]	; (8002368 <__libc_init_array+0x3c>)
 8002334:	1b64      	subs	r4, r4, r5
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	42a6      	cmp	r6, r4
 800233a:	d109      	bne.n	8002350 <__libc_init_array+0x24>
 800233c:	f000 f81a 	bl	8002374 <_init>
 8002340:	2600      	movs	r6, #0
 8002342:	4d0a      	ldr	r5, [pc, #40]	; (800236c <__libc_init_array+0x40>)
 8002344:	4c0a      	ldr	r4, [pc, #40]	; (8002370 <__libc_init_array+0x44>)
 8002346:	1b64      	subs	r4, r4, r5
 8002348:	10a4      	asrs	r4, r4, #2
 800234a:	42a6      	cmp	r6, r4
 800234c:	d105      	bne.n	800235a <__libc_init_array+0x2e>
 800234e:	bd70      	pop	{r4, r5, r6, pc}
 8002350:	f855 3b04 	ldr.w	r3, [r5], #4
 8002354:	4798      	blx	r3
 8002356:	3601      	adds	r6, #1
 8002358:	e7ee      	b.n	8002338 <__libc_init_array+0xc>
 800235a:	f855 3b04 	ldr.w	r3, [r5], #4
 800235e:	4798      	blx	r3
 8002360:	3601      	adds	r6, #1
 8002362:	e7f2      	b.n	800234a <__libc_init_array+0x1e>
 8002364:	0800238c 	.word	0x0800238c
 8002368:	0800238c 	.word	0x0800238c
 800236c:	0800238c 	.word	0x0800238c
 8002370:	08002390 	.word	0x08002390

08002374 <_init>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr

08002380 <_fini>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr
