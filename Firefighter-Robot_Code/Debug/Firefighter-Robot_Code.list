
Firefighter-Robot_Code.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f64  08000f6c  00010f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f64  08000f64  00010f6c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f64  08000f64  00010f6c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f64  08000f6c  00010f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000000  08000f6c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08000f6c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f6c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000713a  00000000  00000000  00010f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001161  00000000  00000000  000180cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000149c  00000000  00000000  00019230  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000300  00000000  00000000  0001a6d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000278  00000000  00000000  0001a9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000017b6  00000000  00000000  0001ac48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000036dd  00000000  00000000  0001c3fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000da1a  00000000  00000000  0001fadb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002d4f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a4c  00000000  00000000  0002d570  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f4c 	.word	0x08000f4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f4c 	.word	0x08000f4c

08000170 <Clock_INIT>:
 */

#include"APIs.h"

void Clock_INIT(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
    //set on the clock for PORTA
    RCC_GPIOA_CLK_EN();
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <Clock_INIT+0x6c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <Clock_INIT+0x6c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
    //set on the clock for PORTB
    RCC_GPIOB_CLK_EN();
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <Clock_INIT+0x6c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <Clock_INIT+0x6c>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
    //set on the clock for AFIO
    RCC_GPIOC_CLK_EN();
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <Clock_INIT+0x6c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <Clock_INIT+0x6c>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	6193      	str	r3, [r2, #24]
    RCC_AFIO_CLK_EN();
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <Clock_INIT+0x6c>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <Clock_INIT+0x6c>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6193      	str	r3, [r2, #24]
    RCC_TIM2_CLK_Enable();
 80001a4:	4b0d      	ldr	r3, [pc, #52]	; (80001dc <Clock_INIT+0x6c>)
 80001a6:	69db      	ldr	r3, [r3, #28]
 80001a8:	4a0c      	ldr	r2, [pc, #48]	; (80001dc <Clock_INIT+0x6c>)
 80001aa:	f043 0301 	orr.w	r3, r3, #1
 80001ae:	61d3      	str	r3, [r2, #28]
    RCC_TIM3_CLK_Enable();
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <Clock_INIT+0x6c>)
 80001b2:	69db      	ldr	r3, [r3, #28]
 80001b4:	4a09      	ldr	r2, [pc, #36]	; (80001dc <Clock_INIT+0x6c>)
 80001b6:	f043 0302 	orr.w	r3, r3, #2
 80001ba:	61d3      	str	r3, [r2, #28]
    RCC_TIM4_CLK_Enable();
 80001bc:	4b07      	ldr	r3, [pc, #28]	; (80001dc <Clock_INIT+0x6c>)
 80001be:	69db      	ldr	r3, [r3, #28]
 80001c0:	4a06      	ldr	r2, [pc, #24]	; (80001dc <Clock_INIT+0x6c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	61d3      	str	r3, [r2, #28]
    RCC_ADC1_CLK_Enable();
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <Clock_INIT+0x6c>)
 80001ca:	699b      	ldr	r3, [r3, #24]
 80001cc:	4a03      	ldr	r2, [pc, #12]	; (80001dc <Clock_INIT+0x6c>)
 80001ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001d2:	6193      	str	r3, [r2, #24]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000

080001e0 <main>:

int main (){
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b086      	sub	sp, #24
 80001e4:	af00      	add	r7, sp, #0
	Clock_INIT();
 80001e6:	f7ff ffc3 	bl	8000170 <Clock_INIT>
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_OD  ;
 80001ea:	2305      	movs	r3, #5
 80001ec:	75bb      	strb	r3, [r7, #22]
	pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_2M ;
 80001ee:	2302      	movs	r3, #2
 80001f0:	75fb      	strb	r3, [r7, #23]
	pinconfig.pinNumber = GPIO_PIN_13 ;
 80001f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001f6:	82bb      	strh	r3, [r7, #20]
	MCAL_GPIO_Init(GPIOC, &pinconfig) ;
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	4619      	mov	r1, r3
 80001fe:	4889      	ldr	r0, [pc, #548]	; (8000424 <main+0x244>)
 8000200:	f000 fadd 	bl	80007be <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000204:	2304      	movs	r3, #4
 8000206:	75bb      	strb	r3, [r7, #22]
	pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000208:	2301      	movs	r3, #1
 800020a:	75fb      	strb	r3, [r7, #23]
	pinconfig.pinNumber = GPIO_PIN_9 ;
 800020c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000210:	82bb      	strh	r3, [r7, #20]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000212:	f107 0314 	add.w	r3, r7, #20
 8000216:	4619      	mov	r1, r3
 8000218:	4883      	ldr	r0, [pc, #524]	; (8000428 <main+0x248>)
 800021a:	f000 fad0 	bl	80007be <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000224:	4880      	ldr	r0, [pc, #512]	; (8000428 <main+0x248>)
 8000226:	f000 fb49 	bl	80008bc <MCAL_GPIO_WritePin>

	pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800022a:	2304      	movs	r3, #4
 800022c:	75bb      	strb	r3, [r7, #22]
	pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 800022e:	2301      	movs	r3, #1
 8000230:	75fb      	strb	r3, [r7, #23]
	pinconfig.pinNumber = GPIO_PIN_8 ;
 8000232:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000236:	82bb      	strh	r3, [r7, #20]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4619      	mov	r1, r3
 800023e:	487a      	ldr	r0, [pc, #488]	; (8000428 <main+0x248>)
 8000240:	f000 fabd 	bl	80007be <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024a:	4878      	ldr	r0, [pc, #480]	; (800042c <main+0x24c>)
 800024c:	f000 fb36 	bl	80008bc <MCAL_GPIO_WritePin>

	TIMx_config_t  TIMx_Config;
	TIMx_Config.COUNT_MODE=TIMx_COUNT_MODE_UP;
 8000250:	2300      	movs	r3, #0
 8000252:	80fb      	strh	r3, [r7, #6]
	TIMx_Config.MODE=TIMx_MODE_PWM2;
 8000254:	2301      	movs	r3, #1
 8000256:	80bb      	strh	r3, [r7, #4]
	TIMx_Config.Prescalers=7;  // timer clock 1mhz
 8000258:	2307      	movs	r3, #7
 800025a:	813b      	strh	r3, [r7, #8]
	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH1);
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	2200      	movs	r2, #0
 8000260:	4619      	mov	r1, r3
 8000262:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000266:	f000 fc8d 	bl	8000b84 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH2);
 800026a:	2201      	movs	r2, #1
 800026c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000274:	f000 fde8 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_TOP_Value(TIM2, 20000);
 8000278:	f644 6120 	movw	r1, #20000	; 0x4e20
 800027c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000280:	f000 fe14 	bl	8000eac <MCAL_TIMx_Set_TOP_Value>
	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH2);
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2201      	movs	r2, #1
 8000288:	4619      	mov	r1, r3
 800028a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800028e:	f000 fc79 	bl	8000b84 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM2,2000,CH2);
 8000292:	2201      	movs	r2, #1
 8000294:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000298:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800029c:	f000 fdd4 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH3);
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2202      	movs	r2, #2
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002aa:	f000 fc6b 	bl	8000b84 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH3);
 80002ae:	2202      	movs	r2, #2
 80002b0:	f644 6120 	movw	r1, #20000	; 0x4e20
 80002b4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002b8:	f000 fdc6 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH4);
 80002bc:	1d3b      	adds	r3, r7, #4
 80002be:	2203      	movs	r2, #3
 80002c0:	4619      	mov	r1, r3
 80002c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002c6:	f000 fc5d 	bl	8000b84 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM2,10000,CH4);
 80002ca:	2203      	movs	r2, #3
 80002cc:	f242 7110 	movw	r1, #10000	; 0x2710
 80002d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002d4:	f000 fdb8 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>

	while(1)
	{
		MCAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002dc:	4851      	ldr	r0, [pc, #324]	; (8000424 <main+0x244>)
 80002de:	f000 fb04 	bl	80008ea <MCAL_GPIO_TogglePin>
		delay_ms(1000);
 80002e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002e6:	f000 f8cd 	bl	8000484 <delay_ms>

		MCAL_TIMx_Set_Compare_Value(TIM2,0,CH1);
 80002ea:	2200      	movs	r2, #0
 80002ec:	2100      	movs	r1, #0
 80002ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002f2:	f000 fda9 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH2);
 80002f6:	2201      	movs	r2, #1
 80002f8:	f644 6120 	movw	r1, #20000	; 0x4e20
 80002fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000300:	f000 fda2 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,0,CH3);
 8000304:	2202      	movs	r2, #2
 8000306:	2100      	movs	r1, #0
 8000308:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800030c:	f000 fd9c 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,0,CH4);
 8000310:	2203      	movs	r2, #3
 8000312:	2100      	movs	r1, #0
 8000314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000318:	f000 fd96 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(2000);
 800031c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000320:	f000 f8b0 	bl	8000484 <delay_ms>
		MCAL_TIMx_Set_Compare_Value(TIM2,1000,CH1);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800032a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800032e:	f000 fd8b 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,15000,CH2);
 8000332:	2201      	movs	r2, #1
 8000334:	f643 2198 	movw	r1, #15000	; 0x3a98
 8000338:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800033c:	f000 fd84 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,5000,CH3);
 8000340:	2202      	movs	r2, #2
 8000342:	f241 3188 	movw	r1, #5000	; 0x1388
 8000346:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800034a:	f000 fd7d 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,5000,CH4);
 800034e:	2203      	movs	r2, #3
 8000350:	f241 3188 	movw	r1, #5000	; 0x1388
 8000354:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000358:	f000 fd76 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(2000);
 800035c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000360:	f000 f890 	bl	8000484 <delay_ms>
		MCAL_TIMx_Set_Compare_Value(TIM2,3000,CH1);
 8000364:	2200      	movs	r2, #0
 8000366:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800036a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800036e:	f000 fd6b 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,10000,CH2);
 8000372:	2201      	movs	r2, #1
 8000374:	f242 7110 	movw	r1, #10000	; 0x2710
 8000378:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800037c:	f000 fd64 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,10000,CH3);
 8000380:	2202      	movs	r2, #2
 8000382:	f242 7110 	movw	r1, #10000	; 0x2710
 8000386:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800038a:	f000 fd5d 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,10000,CH4);
 800038e:	2203      	movs	r2, #3
 8000390:	f242 7110 	movw	r1, #10000	; 0x2710
 8000394:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000398:	f000 fd56 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(2000);
 800039c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003a0:	f000 f870 	bl	8000484 <delay_ms>
		MCAL_TIMx_Set_Compare_Value(TIM2,5000,CH1);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f241 3188 	movw	r1, #5000	; 0x1388
 80003aa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ae:	f000 fd4b 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,5000,CH2);
 80003b2:	2201      	movs	r2, #1
 80003b4:	f241 3188 	movw	r1, #5000	; 0x1388
 80003b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003bc:	f000 fd44 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,15000,CH3);
 80003c0:	2202      	movs	r2, #2
 80003c2:	f643 2198 	movw	r1, #15000	; 0x3a98
 80003c6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ca:	f000 fd3d 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,15000,CH4);
 80003ce:	2203      	movs	r2, #3
 80003d0:	f643 2198 	movw	r1, #15000	; 0x3a98
 80003d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003d8:	f000 fd36 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(2000);
 80003dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003e0:	f000 f850 	bl	8000484 <delay_ms>
		MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH1);
 80003e4:	2200      	movs	r2, #0
 80003e6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80003ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003ee:	f000 fd2b 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,0,CH2);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2100      	movs	r1, #0
 80003f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80003fa:	f000 fd25 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH3);
 80003fe:	2202      	movs	r2, #2
 8000400:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000404:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000408:	f000 fd1e 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,20000,CH4);
 800040c:	2203      	movs	r2, #3
 800040e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000412:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000416:	f000 fd17 	bl	8000e48 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(2000);
 800041a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800041e:	f000 f831 	bl	8000484 <delay_ms>
		MCAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000422:	e759      	b.n	80002d8 <main+0xf8>
 8000424:	40011000 	.word	0x40011000
 8000428:	40010c00 	.word	0x40010c00
 800042c:	40010800 	.word	0x40010800

08000430 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000430:	480d      	ldr	r0, [pc, #52]	; (8000468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000434:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480c      	ldr	r0, [pc, #48]	; (800046c <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490d      	ldr	r1, [pc, #52]	; (8000470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0d      	ldr	r2, [pc, #52]	; (8000474 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0a      	ldr	r2, [pc, #40]	; (8000478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0a      	ldr	r4, [pc, #40]	; (800047c <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800045e:	f000 fd51 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000462:	f7ff febd 	bl	80001e0 <main>

08000466 <LoopForever>:

LoopForever:
    b LoopForever
 8000466:	e7fe      	b.n	8000466 <LoopForever>
  ldr   r0, =_estack
 8000468:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800046c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000470:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000474:	08000f6c 	.word	0x08000f6c
  ldr r2, =_sbss
 8000478:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800047c:	200000a4 	.word	0x200000a4

08000480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000480:	e7fe      	b.n	8000480 <ADC1_2_IRQHandler>
	...

08000484 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM4->PSC=7999;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <delay_ms+0x50>)
 800048e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000492:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM4->ARR=ms-1;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	1e5a      	subs	r2, r3, #1
 8000498:	4b0e      	ldr	r3, [pc, #56]	; (80004d4 <delay_ms+0x50>)
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM4->CR1 |=1<<0;
 800049c:	4b0d      	ldr	r3, [pc, #52]	; (80004d4 <delay_ms+0x50>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a0c      	ldr	r2, [pc, #48]	; (80004d4 <delay_ms+0x50>)
 80004a2:	f043 0301 	orr.w	r3, r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register
	while(!(TIM4->SR & 1<<0));
 80004a8:	bf00      	nop
 80004aa:	4b0a      	ldr	r3, [pc, #40]	; (80004d4 <delay_ms+0x50>)
 80004ac:	691b      	ldr	r3, [r3, #16]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d0f9      	beq.n	80004aa <delay_ms+0x26>
	// clear flag
	TIM4->SR=0;
 80004b6:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <delay_ms+0x50>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM4->CR1 =0;
 80004bc:	4b05      	ldr	r3, [pc, #20]	; (80004d4 <delay_ms+0x50>)
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
	TIM4->CNT=0;
 80004c2:	4b04      	ldr	r3, [pc, #16]	; (80004d4 <delay_ms+0x50>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80004c8:	bf00      	nop
 80004ca:	370c      	adds	r7, #12
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bc80      	pop	{r7}
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40000800 	.word	0x40000800

080004d8 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI0_IRQHandler+0x1c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI0_IRQHandler+0x1c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI0_IRQHandler+0x20>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4798      	blx	r3
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000068 	.word	0x20000068

080004fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI1_IRQHandler+0x1c>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI1_IRQHandler+0x1c>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI1_IRQHandler+0x20>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4798      	blx	r3
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400
 800051c:	20000068 	.word	0x20000068

08000520 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI2_IRQHandler+0x1c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <EXTI2_IRQHandler+0x1c>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <EXTI2_IRQHandler+0x20>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	4798      	blx	r3
}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010400 	.word	0x40010400
 8000540:	20000068 	.word	0x20000068

08000544 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI3_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI3_IRQHandler+0x1c>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <EXTI3_IRQHandler+0x20>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4798      	blx	r3
}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	20000068 	.word	0x20000068

08000568 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI4_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI4_IRQHandler+0x1c>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI4_IRQHandler+0x20>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	4798      	blx	r3
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	20000068 	.word	0x20000068

0800058c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	2b00      	cmp	r3, #0
 800059a:	d008      	beq.n	80005ae <EXTI9_5_IRQHandler+0x22>
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6153      	str	r3, [r2, #20]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d008      	beq.n	80005cc <EXTI9_5_IRQHandler+0x40>
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d008      	beq.n	80005ea <EXTI9_5_IRQHandler+0x5e>
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e2:	6153      	str	r3, [r2, #20]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d008      	beq.n	8000608 <EXTI9_5_IRQHandler+0x7c>
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <EXTI9_5_IRQHandler+0x9a>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061e:	6153      	str	r3, [r2, #20]
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000068 	.word	0x20000068

08000634 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000638:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <EXTI15_10_IRQHandler+0x22>
 8000644:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a29      	ldr	r2, [pc, #164]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6153      	str	r3, [r2, #20]
 8000650:	4b28      	ldr	r3, [pc, #160]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 8000652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000654:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <EXTI15_10_IRQHandler+0x40>
 8000662:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a22      	ldr	r2, [pc, #136]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <EXTI15_10_IRQHandler+0x5e>
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a1a      	ldr	r2, [pc, #104]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d008      	beq.n	80006b0 <EXTI15_10_IRQHandler+0x7c>
 800069e:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ae:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <EXTI15_10_IRQHandler+0x9a>
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6153      	str	r3, [r2, #20]
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 80006ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006cc:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d008      	beq.n	80006ec <EXTI15_10_IRQHandler+0xb8>
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <EXTI15_10_IRQHandler+0xbc>)
 80006e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b03      	ldr	r3, [pc, #12]	; (80006f4 <EXTI15_10_IRQHandler+0xc0>)
 80006e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ea:	4798      	blx	r3
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40010400 	.word	0x40010400
 80006f4:	20000068 	.word	0x20000068

080006f8 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8000702:	88fb      	ldrh	r3, [r7, #6]
 8000704:	2b80      	cmp	r3, #128	; 0x80
 8000706:	d042      	beq.n	800078e <get_position+0x96>
 8000708:	2b80      	cmp	r3, #128	; 0x80
 800070a:	dc11      	bgt.n	8000730 <get_position+0x38>
 800070c:	2b08      	cmp	r3, #8
 800070e:	d036      	beq.n	800077e <get_position+0x86>
 8000710:	2b08      	cmp	r3, #8
 8000712:	dc06      	bgt.n	8000722 <get_position+0x2a>
 8000714:	2b02      	cmp	r3, #2
 8000716:	d02e      	beq.n	8000776 <get_position+0x7e>
 8000718:	2b04      	cmp	r3, #4
 800071a:	d02e      	beq.n	800077a <get_position+0x82>
 800071c:	2b01      	cmp	r3, #1
 800071e:	d028      	beq.n	8000772 <get_position+0x7a>
 8000720:	e047      	b.n	80007b2 <get_position+0xba>
 8000722:	2b20      	cmp	r3, #32
 8000724:	d02f      	beq.n	8000786 <get_position+0x8e>
 8000726:	2b40      	cmp	r3, #64	; 0x40
 8000728:	d02f      	beq.n	800078a <get_position+0x92>
 800072a:	2b10      	cmp	r3, #16
 800072c:	d029      	beq.n	8000782 <get_position+0x8a>
 800072e:	e040      	b.n	80007b2 <get_position+0xba>
 8000730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000734:	d033      	beq.n	800079e <get_position+0xa6>
 8000736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800073a:	dc09      	bgt.n	8000750 <get_position+0x58>
 800073c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000740:	d029      	beq.n	8000796 <get_position+0x9e>
 8000742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000746:	d028      	beq.n	800079a <get_position+0xa2>
 8000748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800074c:	d021      	beq.n	8000792 <get_position+0x9a>
 800074e:	e030      	b.n	80007b2 <get_position+0xba>
 8000750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000754:	d027      	beq.n	80007a6 <get_position+0xae>
 8000756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800075a:	dc03      	bgt.n	8000764 <get_position+0x6c>
 800075c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000760:	d01f      	beq.n	80007a2 <get_position+0xaa>
 8000762:	e026      	b.n	80007b2 <get_position+0xba>
 8000764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000768:	d01f      	beq.n	80007aa <get_position+0xb2>
 800076a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800076e:	d01e      	beq.n	80007ae <get_position+0xb6>
 8000770:	e01f      	b.n	80007b2 <get_position+0xba>
	{
	case GPIO_PIN_0 :
		return 0;
 8000772:	2300      	movs	r3, #0
 8000774:	e01e      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_1 :
		return 4;
 8000776:	2304      	movs	r3, #4
 8000778:	e01c      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_2 :
		return 8;
 800077a:	2308      	movs	r3, #8
 800077c:	e01a      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_3 :
		return 12;
 800077e:	230c      	movs	r3, #12
 8000780:	e018      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000782:	2310      	movs	r3, #16
 8000784:	e016      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_5 :
		return 20;
 8000786:	2314      	movs	r3, #20
 8000788:	e014      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_6 :
		return 24;
 800078a:	2318      	movs	r3, #24
 800078c:	e012      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_7 :
		return 28;
 800078e:	231c      	movs	r3, #28
 8000790:	e010      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000792:	2300      	movs	r3, #0
 8000794:	e00e      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000796:	2304      	movs	r3, #4
 8000798:	e00c      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_10 :
		return 8;
 800079a:	2308      	movs	r3, #8
 800079c:	e00a      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_11 :
		return 12;
 800079e:	230c      	movs	r3, #12
 80007a0:	e008      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_12 :
		return 16;
 80007a2:	2310      	movs	r3, #16
 80007a4:	e006      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_13 :
		return 20;
 80007a6:	2314      	movs	r3, #20
 80007a8:	e004      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_14 :
		return 24;
 80007aa:	2318      	movs	r3, #24
 80007ac:	e002      	b.n	80007b4 <get_position+0xbc>
		break;
	case GPIO_PIN_15 :
		return 28;
 80007ae:	231c      	movs	r3, #28
 80007b0:	e000      	b.n	80007b4 <get_position+0xbc>
		break;
	default:
		return 0;
 80007b2:	2300      	movs	r3, #0
	}
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 80007be:	b590      	push	{r4, r7, lr}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	6078      	str	r0, [r7, #4]
 80007c6:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2bff      	cmp	r3, #255	; 0xff
 80007d6:	d801      	bhi.n	80007dc <MCAL_GPIO_Init+0x1e>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	e001      	b.n	80007e0 <MCAL_GPIO_Init+0x22>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3304      	adds	r3, #4
 80007e0:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	881b      	ldrh	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff ff86 	bl	80006f8 <get_position>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	230f      	movs	r3, #15
 80007f2:	4093      	lsls	r3, r2
 80007f4:	43da      	mvns	r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	401a      	ands	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	789b      	ldrb	r3, [r3, #2]
 8000804:	2b07      	cmp	r3, #7
 8000806:	d00b      	beq.n	8000820 <MCAL_GPIO_Init+0x62>
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	789b      	ldrb	r3, [r3, #2]
 800080c:	2b06      	cmp	r3, #6
 800080e:	d007      	beq.n	8000820 <MCAL_GPIO_Init+0x62>
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	789b      	ldrb	r3, [r3, #2]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d003      	beq.n	8000820 <MCAL_GPIO_Init+0x62>
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	2b04      	cmp	r3, #4
 800081e:	d10e      	bne.n	800083e <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	3b04      	subs	r3, #4
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	b25a      	sxtb	r2, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	b25b      	sxtb	r3, r3
 8000830:	4313      	orrs	r3, r2
 8000832:	b25b      	sxtb	r3, r3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	f003 030f 	and.w	r3, r3, #15
 800083a:	73fb      	strb	r3, [r7, #15]
 800083c:	e02c      	b.n	8000898 <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	789b      	ldrb	r3, [r3, #2]
 8000842:	2b01      	cmp	r3, #1
 8000844:	d003      	beq.n	800084e <MCAL_GPIO_Init+0x90>
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	789b      	ldrb	r3, [r3, #2]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d107      	bne.n	800085e <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	789b      	ldrb	r3, [r3, #2]
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f003 030f 	and.w	r3, r3, #15
 800085a:	73fb      	strb	r3, [r7, #15]
 800085c:	e01c      	b.n	8000898 <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	789b      	ldrb	r3, [r3, #2]
 8000862:	2b08      	cmp	r3, #8
 8000864:	d102      	bne.n	800086c <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8000866:	2304      	movs	r3, #4
 8000868:	73fb      	strb	r3, [r7, #15]
 800086a:	e015      	b.n	8000898 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 800086c:	2308      	movs	r3, #8
 800086e:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	789b      	ldrb	r3, [r3, #2]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d107      	bne.n	8000888 <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	8812      	ldrh	r2, [r2, #0]
 8000880:	431a      	orrs	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	e007      	b.n	8000898 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	8812      	ldrh	r2, [r2, #0]
 8000890:	43d2      	mvns	r2, r2
 8000892:	401a      	ands	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8000898:	7bfc      	ldrb	r4, [r7, #15]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	881b      	ldrh	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff2a 	bl	80006f8 <get_position>
 80008a4:	4603      	mov	r3, r0
 80008a6:	fa04 f203 	lsl.w	r2, r4, r3
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	431a      	orrs	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd90      	pop	{r4, r7, pc}

080008bc <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	807b      	strh	r3, [r7, #2]
 80008c8:	4613      	mov	r3, r2
 80008ca:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 80008cc:	787b      	ldrb	r3, [r7, #1]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d003      	beq.n	80008da <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 80008d2:	887a      	ldrh	r2, [r7, #2]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 80008d8:	e002      	b.n	80008e0 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 80008da:	887a      	ldrh	r2, [r7, #2]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	615a      	str	r2, [r3, #20]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <MCAL_GPIO_TogglePin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 80008ea:	b480      	push	{r7}
 80008ec:	b083      	sub	sp, #12
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=pinNumber;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	68da      	ldr	r2, [r3, #12]
 80008fa:	887b      	ldrh	r3, [r7, #2]
 80008fc:	405a      	eors	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	60da      	str	r2, [r3, #12]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr

0800090c <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	460b      	mov	r3, r1
 8000916:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a30      	ldr	r2, [pc, #192]	; (80009dc <Slave_Status+0xd0>)
 800091c:	4293      	cmp	r3, r2
 800091e:	bf14      	ite	ne
 8000920:	2301      	movne	r3, #1
 8000922:	2300      	moveq	r3, #0
 8000924:	b2db      	uxtb	r3, r3
 8000926:	73fb      	strb	r3, [r7, #15]

	switch(state)
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d851      	bhi.n	80009d2 <Slave_Status+0xc6>
 800092e:	a201      	add	r2, pc, #4	; (adr r2, 8000934 <Slave_Status+0x28>)
 8000930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000934:	08000945 	.word	0x08000945
 8000938:	08000969 	.word	0x08000969
 800093c:	08000981 	.word	0x08000981
 8000940:	080009a5 	.word	0x080009a5
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	f003 0304 	and.w	r3, r3, #4
 800094c:	2b00      	cmp	r3, #0
 800094e:	d03b      	beq.n	80009c8 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	4923      	ldr	r1, [pc, #140]	; (80009e0 <Slave_Status+0xd4>)
 8000954:	4613      	mov	r3, r2
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	1a9b      	subs	r3, r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	440b      	add	r3, r1
 800095e:	3318      	adds	r3, #24
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2000      	movs	r0, #0
 8000964:	4798      	blx	r3
		}
		break;
 8000966:	e02f      	b.n	80009c8 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8000968:	7bfa      	ldrb	r2, [r7, #15]
 800096a:	491d      	ldr	r1, [pc, #116]	; (80009e0 <Slave_Status+0xd4>)
 800096c:	4613      	mov	r3, r2
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	1a9b      	subs	r3, r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	3318      	adds	r3, #24
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2001      	movs	r0, #1
 800097c:	4798      	blx	r3
		break;
 800097e:	e028      	b.n	80009d2 <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	2b00      	cmp	r3, #0
 800098a:	d01f      	beq.n	80009cc <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	4914      	ldr	r1, [pc, #80]	; (80009e0 <Slave_Status+0xd4>)
 8000990:	4613      	mov	r3, r2
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	1a9b      	subs	r3, r3, r2
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	440b      	add	r3, r1
 800099a:	3318      	adds	r3, #24
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	2002      	movs	r0, #2
 80009a0:	4798      	blx	r3
		}
		break;
 80009a2:	e013      	b.n	80009cc <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10f      	bne.n	80009d0 <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 80009b0:	7bfa      	ldrb	r2, [r7, #15]
 80009b2:	490b      	ldr	r1, [pc, #44]	; (80009e0 <Slave_Status+0xd4>)
 80009b4:	4613      	mov	r3, r2
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	1a9b      	subs	r3, r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	3318      	adds	r3, #24
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2003      	movs	r0, #3
 80009c4:	4798      	blx	r3
		}
		break;
 80009c6:	e003      	b.n	80009d0 <Slave_Status+0xc4>
		break;
 80009c8:	bf00      	nop
 80009ca:	e002      	b.n	80009d2 <Slave_Status+0xc6>
		break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <Slave_Status+0xc6>
		break;
 80009d0:	bf00      	nop
	}
}
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40005400 	.word	0x40005400
 80009e0:	2000001c 	.word	0x2000001c

080009e4 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 80009ee:	4b36      	ldr	r3, [pc, #216]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 80009f8:	4b33      	ldr	r3, [pc, #204]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a00:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8000a02:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a0a:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00a      	beq.n	8000a28 <I2C1_EV_IRQHandler+0x44>
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d007      	beq.n	8000a28 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8000a20:	2100      	movs	r1, #0
 8000a22:	4829      	ldr	r0, [pc, #164]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a24:	f7ff ff72 	bl	800090c <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 8000a28:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a2a:	695b      	ldr	r3, [r3, #20]
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d012      	beq.n	8000a5e <I2C1_EV_IRQHandler+0x7a>
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00f      	beq.n	8000a5e <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d109      	bne.n	8000a5e <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 8000a56:	2101      	movs	r1, #1
 8000a58:	481b      	ldr	r0, [pc, #108]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a5a:	f7ff ff57 	bl	800090c <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a66:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00f      	beq.n	8000a8e <I2C1_EV_IRQHandler+0xaa>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00c      	beq.n	8000a8e <I2C1_EV_IRQHandler+0xaa>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d009      	beq.n	8000a8e <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d103      	bne.n	8000a8e <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000a86:	2102      	movs	r1, #2
 8000a88:	480f      	ldr	r0, [pc, #60]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a8a:	f7ff ff3f 	bl	800090c <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a96:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00f      	beq.n	8000abe <I2C1_EV_IRQHandler+0xda>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00c      	beq.n	8000abe <I2C1_EV_IRQHandler+0xda>
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d009      	beq.n	8000abe <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d103      	bne.n	8000abe <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <I2C1_EV_IRQHandler+0xe4>)
 8000aba:	f7ff ff27 	bl	800090c <Slave_Status>
		}
	}
}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40005400 	.word	0x40005400

08000acc <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <SPI1_IRQHandler+0x54>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	085b      	lsrs	r3, r3, #1
 8000ad8:	f003 0301 	and.w	r3, r3, #1
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	793b      	ldrb	r3, [r7, #4]
 8000ae0:	f362 0300 	bfi	r3, r2, #0, #1
 8000ae4:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <SPI1_IRQHandler+0x54>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	793b      	ldrb	r3, [r7, #4]
 8000af2:	f362 0341 	bfi	r3, r2, #1, #1
 8000af6:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <SPI1_IRQHandler+0x54>)
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	091b      	lsrs	r3, r3, #4
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	793b      	ldrb	r3, [r7, #4]
 8000b06:	f362 0382 	bfi	r3, r2, #2, #1
 8000b0a:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <SPI1_IRQHandler+0x58>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	7938      	ldrb	r0, [r7, #4]
 8000b14:	4798      	blx	r3
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40013000 	.word	0x40013000
 8000b24:	20000054 	.word	0x20000054

08000b28 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8000b2e:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <SPI2_IRQHandler+0x54>)
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	085b      	lsrs	r3, r3, #1
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	793b      	ldrb	r3, [r7, #4]
 8000b3c:	f362 0300 	bfi	r3, r2, #0, #1
 8000b40:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <SPI2_IRQHandler+0x54>)
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	793b      	ldrb	r3, [r7, #4]
 8000b4e:	f362 0341 	bfi	r3, r2, #1, #1
 8000b52:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <SPI2_IRQHandler+0x54>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	b2da      	uxtb	r2, r3
 8000b60:	793b      	ldrb	r3, [r7, #4]
 8000b62:	f362 0382 	bfi	r3, r2, #2, #1
 8000b66:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <SPI2_IRQHandler+0x58>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	7938      	ldrb	r0, [r7, #4]
 8000b70:	4798      	blx	r3
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40003800 	.word	0x40003800
 8000b80:	20000054 	.word	0x20000054

08000b84 <MCAL_TIMx_Init>:
* @param [in] 		-Chan:  specified channel from 1 to 4
* @retval 			-none
* Note				-Support Fast PWM and Normal ( delay mode )
*/
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	2281      	movs	r2, #129	; 0x81
 8000b96:	601a      	str	r2, [r3, #0]
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	f000 80d4 	beq.w	8000d4a <MCAL_TIMx_Init+0x1c6>
	{
		// set pin
		if(TIMx==TIM2)
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba8:	d131      	bne.n	8000c0e <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 8000baa:	4ba1      	ldr	r3, [pc, #644]	; (8000e30 <MCAL_TIMx_Init+0x2ac>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4aa0      	ldr	r2, [pc, #640]	; (8000e30 <MCAL_TIMx_Init+0x2ac>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d817      	bhi.n	8000bf4 <MCAL_TIMx_Init+0x70>
 8000bc4:	a201      	add	r2, pc, #4	; (adr r2, 8000bcc <MCAL_TIMx_Init+0x48>)
 8000bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bca:	bf00      	nop
 8000bcc:	08000bdd 	.word	0x08000bdd
 8000bd0:	08000be3 	.word	0x08000be3
 8000bd4:	08000be9 	.word	0x08000be9
 8000bd8:	08000bef 	.word	0x08000bef
			{
			case CH1 :
				{
					//set pin outpt
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	82bb      	strh	r3, [r7, #20]
					break;
 8000be0:	e008      	b.n	8000bf4 <MCAL_TIMx_Init+0x70>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8000be2:	2302      	movs	r3, #2
 8000be4:	82bb      	strh	r3, [r7, #20]
					break;
 8000be6:	e005      	b.n	8000bf4 <MCAL_TIMx_Init+0x70>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_2 ;
 8000be8:	2304      	movs	r3, #4
 8000bea:	82bb      	strh	r3, [r7, #20]
					break;
 8000bec:	e002      	b.n	8000bf4 <MCAL_TIMx_Init+0x70>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_3 ;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	82bb      	strh	r3, [r7, #20]
					break;
 8000bf2:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	488e      	ldr	r0, [pc, #568]	; (8000e34 <MCAL_TIMx_Init+0x2b0>)
 8000bfc:	f7ff fddf 	bl	80007be <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8000c00:	4b8d      	ldr	r3, [pc, #564]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a8c      	ldr	r2, [pc, #560]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	e072      	b.n	8000cf4 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4a8a      	ldr	r2, [pc, #552]	; (8000e3c <MCAL_TIMx_Init+0x2b8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d13d      	bne.n	8000c92 <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000c16:	2306      	movs	r3, #6
 8000c18:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d82f      	bhi.n	8000c84 <MCAL_TIMx_Init+0x100>
 8000c24:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <MCAL_TIMx_Init+0xa8>)
 8000c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d
 8000c30:	08000c4f 	.word	0x08000c4f
 8000c34:	08000c61 	.word	0x08000c61
 8000c38:	08000c73 	.word	0x08000c73
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8000c3c:	2340      	movs	r3, #64	; 0x40
 8000c3e:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	487b      	ldr	r0, [pc, #492]	; (8000e34 <MCAL_TIMx_Init+0x2b0>)
 8000c48:	f7ff fdb9 	bl	80007be <MCAL_GPIO_Init>
					break;
 8000c4c:	e01a      	b.n	8000c84 <MCAL_TIMx_Init+0x100>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	4619      	mov	r1, r3
 8000c58:	4876      	ldr	r0, [pc, #472]	; (8000e34 <MCAL_TIMx_Init+0x2b0>)
 8000c5a:	f7ff fdb0 	bl	80007be <MCAL_GPIO_Init>
					break;
 8000c5e:	e011      	b.n	8000c84 <MCAL_TIMx_Init+0x100>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8000c60:	2301      	movs	r3, #1
 8000c62:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4875      	ldr	r0, [pc, #468]	; (8000e40 <MCAL_TIMx_Init+0x2bc>)
 8000c6c:	f7ff fda7 	bl	80007be <MCAL_GPIO_Init>
					break;
 8000c70:	e008      	b.n	8000c84 <MCAL_TIMx_Init+0x100>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8000c72:	2302      	movs	r3, #2
 8000c74:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4870      	ldr	r0, [pc, #448]	; (8000e40 <MCAL_TIMx_Init+0x2bc>)
 8000c7e:	f7ff fd9e 	bl	80007be <MCAL_GPIO_Init>
					break;
 8000c82:	bf00      	nop
				}
			}
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8000c84:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a6b      	ldr	r2, [pc, #428]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e030      	b.n	8000cf4 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	4a6b      	ldr	r2, [pc, #428]	; (8000e44 <MCAL_TIMx_Init+0x2c0>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12c      	bne.n	8000cf4 <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000c9a:	2306      	movs	r3, #6
 8000c9c:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d819      	bhi.n	8000cdc <MCAL_TIMx_Init+0x158>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <MCAL_TIMx_Init+0x12c>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cc1 	.word	0x08000cc1
 8000cb4:	08000cc7 	.word	0x08000cc7
 8000cb8:	08000ccd 	.word	0x08000ccd
 8000cbc:	08000cd5 	.word	0x08000cd5
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8000cc0:	2340      	movs	r3, #64	; 0x40
 8000cc2:	82bb      	strh	r3, [r7, #20]
					break;
 8000cc4:	e00a      	b.n	8000cdc <MCAL_TIMx_Init+0x158>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8000cc6:	2380      	movs	r3, #128	; 0x80
 8000cc8:	82bb      	strh	r3, [r7, #20]
					break;
 8000cca:	e007      	b.n	8000cdc <MCAL_TIMx_Init+0x158>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_8 ;
 8000ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd0:	82bb      	strh	r3, [r7, #20]
					break;
 8000cd2:	e003      	b.n	8000cdc <MCAL_TIMx_Init+0x158>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_9 ;
 8000cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd8:	82bb      	strh	r3, [r7, #20]

					break;
 8000cda:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4857      	ldr	r0, [pc, #348]	; (8000e40 <MCAL_TIMx_Init+0x2bc>)
 8000ce4:	f7ff fd6b 	bl	80007be <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ30_TIM4_Disable();
 8000ce8:	4b53      	ldr	r3, [pc, #332]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a52      	ldr	r2, [pc, #328]	; (8000e38 <MCAL_TIMx_Init+0x2b4>)
 8000cee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000cf2:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d852      	bhi.n	8000da0 <MCAL_TIMx_Init+0x21c>
 8000cfa:	a201      	add	r2, pc, #4	; (adr r2, 8000d00 <MCAL_TIMx_Init+0x17c>)
 8000cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d00:	08000d11 	.word	0x08000d11
 8000d04:	08000d1f 	.word	0x08000d1f
 8000d08:	08000d2d 	.word	0x08000d2d
 8000d0c:	08000d3b 	.word	0x08000d3b
		{
		case CH1 :
			{
				TIMx->CCMR1 |=15<<3;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	619a      	str	r2, [r3, #24]
				break;
 8000d1c:	e040      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH2 :
			{
				TIMx->CCMR1 |=15<<11;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	619a      	str	r2, [r3, #24]
				break;
 8000d2a:	e039      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH3 :
			{
				TIMx->CCMR2 |=15<<3;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	69db      	ldr	r3, [r3, #28]
 8000d30:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	61da      	str	r2, [r3, #28]
				break;
 8000d38:	e032      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH4 :
			{
				TIMx->CCMR2 |=15<<11;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	61da      	str	r2, [r3, #28]
				break;
 8000d46:	bf00      	nop
 8000d48:	e02a      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d827      	bhi.n	8000da0 <MCAL_TIMx_Init+0x21c>
 8000d50:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <MCAL_TIMx_Init+0x1d4>)
 8000d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d56:	bf00      	nop
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d77 	.word	0x08000d77
 8000d60:	08000d85 	.word	0x08000d85
 8000d64:	08000d93 	.word	0x08000d93
		{
		case CH1 :
			{
				TIMx->CCMR1 &=~(15<<3);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	699b      	ldr	r3, [r3, #24]
 8000d6c:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	619a      	str	r2, [r3, #24]
				break;
 8000d74:	e014      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH2 :
			{
				TIMx->CCMR1 &=~(15<<11);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	619a      	str	r2, [r3, #24]
				break;
 8000d82:	e00d      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH3 :
			{
				TIMx->CCMR2 &=~(15<<3);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	61da      	str	r2, [r3, #28]
				break;
 8000d90:	e006      	b.n	8000da0 <MCAL_TIMx_Init+0x21c>
			}
		case CH4 :
			{
				TIMx->CCMR2  &=~(15<<11);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	61da      	str	r2, [r3, #28]
				break;
 8000d9e:	bf00      	nop
			}
		}
	}
	//output polarity and  output enable
	switch(Chan)
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d836      	bhi.n	8000e14 <MCAL_TIMx_Init+0x290>
 8000da6:	a201      	add	r2, pc, #4	; (adr r2, 8000dac <MCAL_TIMx_Init+0x228>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000dbd 	.word	0x08000dbd
 8000db0:	08000dd3 	.word	0x08000dd3
 8000db4:	08000de9 	.word	0x08000de9
 8000db8:	08000dff 	.word	0x08000dff
	{
	case CH1 :
		{
			TIMx->CCER|=3<<0;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	f043 0203 	orr.w	r2, r3, #3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR1 = 10000;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000dd0:	e020      	b.n	8000e14 <MCAL_TIMx_Init+0x290>
		}
	case CH2 :
		{
			TIMx->CCER|=3<<4;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	6a1b      	ldr	r3, [r3, #32]
 8000dd6:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR2 = 10000;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	f242 7210 	movw	r2, #10000	; 0x2710
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000de6:	e015      	b.n	8000e14 <MCAL_TIMx_Init+0x290>
		}
	case CH3 :
		{
			TIMx->CCER|=3<<8;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR3 = 10000;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dfa:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000dfc:	e00a      	b.n	8000e14 <MCAL_TIMx_Init+0x290>
		}
	case CH4 :
		{
			TIMx->CCER|=3<<12;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR4 = 10000;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000e12:	bf00      	nop
		}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	629a      	str	r2, [r3, #40]	; 0x28
	//set init top value 20000
	TIMx->ARR = 20000;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	e000e180 	.word	0xe000e180
 8000e3c:	40000400 	.word	0x40000400
 8000e40:	40010c00 	.word	0x40010c00
 8000e44:	40000800 	.word	0x40000800

08000e48 <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]

	switch(Chan)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d81a      	bhi.n	8000e94 <MCAL_TIMx_Set_Compare_Value+0x4c>
 8000e5e:	a201      	add	r2, pc, #4	; (adr r2, 8000e64 <MCAL_TIMx_Set_Compare_Value+0x1c>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000e7d 	.word	0x08000e7d
 8000e6c:	08000e85 	.word	0x08000e85
 8000e70:	08000e8d 	.word	0x08000e8d
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 8000e74:	887a      	ldrh	r2, [r7, #2]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e7a:	e00b      	b.n	8000e94 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 8000e7c:	887a      	ldrh	r2, [r7, #2]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000e82:	e007      	b.n	8000e94 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 8000e84:	887a      	ldrh	r2, [r7, #2]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e8a:	e003      	b.n	8000e94 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 8000e8c:	887a      	ldrh	r2, [r7, #2]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000e92:	bf00      	nop
		}
	}
	TIMx->EGR |=1<<0;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	f043 0201 	orr.w	r2, r3, #1
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	615a      	str	r2, [r3, #20]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MCAL_TIMx_Set_TOP_Value>:
* @param [in] 		-TIMx:  specified TIMx x=[ 2 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_TOP_Value( TIMx_TypeDef* TIMx  , uint16_t TOP_Value )
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	807b      	strh	r3, [r7, #2]
	TIMx->ARR=TOP_Value;
 8000eb8:	887a      	ldrh	r2, [r7, #2]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <USART1_IRQHandler+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68db      	ldr	r3, [r3, #12]
 8000ed2:	4798      	blx	r3
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2000005c 	.word	0x2000005c

08000edc <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <USART2_IRQHandler+0x10>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	4798      	blx	r3
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000005c 	.word	0x2000005c

08000ef0 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <USART3_IRQHandler+0x10>)
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	4798      	blx	r3
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000005c 	.word	0x2000005c

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	2500      	movs	r5, #0
 8000f08:	4e0c      	ldr	r6, [pc, #48]	; (8000f3c <__libc_init_array+0x38>)
 8000f0a:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0c:	1ba4      	subs	r4, r4, r6
 8000f0e:	10a4      	asrs	r4, r4, #2
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	f000 f81a 	bl	8000f4c <_init>
 8000f18:	2500      	movs	r5, #0
 8000f1a:	4e0a      	ldr	r6, [pc, #40]	; (8000f44 <__libc_init_array+0x40>)
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <__libc_init_array+0x44>)
 8000f1e:	1ba4      	subs	r4, r4, r6
 8000f20:	10a4      	asrs	r4, r4, #2
 8000f22:	42a5      	cmp	r5, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f2c:	4798      	blx	r3
 8000f2e:	3501      	adds	r5, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f36:	4798      	blx	r3
 8000f38:	3501      	adds	r5, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08000f64 	.word	0x08000f64
 8000f40:	08000f64 	.word	0x08000f64
 8000f44:	08000f64 	.word	0x08000f64
 8000f48:	08000f68 	.word	0x08000f68

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
