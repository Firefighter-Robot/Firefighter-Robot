
Firefighter-Robot_Code.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ef0  08000ef8  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  4 .ARM          00000000  08000ef0  08000ef0  00010ef8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ef0  08000ef8  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ef0  08000ef0  00010ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ef4  08000ef4  00010ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010ef8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000000  08000ef8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000ef8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f1e  00000000  00000000  00010f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d90  00000000  00000000  00013e3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001658  00000000  00000000  00014bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000348  00000000  00000000  00016228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000002c0  00000000  00000000  00016570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000396e  00000000  00000000  00016830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000448f  00000000  00000000  0001a19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dae1  00000000  00000000  0001e62d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002c10e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b50  00000000  00000000  0002c160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ed8 	.word	0x08000ed8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ed8 	.word	0x08000ed8

08000170 <Set_GPIO_pins>:
//Motor3_Front     Back_Left_Motor                GPIO_PIN_3   PORTB
//Motor3_Back      Back_Left_Motor                GPIO_PIN_4   PORTB
//Motor4_Front     Back_Right_Motor               GPIO_PIN_7   PORTB
//Motor4_Back      Back_Right_Motor               GPIO_PIN_8   PORTB
void Set_GPIO_pins(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000174:	4b22      	ldr	r3, [pc, #136]	; (8000200 <Set_GPIO_pins+0x90>)
 8000176:	2204      	movs	r2, #4
 8000178:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <Set_GPIO_pins+0x90>)
 800017c:	2201      	movs	r2, #1
 800017e:	70da      	strb	r2, [r3, #3]

	// Front_Left_Motor    Motor1_Front 
	GPIO_Pin.pinNumber = Motor1_Front;
 8000180:	4b1f      	ldr	r3, [pc, #124]	; (8000200 <Set_GPIO_pins+0x90>)
 8000182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000186:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA,&GPIO_Pin);
 8000188:	491d      	ldr	r1, [pc, #116]	; (8000200 <Set_GPIO_pins+0x90>)
 800018a:	481e      	ldr	r0, [pc, #120]	; (8000204 <Set_GPIO_pins+0x94>)
 800018c:	f000 fb12 	bl	80007b4 <MCAL_GPIO_Init>

	// Front_Left_Motor    Motor1_Back 
	GPIO_Pin.pinNumber = Motor1_Back;
 8000190:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <Set_GPIO_pins+0x90>)
 8000192:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000196:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA,&GPIO_Pin);
 8000198:	4919      	ldr	r1, [pc, #100]	; (8000200 <Set_GPIO_pins+0x90>)
 800019a:	481a      	ldr	r0, [pc, #104]	; (8000204 <Set_GPIO_pins+0x94>)
 800019c:	f000 fb0a 	bl	80007b4 <MCAL_GPIO_Init>

	// Front_Right_Motor	Motor2_Front
	GPIO_Pin.pinNumber = Motor2_Front;
 80001a0:	4b17      	ldr	r3, [pc, #92]	; (8000200 <Set_GPIO_pins+0x90>)
 80001a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80001a6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA,&GPIO_Pin);
 80001a8:	4915      	ldr	r1, [pc, #84]	; (8000200 <Set_GPIO_pins+0x90>)
 80001aa:	4816      	ldr	r0, [pc, #88]	; (8000204 <Set_GPIO_pins+0x94>)
 80001ac:	f000 fb02 	bl	80007b4 <MCAL_GPIO_Init>

	// Front_Right_Motor	Motor2_Back	
	GPIO_Pin.pinNumber = Motor2_Back;
 80001b0:	4b13      	ldr	r3, [pc, #76]	; (8000200 <Set_GPIO_pins+0x90>)
 80001b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80001b6:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOA,&GPIO_Pin);
 80001b8:	4911      	ldr	r1, [pc, #68]	; (8000200 <Set_GPIO_pins+0x90>)
 80001ba:	4812      	ldr	r0, [pc, #72]	; (8000204 <Set_GPIO_pins+0x94>)
 80001bc:	f000 fafa 	bl	80007b4 <MCAL_GPIO_Init>

	// Back_Left_Motor	Motor3_Front
	GPIO_Pin.pinNumber = Motor3_Front;
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <Set_GPIO_pins+0x90>)
 80001c2:	2208      	movs	r2, #8
 80001c4:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 80001c6:	490e      	ldr	r1, [pc, #56]	; (8000200 <Set_GPIO_pins+0x90>)
 80001c8:	480f      	ldr	r0, [pc, #60]	; (8000208 <Set_GPIO_pins+0x98>)
 80001ca:	f000 faf3 	bl	80007b4 <MCAL_GPIO_Init>

	// Back_Left_Motor	Motor3_Back	
	GPIO_Pin.pinNumber = Motor3_Back;
 80001ce:	4b0c      	ldr	r3, [pc, #48]	; (8000200 <Set_GPIO_pins+0x90>)
 80001d0:	2210      	movs	r2, #16
 80001d2:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 80001d4:	490a      	ldr	r1, [pc, #40]	; (8000200 <Set_GPIO_pins+0x90>)
 80001d6:	480c      	ldr	r0, [pc, #48]	; (8000208 <Set_GPIO_pins+0x98>)
 80001d8:	f000 faec 	bl	80007b4 <MCAL_GPIO_Init>

	// Back_Right_Motor	Motor4_Front
	GPIO_Pin.pinNumber = Motor4_Front;
 80001dc:	4b08      	ldr	r3, [pc, #32]	; (8000200 <Set_GPIO_pins+0x90>)
 80001de:	2280      	movs	r2, #128	; 0x80
 80001e0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 80001e2:	4907      	ldr	r1, [pc, #28]	; (8000200 <Set_GPIO_pins+0x90>)
 80001e4:	4808      	ldr	r0, [pc, #32]	; (8000208 <Set_GPIO_pins+0x98>)
 80001e6:	f000 fae5 	bl	80007b4 <MCAL_GPIO_Init>

	// Back_Right_Motor	Motor4_Back	
	GPIO_Pin.pinNumber = Motor4_Back;
 80001ea:	4b05      	ldr	r3, [pc, #20]	; (8000200 <Set_GPIO_pins+0x90>)
 80001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80001f0:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);	
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <Set_GPIO_pins+0x90>)
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <Set_GPIO_pins+0x98>)
 80001f6:	f000 fadd 	bl	80007b4 <MCAL_GPIO_Init>

}
 80001fa:	bf00      	nop
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	2000002c 	.word	0x2000002c
 8000204:	40010800 	.word	0x40010800
 8000208:	40010c00 	.word	0x40010c00

0800020c <HAL_DC_Motors_init>:



void HAL_DC_Motors_init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	Timer2.MODE = TIMx_MODE_PWM1;
 8000210:	4b16      	ldr	r3, [pc, #88]	; (800026c <HAL_DC_Motors_init+0x60>)
 8000212:	2200      	movs	r2, #0
 8000214:	801a      	strh	r2, [r3, #0]
	Timer2.COUNT_MODE = TIMx_COUNT_MODE_UP;
 8000216:	4b15      	ldr	r3, [pc, #84]	; (800026c <HAL_DC_Motors_init+0x60>)
 8000218:	2200      	movs	r2, #0
 800021a:	805a      	strh	r2, [r3, #2]
	Timer2.Prescalers =7;      // 1M
 800021c:	4b13      	ldr	r3, [pc, #76]	; (800026c <HAL_DC_Motors_init+0x60>)
 800021e:	2207      	movs	r2, #7
 8000220:	809a      	strh	r2, [r3, #4]
	// init 4 Channels with 0 duty cycle
	Timer2.TopValue = 20000;
 8000222:	4b12      	ldr	r3, [pc, #72]	; (800026c <HAL_DC_Motors_init+0x60>)
 8000224:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000228:	609a      	str	r2, [r3, #8]
	Timer2.CompareValue = 10000;
 800022a:	4b10      	ldr	r3, [pc, #64]	; (800026c <HAL_DC_Motors_init+0x60>)
 800022c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000230:	60da      	str	r2, [r3, #12]

	// set Channel 1 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Front_Left_Motor);
 8000232:	2200      	movs	r2, #0
 8000234:	490d      	ldr	r1, [pc, #52]	; (800026c <HAL_DC_Motors_init+0x60>)
 8000236:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800023a:	f000 fc77 	bl	8000b2c <MCAL_TIMx_Init>

	// set Channel 2 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Front_Right_Motor);
 800023e:	2201      	movs	r2, #1
 8000240:	490a      	ldr	r1, [pc, #40]	; (800026c <HAL_DC_Motors_init+0x60>)
 8000242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000246:	f000 fc71 	bl	8000b2c <MCAL_TIMx_Init>

	// set Channel 3 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Back_Left_Motor);
 800024a:	2202      	movs	r2, #2
 800024c:	4907      	ldr	r1, [pc, #28]	; (800026c <HAL_DC_Motors_init+0x60>)
 800024e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000252:	f000 fc6b 	bl	8000b2c <MCAL_TIMx_Init>

	// set Channel 4 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Back_Right_Motor);
 8000256:	2203      	movs	r2, #3
 8000258:	4904      	ldr	r1, [pc, #16]	; (800026c <HAL_DC_Motors_init+0x60>)
 800025a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800025e:	f000 fc65 	bl	8000b2c <MCAL_TIMx_Init>


	Set_GPIO_pins();
 8000262:	f7ff ff85 	bl	8000170 <Set_GPIO_pins>
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000001c 	.word	0x2000001c

08000270 <Car_Move>:
}



void Car_Move(uint16_t speed , char distance)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	460a      	mov	r2, r1
 800027a:	80fb      	strh	r3, [r7, #6]
 800027c:	4613      	mov	r3, r2
 800027e:	717b      	strb	r3, [r7, #5]
//	MCAL_GPIO_WritePin(GPIOB,Motor4_Front,GPIO_PIN_SET);
//	MCAL_GPIO_WritePin(GPIOB,Motor4_Back,GPIO_PIN_RESET);


	// by iteration set duty cycle to specific speed
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Front_Left_Motor);
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	461a      	mov	r2, r3
 8000284:	0092      	lsls	r2, r2, #2
 8000286:	4413      	add	r3, r2
 8000288:	461a      	mov	r2, r3
 800028a:	0091      	lsls	r1, r2, #2
 800028c:	461a      	mov	r2, r3
 800028e:	460b      	mov	r3, r1
 8000290:	4413      	add	r3, r2
 8000292:	00db      	lsls	r3, r3, #3
 8000294:	b29b      	uxth	r3, r3
 8000296:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 800029a:	3320      	adds	r3, #32
 800029c:	b29b      	uxth	r3, r3
 800029e:	2200      	movs	r2, #0
 80002a0:	4619      	mov	r1, r3
 80002a2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002a6:	f000 fda1 	bl	8000dec <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Front_Right_Motor);
 80002aa:	88fb      	ldrh	r3, [r7, #6]
 80002ac:	461a      	mov	r2, r3
 80002ae:	0092      	lsls	r2, r2, #2
 80002b0:	4413      	add	r3, r2
 80002b2:	461a      	mov	r2, r3
 80002b4:	0091      	lsls	r1, r2, #2
 80002b6:	461a      	mov	r2, r3
 80002b8:	460b      	mov	r3, r1
 80002ba:	4413      	add	r3, r2
 80002bc:	00db      	lsls	r3, r3, #3
 80002be:	b29b      	uxth	r3, r3
 80002c0:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 80002c4:	3320      	adds	r3, #32
 80002c6:	b29b      	uxth	r3, r3
 80002c8:	2201      	movs	r2, #1
 80002ca:	4619      	mov	r1, r3
 80002cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002d0:	f000 fd8c 	bl	8000dec <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Back_Left_Motor);
 80002d4:	88fb      	ldrh	r3, [r7, #6]
 80002d6:	461a      	mov	r2, r3
 80002d8:	0092      	lsls	r2, r2, #2
 80002da:	4413      	add	r3, r2
 80002dc:	461a      	mov	r2, r3
 80002de:	0091      	lsls	r1, r2, #2
 80002e0:	461a      	mov	r2, r3
 80002e2:	460b      	mov	r3, r1
 80002e4:	4413      	add	r3, r2
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	b29b      	uxth	r3, r3
 80002ea:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 80002ee:	3320      	adds	r3, #32
 80002f0:	b29b      	uxth	r3, r3
 80002f2:	2202      	movs	r2, #2
 80002f4:	4619      	mov	r1, r3
 80002f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002fa:	f000 fd77 	bl	8000dec <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Back_Right_Motor);
 80002fe:	88fb      	ldrh	r3, [r7, #6]
 8000300:	461a      	mov	r2, r3
 8000302:	0092      	lsls	r2, r2, #2
 8000304:	4413      	add	r3, r2
 8000306:	461a      	mov	r2, r3
 8000308:	0091      	lsls	r1, r2, #2
 800030a:	461a      	mov	r2, r3
 800030c:	460b      	mov	r3, r1
 800030e:	4413      	add	r3, r2
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	b29b      	uxth	r3, r3
 8000314:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000318:	3320      	adds	r3, #32
 800031a:	b29b      	uxth	r3, r3
 800031c:	2203      	movs	r2, #3
 800031e:	4619      	mov	r1, r3
 8000320:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000324:	f000 fd62 	bl	8000dec <MCAL_TIMx_Set_Compare_Value>
	//delay_ms(2000);

	// stop the movement
	//Car_Stop_Moving();

}
 8000328:	bf00      	nop
 800032a:	3708      	adds	r7, #8
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}

08000330 <Clock_INIT>:
}Redirection;



void Clock_INIT(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    //set on the clock for PORTA
    RCC_GPIOA_CLK_EN();
 8000334:	4b19      	ldr	r3, [pc, #100]	; (800039c <Clock_INIT+0x6c>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a18      	ldr	r2, [pc, #96]	; (800039c <Clock_INIT+0x6c>)
 800033a:	f043 0304 	orr.w	r3, r3, #4
 800033e:	6193      	str	r3, [r2, #24]
    //set on the clock for PORTB
    RCC_GPIOB_CLK_EN();
 8000340:	4b16      	ldr	r3, [pc, #88]	; (800039c <Clock_INIT+0x6c>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a15      	ldr	r2, [pc, #84]	; (800039c <Clock_INIT+0x6c>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
    //set on the clock for AFIO
    RCC_GPIOC_CLK_EN();
 800034c:	4b13      	ldr	r3, [pc, #76]	; (800039c <Clock_INIT+0x6c>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a12      	ldr	r2, [pc, #72]	; (800039c <Clock_INIT+0x6c>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
    RCC_AFIO_CLK_EN();
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <Clock_INIT+0x6c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a0f      	ldr	r2, [pc, #60]	; (800039c <Clock_INIT+0x6c>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6193      	str	r3, [r2, #24]
    RCC_TIM2_CLK_Enable();
 8000364:	4b0d      	ldr	r3, [pc, #52]	; (800039c <Clock_INIT+0x6c>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <Clock_INIT+0x6c>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	61d3      	str	r3, [r2, #28]
    RCC_TIM3_CLK_Enable();
 8000370:	4b0a      	ldr	r3, [pc, #40]	; (800039c <Clock_INIT+0x6c>)
 8000372:	69db      	ldr	r3, [r3, #28]
 8000374:	4a09      	ldr	r2, [pc, #36]	; (800039c <Clock_INIT+0x6c>)
 8000376:	f043 0302 	orr.w	r3, r3, #2
 800037a:	61d3      	str	r3, [r2, #28]
    RCC_TIM4_CLK_Enable();
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <Clock_INIT+0x6c>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	4a06      	ldr	r2, [pc, #24]	; (800039c <Clock_INIT+0x6c>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	61d3      	str	r3, [r2, #28]
    RCC_ADC1_CLK_Enable();
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <Clock_INIT+0x6c>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	4a03      	ldr	r2, [pc, #12]	; (800039c <Clock_INIT+0x6c>)
 800038e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000392:	6193      	str	r3, [r2, #24]
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <main>:
    }    
}



int main (){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b084      	sub	sp, #16
 80003a4:	af00      	add	r7, sp, #0
	
    Clock_INIT();
 80003a6:	f7ff ffc3 	bl	8000330 <Clock_INIT>
//      }
//    }

    
  //  MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
    uint16_t fm = 0,fr = 0,fl = 0,b = 0,l = 0,r = 0 ;
 80003aa:	2300      	movs	r3, #0
 80003ac:	81fb      	strh	r3, [r7, #14]
 80003ae:	2300      	movs	r3, #0
 80003b0:	81bb      	strh	r3, [r7, #12]
 80003b2:	2300      	movs	r3, #0
 80003b4:	817b      	strh	r3, [r7, #10]
 80003b6:	2300      	movs	r3, #0
 80003b8:	813b      	strh	r3, [r7, #8]
 80003ba:	2300      	movs	r3, #0
 80003bc:	80fb      	strh	r3, [r7, #6]
 80003be:	2300      	movs	r3, #0
 80003c0:	80bb      	strh	r3, [r7, #4]
//	TIMx_Config.MODE=TIMx_MODE_PWM2;
//	TIMx_Config.Prescalers=7;  // timer clock 1mhz
////	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH2);
	//MCAL_TIMx_Set_Compare_Value(TIM2,5000,CH2);
	//MCAL_TIMx_Set_TOP_Value(TIM2, 20000);//Frequency 50 hz
    HAL_DC_Motors_init();
 80003c2:	f7ff ff23 	bl	800020c <HAL_DC_Motors_init>
    	//MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(Car_Speed_40),Front_Left_Motor);
    	//MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(Car_Speed_40),Front_Right_Motor);
    	//MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(Car_Speed_40),Back_Left_Motor);
    	//MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(Car_Speed_40),Back_Right_Motor);

    	 Car_Move(Car_Speed_40 , distance_step);
 80003c6:	210a      	movs	r1, #10
 80003c8:	2028      	movs	r0, #40	; 0x28
 80003ca:	f7ff ff51 	bl	8000270 <Car_Move>
 80003ce:	e7fa      	b.n	80003c6 <main+0x26>

080003d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003d0:	480d      	ldr	r0, [pc, #52]	; (8000408 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <LoopForever+0x6>)
  ldr r1, =_edata
 80003da:	490d      	ldr	r1, [pc, #52]	; (8000410 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003dc:	4a0d      	ldr	r2, [pc, #52]	; (8000414 <LoopForever+0xe>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003e0:	e002      	b.n	80003e8 <LoopCopyDataInit>

080003e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003e6:	3304      	adds	r3, #4

080003e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ec:	d3f9      	bcc.n	80003e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ee:	4a0a      	ldr	r2, [pc, #40]	; (8000418 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003f0:	4c0a      	ldr	r4, [pc, #40]	; (800041c <LoopForever+0x16>)
  movs r3, #0
 80003f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003f4:	e001      	b.n	80003fa <LoopFillZerobss>

080003f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003f8:	3204      	adds	r2, #4

080003fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003fc:	d3fb      	bcc.n	80003f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003fe:	f000 fd47 	bl	8000e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000402:	f7ff ffcd 	bl	80003a0 <main>

08000406 <LoopForever>:

LoopForever:
    b LoopForever
 8000406:	e7fe      	b.n	8000406 <LoopForever>
  ldr   r0, =_estack
 8000408:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800040c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000410:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000414:	08000ef8 	.word	0x08000ef8
  ldr r2, =_sbss
 8000418:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800041c:	200000b8 	.word	0x200000b8

08000420 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000420:	e7fe      	b.n	8000420 <ADC1_2_IRQHandler>
	...

08000424 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <EXTI0_IRQHandler+0x1c>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a04      	ldr	r2, [pc, #16]	; (8000440 <EXTI0_IRQHandler+0x1c>)
 800042e:	f043 0301 	orr.w	r3, r3, #1
 8000432:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000434:	4b03      	ldr	r3, [pc, #12]	; (8000444 <EXTI0_IRQHandler+0x20>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4798      	blx	r3
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010400 	.word	0x40010400
 8000444:	20000030 	.word	0x20000030

08000448 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <EXTI1_IRQHandler+0x1c>)
 800044e:	695b      	ldr	r3, [r3, #20]
 8000450:	4a04      	ldr	r2, [pc, #16]	; (8000464 <EXTI1_IRQHandler+0x1c>)
 8000452:	f043 0302 	orr.w	r3, r3, #2
 8000456:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8000458:	4b03      	ldr	r3, [pc, #12]	; (8000468 <EXTI1_IRQHandler+0x20>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4798      	blx	r3
}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	40010400 	.word	0x40010400
 8000468:	20000030 	.word	0x20000030

0800046c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <EXTI2_IRQHandler+0x1c>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <EXTI2_IRQHandler+0x1c>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 800047c:	4b03      	ldr	r3, [pc, #12]	; (800048c <EXTI2_IRQHandler+0x20>)
 800047e:	689b      	ldr	r3, [r3, #8]
 8000480:	4798      	blx	r3
}
 8000482:	bf00      	nop
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40010400 	.word	0x40010400
 800048c:	20000030 	.word	0x20000030

08000490 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <EXTI3_IRQHandler+0x1c>)
 8000496:	695b      	ldr	r3, [r3, #20]
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <EXTI3_IRQHandler+0x1c>)
 800049a:	f043 0308 	orr.w	r3, r3, #8
 800049e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 80004a0:	4b03      	ldr	r3, [pc, #12]	; (80004b0 <EXTI3_IRQHandler+0x20>)
 80004a2:	68db      	ldr	r3, [r3, #12]
 80004a4:	4798      	blx	r3
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	40010400 	.word	0x40010400
 80004b0:	20000030 	.word	0x20000030

080004b4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 80004b8:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <EXTI4_IRQHandler+0x1c>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a04      	ldr	r2, [pc, #16]	; (80004d0 <EXTI4_IRQHandler+0x1c>)
 80004be:	f043 0310 	orr.w	r3, r3, #16
 80004c2:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <EXTI4_IRQHandler+0x20>)
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	4798      	blx	r3
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000030 	.word	0x20000030

080004d8 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 80004dc:	4b26      	ldr	r3, [pc, #152]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d008      	beq.n	80004fa <EXTI9_5_IRQHandler+0x22>
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004ea:	695b      	ldr	r3, [r3, #20]
 80004ec:	4a22      	ldr	r2, [pc, #136]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004ee:	f043 0320 	orr.w	r3, r3, #32
 80004f2:	6153      	str	r3, [r2, #20]
 80004f4:	4b21      	ldr	r3, [pc, #132]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 80004fa:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000502:	2b00      	cmp	r3, #0
 8000504:	d008      	beq.n	8000518 <EXTI9_5_IRQHandler+0x40>
 8000506:	4b1c      	ldr	r3, [pc, #112]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800050c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b1a      	ldr	r3, [pc, #104]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000518:	4b17      	ldr	r3, [pc, #92]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000520:	2b00      	cmp	r3, #0
 8000522:	d008      	beq.n	8000536 <EXTI9_5_IRQHandler+0x5e>
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 800052a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052e:	6153      	str	r3, [r2, #20]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000532:	69db      	ldr	r3, [r3, #28]
 8000534:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000536:	4b10      	ldr	r3, [pc, #64]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800053e:	2b00      	cmp	r3, #0
 8000540:	d008      	beq.n	8000554 <EXTI9_5_IRQHandler+0x7c>
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054c:	6153      	str	r3, [r2, #20]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 8000550:	6a1b      	ldr	r3, [r3, #32]
 8000552:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000556:	695b      	ldr	r3, [r3, #20]
 8000558:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800055c:	2b00      	cmp	r3, #0
 800055e:	d008      	beq.n	8000572 <EXTI9_5_IRQHandler+0x9a>
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <EXTI9_5_IRQHandler+0xa0>)
 8000566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800056a:	6153      	str	r3, [r2, #20]
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <EXTI9_5_IRQHandler+0xa4>)
 800056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000570:	4798      	blx	r3
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40010400 	.word	0x40010400
 800057c:	20000030 	.word	0x20000030

08000580 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8000584:	4b2d      	ldr	r3, [pc, #180]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 8000586:	695b      	ldr	r3, [r3, #20]
 8000588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800058c:	2b00      	cmp	r3, #0
 800058e:	d008      	beq.n	80005a2 <EXTI15_10_IRQHandler+0x22>
 8000590:	4b2a      	ldr	r3, [pc, #168]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a29      	ldr	r2, [pc, #164]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6153      	str	r3, [r2, #20]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 800059e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a0:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 80005a2:	4b26      	ldr	r3, [pc, #152]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005a4:	695b      	ldr	r3, [r3, #20]
 80005a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d008      	beq.n	80005c0 <EXTI15_10_IRQHandler+0x40>
 80005ae:	4b23      	ldr	r3, [pc, #140]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a22      	ldr	r2, [pc, #136]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 80005bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005be:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 80005c0:	4b1e      	ldr	r3, [pc, #120]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d008      	beq.n	80005de <EXTI15_10_IRQHandler+0x5e>
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a1a      	ldr	r2, [pc, #104]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005d6:	6153      	str	r3, [r2, #20]
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 80005da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005dc:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d008      	beq.n	80005fc <EXTI15_10_IRQHandler+0x7c>
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005f4:	6153      	str	r3, [r2, #20]
 80005f6:	4b12      	ldr	r3, [pc, #72]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fa:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d008      	beq.n	800061a <EXTI15_10_IRQHandler+0x9a>
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a0b      	ldr	r2, [pc, #44]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000612:	6153      	str	r3, [r2, #20]
 8000614:	4b0a      	ldr	r3, [pc, #40]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 8000616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000618:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000622:	2b00      	cmp	r3, #0
 8000624:	d008      	beq.n	8000638 <EXTI15_10_IRQHandler+0xb8>
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4a04      	ldr	r2, [pc, #16]	; (800063c <EXTI15_10_IRQHandler+0xbc>)
 800062c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000630:	6153      	str	r3, [r2, #20]
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <EXTI15_10_IRQHandler+0xc0>)
 8000634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000636:	4798      	blx	r3
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40010400 	.word	0x40010400
 8000640:	20000030 	.word	0x20000030

08000644 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800064e:	88fb      	ldrh	r3, [r7, #6]
 8000650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000654:	f000 80a5 	beq.w	80007a2 <get_position+0x15e>
 8000658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800065c:	f300 80a3 	bgt.w	80007a6 <get_position+0x162>
 8000660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000664:	f000 809b 	beq.w	800079e <get_position+0x15a>
 8000668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800066c:	f300 809b 	bgt.w	80007a6 <get_position+0x162>
 8000670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000674:	f000 8091 	beq.w	800079a <get_position+0x156>
 8000678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800067c:	f300 8093 	bgt.w	80007a6 <get_position+0x162>
 8000680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000684:	f000 8087 	beq.w	8000796 <get_position+0x152>
 8000688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800068c:	f300 808b 	bgt.w	80007a6 <get_position+0x162>
 8000690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000694:	d07d      	beq.n	8000792 <get_position+0x14e>
 8000696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800069a:	f300 8084 	bgt.w	80007a6 <get_position+0x162>
 800069e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006a2:	d074      	beq.n	800078e <get_position+0x14a>
 80006a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006a8:	dc7d      	bgt.n	80007a6 <get_position+0x162>
 80006aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ae:	d06c      	beq.n	800078a <get_position+0x146>
 80006b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006b4:	dc77      	bgt.n	80007a6 <get_position+0x162>
 80006b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006ba:	d064      	beq.n	8000786 <get_position+0x142>
 80006bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006c0:	dc71      	bgt.n	80007a6 <get_position+0x162>
 80006c2:	2b80      	cmp	r3, #128	; 0x80
 80006c4:	d05d      	beq.n	8000782 <get_position+0x13e>
 80006c6:	2b80      	cmp	r3, #128	; 0x80
 80006c8:	dc6d      	bgt.n	80007a6 <get_position+0x162>
 80006ca:	2b20      	cmp	r3, #32
 80006cc:	dc48      	bgt.n	8000760 <get_position+0x11c>
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	dd69      	ble.n	80007a6 <get_position+0x162>
 80006d2:	3b01      	subs	r3, #1
 80006d4:	2b1f      	cmp	r3, #31
 80006d6:	d866      	bhi.n	80007a6 <get_position+0x162>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <get_position+0x9c>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	08000767 	.word	0x08000767
 80006e4:	0800076b 	.word	0x0800076b
 80006e8:	080007a7 	.word	0x080007a7
 80006ec:	0800076f 	.word	0x0800076f
 80006f0:	080007a7 	.word	0x080007a7
 80006f4:	080007a7 	.word	0x080007a7
 80006f8:	080007a7 	.word	0x080007a7
 80006fc:	08000773 	.word	0x08000773
 8000700:	080007a7 	.word	0x080007a7
 8000704:	080007a7 	.word	0x080007a7
 8000708:	080007a7 	.word	0x080007a7
 800070c:	080007a7 	.word	0x080007a7
 8000710:	080007a7 	.word	0x080007a7
 8000714:	080007a7 	.word	0x080007a7
 8000718:	080007a7 	.word	0x080007a7
 800071c:	08000777 	.word	0x08000777
 8000720:	080007a7 	.word	0x080007a7
 8000724:	080007a7 	.word	0x080007a7
 8000728:	080007a7 	.word	0x080007a7
 800072c:	080007a7 	.word	0x080007a7
 8000730:	080007a7 	.word	0x080007a7
 8000734:	080007a7 	.word	0x080007a7
 8000738:	080007a7 	.word	0x080007a7
 800073c:	080007a7 	.word	0x080007a7
 8000740:	080007a7 	.word	0x080007a7
 8000744:	080007a7 	.word	0x080007a7
 8000748:	080007a7 	.word	0x080007a7
 800074c:	080007a7 	.word	0x080007a7
 8000750:	080007a7 	.word	0x080007a7
 8000754:	080007a7 	.word	0x080007a7
 8000758:	080007a7 	.word	0x080007a7
 800075c:	0800077b 	.word	0x0800077b
 8000760:	2b40      	cmp	r3, #64	; 0x40
 8000762:	d00c      	beq.n	800077e <get_position+0x13a>
 8000764:	e01f      	b.n	80007a6 <get_position+0x162>
	{
	case GPIO_PIN_0 :
		return 0;
 8000766:	2300      	movs	r3, #0
 8000768:	e01e      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 800076a:	2304      	movs	r3, #4
 800076c:	e01c      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 800076e:	2308      	movs	r3, #8
 8000770:	e01a      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8000772:	230c      	movs	r3, #12
 8000774:	e018      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8000776:	2310      	movs	r3, #16
 8000778:	e016      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 800077a:	2314      	movs	r3, #20
 800077c:	e014      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 800077e:	2318      	movs	r3, #24
 8000780:	e012      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8000782:	231c      	movs	r3, #28
 8000784:	e010      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8000786:	2300      	movs	r3, #0
 8000788:	e00e      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 800078a:	2304      	movs	r3, #4
 800078c:	e00c      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 800078e:	2308      	movs	r3, #8
 8000790:	e00a      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 8000792:	230c      	movs	r3, #12
 8000794:	e008      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 8000796:	2310      	movs	r3, #16
 8000798:	e006      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 800079a:	2314      	movs	r3, #20
 800079c:	e004      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 800079e:	2318      	movs	r3, #24
 80007a0:	e002      	b.n	80007a8 <get_position+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 80007a2:	231c      	movs	r3, #28
 80007a4:	e000      	b.n	80007a8 <get_position+0x164>
		break;
	default:
		return 0;
 80007a6:	2300      	movs	r3, #0
	}
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop

080007b4 <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	2bff      	cmp	r3, #255	; 0xff
 80007cc:	d801      	bhi.n	80007d2 <MCAL_GPIO_Init+0x1e>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	e001      	b.n	80007d6 <MCAL_GPIO_Init+0x22>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3304      	adds	r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff31 	bl	8000644 <get_position>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	230f      	movs	r3, #15
 80007e8:	4093      	lsls	r3, r2
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	401a      	ands	r2, r3
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	2b07      	cmp	r3, #7
 80007fc:	d00b      	beq.n	8000816 <MCAL_GPIO_Init+0x62>
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	789b      	ldrb	r3, [r3, #2]
 8000802:	2b06      	cmp	r3, #6
 8000804:	d007      	beq.n	8000816 <MCAL_GPIO_Init+0x62>
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	789b      	ldrb	r3, [r3, #2]
 800080a:	2b05      	cmp	r3, #5
 800080c:	d003      	beq.n	8000816 <MCAL_GPIO_Init+0x62>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	789b      	ldrb	r3, [r3, #2]
 8000812:	2b04      	cmp	r3, #4
 8000814:	d10e      	bne.n	8000834 <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	3b04      	subs	r3, #4
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	b25a      	sxtb	r2, r3
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	b25b      	sxtb	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b25b      	sxtb	r3, r3
 800082a:	b2db      	uxtb	r3, r3
 800082c:	f003 030f 	and.w	r3, r3, #15
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e02c      	b.n	800088e <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d003      	beq.n	8000844 <MCAL_GPIO_Init+0x90>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d107      	bne.n	8000854 <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	b2db      	uxtb	r3, r3
 800084c:	f003 030f 	and.w	r3, r3, #15
 8000850:	73fb      	strb	r3, [r7, #15]
 8000852:	e01c      	b.n	800088e <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	789b      	ldrb	r3, [r3, #2]
 8000858:	2b08      	cmp	r3, #8
 800085a:	d102      	bne.n	8000862 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 800085c:	2304      	movs	r3, #4
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e015      	b.n	800088e <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8000862:	2308      	movs	r3, #8
 8000864:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	2b02      	cmp	r3, #2
 800086c:	d107      	bne.n	800087e <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	8812      	ldrh	r2, [r2, #0]
 8000876:	431a      	orrs	r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	e007      	b.n	800088e <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	683a      	ldr	r2, [r7, #0]
 8000884:	8812      	ldrh	r2, [r2, #0]
 8000886:	43d2      	mvns	r2, r2
 8000888:	401a      	ands	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 800088e:	7bfc      	ldrb	r4, [r7, #15]
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fed5 	bl	8000644 <get_position>
 800089a:	4603      	mov	r3, r0
 800089c:	fa04 f203 	lsl.w	r2, r4, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	431a      	orrs	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	601a      	str	r2, [r3, #0]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}
	...

080008b4 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	460b      	mov	r3, r1
 80008be:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a30      	ldr	r2, [pc, #192]	; (8000984 <Slave_Status+0xd0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	73fb      	strb	r3, [r7, #15]

	switch(state)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	d851      	bhi.n	800097a <Slave_Status+0xc6>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <Slave_Status+0x28>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	080008ed 	.word	0x080008ed
 80008e0:	08000911 	.word	0x08000911
 80008e4:	08000929 	.word	0x08000929
 80008e8:	0800094d 	.word	0x0800094d
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03b      	beq.n	8000970 <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 80008f8:	7bfa      	ldrb	r2, [r7, #15]
 80008fa:	4923      	ldr	r1, [pc, #140]	; (8000988 <Slave_Status+0xd4>)
 80008fc:	4613      	mov	r3, r2
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	1a9b      	subs	r3, r3, r2
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	3318      	adds	r3, #24
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	2000      	movs	r0, #0
 800090c:	4798      	blx	r3
		}
		break;
 800090e:	e02f      	b.n	8000970 <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 8000910:	7bfa      	ldrb	r2, [r7, #15]
 8000912:	491d      	ldr	r1, [pc, #116]	; (8000988 <Slave_Status+0xd4>)
 8000914:	4613      	mov	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	3318      	adds	r3, #24
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2001      	movs	r0, #1
 8000924:	4798      	blx	r3
		break;
 8000926:	e028      	b.n	800097a <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01f      	beq.n	8000974 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8000934:	7bfa      	ldrb	r2, [r7, #15]
 8000936:	4914      	ldr	r1, [pc, #80]	; (8000988 <Slave_Status+0xd4>)
 8000938:	4613      	mov	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	1a9b      	subs	r3, r3, r2
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	440b      	add	r3, r1
 8000942:	3318      	adds	r3, #24
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2002      	movs	r0, #2
 8000948:	4798      	blx	r3
		}
		break;
 800094a:	e013      	b.n	8000974 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	2b00      	cmp	r3, #0
 8000956:	d10f      	bne.n	8000978 <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8000958:	7bfa      	ldrb	r2, [r7, #15]
 800095a:	490b      	ldr	r1, [pc, #44]	; (8000988 <Slave_Status+0xd4>)
 800095c:	4613      	mov	r3, r2
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	1a9b      	subs	r3, r3, r2
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	440b      	add	r3, r1
 8000966:	3318      	adds	r3, #24
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2003      	movs	r0, #3
 800096c:	4798      	blx	r3
		}
		break;
 800096e:	e003      	b.n	8000978 <Slave_Status+0xc4>
		break;
 8000970:	bf00      	nop
 8000972:	e002      	b.n	800097a <Slave_Status+0xc6>
		break;
 8000974:	bf00      	nop
 8000976:	e000      	b.n	800097a <Slave_Status+0xc6>
		break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40005400 	.word	0x40005400
 8000988:	2000006c 	.word	0x2000006c

0800098c <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8000996:	4b36      	ldr	r3, [pc, #216]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 80009a0:	4b33      	ldr	r3, [pc, #204]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009a8:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 80009aa:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009b2:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d00a      	beq.n	80009d0 <I2C1_EV_IRQHandler+0x44>
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009c2:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 80009c8:	2100      	movs	r1, #0
 80009ca:	4829      	ldr	r0, [pc, #164]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009cc:	f7ff ff72 	bl	80008b4 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 80009d0:	4b27      	ldr	r3, [pc, #156]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d012      	beq.n	8000a06 <I2C1_EV_IRQHandler+0x7a>
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00f      	beq.n	8000a06 <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 80009e6:	4b22      	ldr	r3, [pc, #136]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d109      	bne.n	8000a06 <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009f4:	695b      	ldr	r3, [r3, #20]
 80009f6:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 80009fe:	2101      	movs	r1, #1
 8000a00:	481b      	ldr	r0, [pc, #108]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a02:	f7ff ff57 	bl	80008b4 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8000a06:	4b1a      	ldr	r3, [pc, #104]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00f      	beq.n	8000a36 <I2C1_EV_IRQHandler+0xaa>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d00c      	beq.n	8000a36 <I2C1_EV_IRQHandler+0xaa>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d009      	beq.n	8000a36 <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 8000a2e:	2102      	movs	r1, #2
 8000a30:	480f      	ldr	r0, [pc, #60]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a32:	f7ff ff3f 	bl	80008b4 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8000a36:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a3e:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00f      	beq.n	8000a66 <I2C1_EV_IRQHandler+0xda>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d00c      	beq.n	8000a66 <I2C1_EV_IRQHandler+0xda>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d009      	beq.n	8000a66 <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d103      	bne.n	8000a66 <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 8000a5e:	2103      	movs	r1, #3
 8000a60:	4803      	ldr	r0, [pc, #12]	; (8000a70 <I2C1_EV_IRQHandler+0xe4>)
 8000a62:	f7ff ff27 	bl	80008b4 <Slave_Status>
		}
	}
}
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40005400 	.word	0x40005400

08000a74 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <SPI1_IRQHandler+0x54>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	793b      	ldrb	r3, [r7, #4]
 8000a88:	f362 0300 	bfi	r3, r2, #0, #1
 8000a8c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <SPI1_IRQHandler+0x54>)
 8000a90:	689b      	ldr	r3, [r3, #8]
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	793b      	ldrb	r3, [r7, #4]
 8000a9a:	f362 0341 	bfi	r3, r2, #1, #1
 8000a9e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <SPI1_IRQHandler+0x54>)
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	091b      	lsrs	r3, r3, #4
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	793b      	ldrb	r3, [r7, #4]
 8000aae:	f362 0382 	bfi	r3, r2, #2, #1
 8000ab2:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	; (8000acc <SPI1_IRQHandler+0x58>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	7938      	ldrb	r0, [r7, #4]
 8000abc:	4798      	blx	r3
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40013000 	.word	0x40013000
 8000acc:	200000a4 	.word	0x200000a4

08000ad0 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <SPI2_IRQHandler+0x54>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	085b      	lsrs	r3, r3, #1
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	793b      	ldrb	r3, [r7, #4]
 8000ae4:	f362 0300 	bfi	r3, r2, #0, #1
 8000ae8:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 8000aea:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <SPI2_IRQHandler+0x54>)
 8000aec:	689b      	ldr	r3, [r3, #8]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	793b      	ldrb	r3, [r7, #4]
 8000af6:	f362 0341 	bfi	r3, r2, #1, #1
 8000afa:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8000afc:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <SPI2_IRQHandler+0x54>)
 8000afe:	689b      	ldr	r3, [r3, #8]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	793b      	ldrb	r3, [r7, #4]
 8000b0a:	f362 0382 	bfi	r3, r2, #2, #1
 8000b0e:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <SPI2_IRQHandler+0x58>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	7938      	ldrb	r0, [r7, #4]
 8000b18:	4798      	blx	r3
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40003800 	.word	0x40003800
 8000b28:	200000a4 	.word	0x200000a4

08000b2c <MCAL_TIMx_Init>:
* @param [in] 		-Chan:  specified channel from 1 to 4
* @retval 			-none
* Note				-Support Fast PWM and Normal ( delay mode )
*/
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	4613      	mov	r3, r2
 8000b38:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2281      	movs	r2, #129	; 0x81
 8000b3e:	601a      	str	r2, [r3, #0]
//	TIMx->EGR |=1<<0;
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	f000 80d3 	beq.w	8000cf0 <MCAL_TIMx_Init+0x1c4>
	{
		// set pin
		if(TIMx==TIM2)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b50:	d131      	bne.n	8000bb6 <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 8000b52:	4ba0      	ldr	r3, [pc, #640]	; (8000dd4 <MCAL_TIMx_Init+0x2a8>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a9f      	ldr	r2, [pc, #636]	; (8000dd4 <MCAL_TIMx_Init+0x2a8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000b5e:	2306      	movs	r3, #6
 8000b60:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000b62:	2301      	movs	r3, #1
 8000b64:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b03      	cmp	r3, #3
 8000b6a:	d817      	bhi.n	8000b9c <MCAL_TIMx_Init+0x70>
 8000b6c:	a201      	add	r2, pc, #4	; (adr r2, 8000b74 <MCAL_TIMx_Init+0x48>)
 8000b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b72:	bf00      	nop
 8000b74:	08000b85 	.word	0x08000b85
 8000b78:	08000b8b 	.word	0x08000b8b
 8000b7c:	08000b91 	.word	0x08000b91
 8000b80:	08000b97 	.word	0x08000b97
			{
			case CH1 :
				{
					//set pin outpt
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8000b84:	2301      	movs	r3, #1
 8000b86:	82bb      	strh	r3, [r7, #20]
					break;
 8000b88:	e008      	b.n	8000b9c <MCAL_TIMx_Init+0x70>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	82bb      	strh	r3, [r7, #20]
					break;
 8000b8e:	e005      	b.n	8000b9c <MCAL_TIMx_Init+0x70>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_2 ;
 8000b90:	2304      	movs	r3, #4
 8000b92:	82bb      	strh	r3, [r7, #20]
					break;
 8000b94:	e002      	b.n	8000b9c <MCAL_TIMx_Init+0x70>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_3 ;
 8000b96:	2308      	movs	r3, #8
 8000b98:	82bb      	strh	r3, [r7, #20]
					break;
 8000b9a:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	488d      	ldr	r0, [pc, #564]	; (8000dd8 <MCAL_TIMx_Init+0x2ac>)
 8000ba4:	f7ff fe06 	bl	80007b4 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8000ba8:	4b8c      	ldr	r3, [pc, #560]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a8b      	ldr	r2, [pc, #556]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e072      	b.n	8000c9c <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	4a89      	ldr	r2, [pc, #548]	; (8000de0 <MCAL_TIMx_Init+0x2b4>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d13d      	bne.n	8000c3a <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d82f      	bhi.n	8000c2c <MCAL_TIMx_Init+0x100>
 8000bcc:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <MCAL_TIMx_Init+0xa8>)
 8000bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd2:	bf00      	nop
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000bf7 	.word	0x08000bf7
 8000bdc:	08000c09 	.word	0x08000c09
 8000be0:	08000c1b 	.word	0x08000c1b
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8000be4:	2340      	movs	r3, #64	; 0x40
 8000be6:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	487a      	ldr	r0, [pc, #488]	; (8000dd8 <MCAL_TIMx_Init+0x2ac>)
 8000bf0:	f7ff fde0 	bl	80007b4 <MCAL_GPIO_Init>
					break;
 8000bf4:	e01a      	b.n	8000c2c <MCAL_TIMx_Init+0x100>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4875      	ldr	r0, [pc, #468]	; (8000dd8 <MCAL_TIMx_Init+0x2ac>)
 8000c02:	f7ff fdd7 	bl	80007b4 <MCAL_GPIO_Init>
					break;
 8000c06:	e011      	b.n	8000c2c <MCAL_TIMx_Init+0x100>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4619      	mov	r1, r3
 8000c12:	4874      	ldr	r0, [pc, #464]	; (8000de4 <MCAL_TIMx_Init+0x2b8>)
 8000c14:	f7ff fdce 	bl	80007b4 <MCAL_GPIO_Init>
					break;
 8000c18:	e008      	b.n	8000c2c <MCAL_TIMx_Init+0x100>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	486f      	ldr	r0, [pc, #444]	; (8000de4 <MCAL_TIMx_Init+0x2b8>)
 8000c26:	f7ff fdc5 	bl	80007b4 <MCAL_GPIO_Init>
					break;
 8000c2a:	bf00      	nop
				}
			}
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 8000c2c:	4b6b      	ldr	r3, [pc, #428]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a6a      	ldr	r2, [pc, #424]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e030      	b.n	8000c9c <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4a6a      	ldr	r2, [pc, #424]	; (8000de8 <MCAL_TIMx_Init+0x2bc>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d12c      	bne.n	8000c9c <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8000c42:	2306      	movs	r3, #6
 8000c44:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8000c46:	2301      	movs	r3, #1
 8000c48:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d819      	bhi.n	8000c84 <MCAL_TIMx_Init+0x158>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <MCAL_TIMx_Init+0x12c>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c69 	.word	0x08000c69
 8000c5c:	08000c6f 	.word	0x08000c6f
 8000c60:	08000c75 	.word	0x08000c75
 8000c64:	08000c7d 	.word	0x08000c7d
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8000c68:	2340      	movs	r3, #64	; 0x40
 8000c6a:	82bb      	strh	r3, [r7, #20]
					break;
 8000c6c:	e00a      	b.n	8000c84 <MCAL_TIMx_Init+0x158>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	82bb      	strh	r3, [r7, #20]
					break;
 8000c72:	e007      	b.n	8000c84 <MCAL_TIMx_Init+0x158>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_8 ;
 8000c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c78:	82bb      	strh	r3, [r7, #20]
					break;
 8000c7a:	e003      	b.n	8000c84 <MCAL_TIMx_Init+0x158>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_9 ;
 8000c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c80:	82bb      	strh	r3, [r7, #20]

					break;
 8000c82:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4856      	ldr	r0, [pc, #344]	; (8000de4 <MCAL_TIMx_Init+0x2b8>)
 8000c8c:	f7ff fd92 	bl	80007b4 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ30_TIM4_Disable();
 8000c90:	4b52      	ldr	r3, [pc, #328]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a51      	ldr	r2, [pc, #324]	; (8000ddc <MCAL_TIMx_Init+0x2b0>)
 8000c96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000c9a:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d850      	bhi.n	8000d44 <MCAL_TIMx_Init+0x218>
 8000ca2:	a201      	add	r2, pc, #4	; (adr r2, 8000ca8 <MCAL_TIMx_Init+0x17c>)
 8000ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ca8:	08000cb9 	.word	0x08000cb9
 8000cac:	08000cc7 	.word	0x08000cc7
 8000cb0:	08000cd5 	.word	0x08000cd5
 8000cb4:	08000ce3 	.word	0x08000ce3
		{
		case CH1 :
			{
				TIMx->CCMR1 |=15<<3;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	619a      	str	r2, [r3, #24]
				break;
 8000cc4:	e03e      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 |=15<<11;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	619a      	str	r2, [r3, #24]
				break;
 8000cd2:	e037      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 |=15<<3;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	61da      	str	r2, [r3, #28]
				break;
 8000ce0:	e030      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2 |=15<<11;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	69db      	ldr	r3, [r3, #28]
 8000ce6:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	61da      	str	r2, [r3, #28]
				break;
 8000cee:	e029      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d826      	bhi.n	8000d44 <MCAL_TIMx_Init+0x218>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <MCAL_TIMx_Init+0x1d0>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d1b 	.word	0x08000d1b
 8000d04:	08000d29 	.word	0x08000d29
 8000d08:	08000d37 	.word	0x08000d37
		{
		case CH1 :
			{
				TIMx->CCMR1 &=~(15<<3);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	619a      	str	r2, [r3, #24]
				break;
 8000d18:	e014      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 &=~(15<<11);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	619a      	str	r2, [r3, #24]
				break;
 8000d26:	e00d      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 &=~(15<<3);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	61da      	str	r2, [r3, #28]
				break;
 8000d34:	e006      	b.n	8000d44 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2  &=~(15<<11);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	61da      	str	r2, [r3, #28]
				break;
 8000d42:	bf00      	nop
			}
		}
	}
	//output polarity and  output enable
	TIMx->ARR = 20000;
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000d4a:	62da      	str	r2, [r3, #44]	; 0x2c
	switch(Chan)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d836      	bhi.n	8000dc0 <MCAL_TIMx_Init+0x294>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <MCAL_TIMx_Init+0x22c>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d69 	.word	0x08000d69
 8000d5c:	08000d7f 	.word	0x08000d7f
 8000d60:	08000d95 	.word	0x08000d95
 8000d64:	08000dab 	.word	0x08000dab
	{
	case CH1 :
		{
			TIMx->CCER|=3<<0;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	f043 0203 	orr.w	r2, r3, #3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR1 = 10000;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000d7c:	e020      	b.n	8000dc0 <MCAL_TIMx_Init+0x294>
		}
	case CH2 :
		{
			TIMx->CCER|=3<<4;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6a1b      	ldr	r3, [r3, #32]
 8000d82:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR2 = 10000;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000d92:	e015      	b.n	8000dc0 <MCAL_TIMx_Init+0x294>
		}
	case CH3 :
		{
			TIMx->CCER|=3<<8;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	6a1b      	ldr	r3, [r3, #32]
 8000d98:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR3 = 10000;
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f242 7210 	movw	r2, #10000	; 0x2710
 8000da6:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000da8:	e00a      	b.n	8000dc0 <MCAL_TIMx_Init+0x294>
		}
	case CH4 :
		{
			TIMx->CCER|=3<<12;
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	6a1b      	ldr	r3, [r3, #32]
 8000dae:	f443 5240 	orr.w	r2, r3, #12288	; 0x3000
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR4 = 10000;
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f242 7210 	movw	r2, #10000	; 0x2710
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000dbe:	bf00      	nop
		}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	889b      	ldrh	r3, [r3, #4]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28
	//set init top value 20000


	//TIM2->EGR |=1<<0;
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	e000e180 	.word	0xe000e180
 8000de0:	40000400 	.word	0x40000400
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	40000800 	.word	0x40000800

08000dec <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	807b      	strh	r3, [r7, #2]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	707b      	strb	r3, [r7, #1]
	switch(Chan)
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d81a      	bhi.n	8000e38 <MCAL_TIMx_Set_Compare_Value+0x4c>
 8000e02:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <MCAL_TIMx_Set_Compare_Value+0x1c>)
 8000e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e08:	08000e19 	.word	0x08000e19
 8000e0c:	08000e21 	.word	0x08000e21
 8000e10:	08000e29 	.word	0x08000e29
 8000e14:	08000e31 	.word	0x08000e31
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 8000e18:	887a      	ldrh	r2, [r7, #2]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000e1e:	e00b      	b.n	8000e38 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 8000e20:	887a      	ldrh	r2, [r7, #2]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000e26:	e007      	b.n	8000e38 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 8000e28:	887a      	ldrh	r2, [r7, #2]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000e2e:	e003      	b.n	8000e38 <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 8000e30:	887a      	ldrh	r2, [r7, #2]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000e36:	bf00      	nop
		}
	}
	TIM2->EGR |=1<<0;
 8000e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3c:	695b      	ldr	r3, [r3, #20]
 8000e3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	6153      	str	r3, [r2, #20]


}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8000e58:	4b02      	ldr	r3, [pc, #8]	; (8000e64 <USART1_IRQHandler+0x10>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	68db      	ldr	r3, [r3, #12]
 8000e5e:	4798      	blx	r3
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	200000ac 	.word	0x200000ac

08000e68 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8000e6c:	4b02      	ldr	r3, [pc, #8]	; (8000e78 <USART2_IRQHandler+0x10>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	4798      	blx	r3
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000ac 	.word	0x200000ac

08000e7c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8000e80:	4b02      	ldr	r3, [pc, #8]	; (8000e8c <USART3_IRQHandler+0x10>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	68db      	ldr	r3, [r3, #12]
 8000e86:	4798      	blx	r3
}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000ac 	.word	0x200000ac

08000e90 <__libc_init_array>:
 8000e90:	b570      	push	{r4, r5, r6, lr}
 8000e92:	2600      	movs	r6, #0
 8000e94:	4d0c      	ldr	r5, [pc, #48]	; (8000ec8 <__libc_init_array+0x38>)
 8000e96:	4c0d      	ldr	r4, [pc, #52]	; (8000ecc <__libc_init_array+0x3c>)
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	10a4      	asrs	r4, r4, #2
 8000e9c:	42a6      	cmp	r6, r4
 8000e9e:	d109      	bne.n	8000eb4 <__libc_init_array+0x24>
 8000ea0:	f000 f81a 	bl	8000ed8 <_init>
 8000ea4:	2600      	movs	r6, #0
 8000ea6:	4d0a      	ldr	r5, [pc, #40]	; (8000ed0 <__libc_init_array+0x40>)
 8000ea8:	4c0a      	ldr	r4, [pc, #40]	; (8000ed4 <__libc_init_array+0x44>)
 8000eaa:	1b64      	subs	r4, r4, r5
 8000eac:	10a4      	asrs	r4, r4, #2
 8000eae:	42a6      	cmp	r6, r4
 8000eb0:	d105      	bne.n	8000ebe <__libc_init_array+0x2e>
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000eb8:	4798      	blx	r3
 8000eba:	3601      	adds	r6, #1
 8000ebc:	e7ee      	b.n	8000e9c <__libc_init_array+0xc>
 8000ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ec2:	4798      	blx	r3
 8000ec4:	3601      	adds	r6, #1
 8000ec6:	e7f2      	b.n	8000eae <__libc_init_array+0x1e>
 8000ec8:	08000ef0 	.word	0x08000ef0
 8000ecc:	08000ef0 	.word	0x08000ef0
 8000ed0:	08000ef0 	.word	0x08000ef0
 8000ed4:	08000ef4 	.word	0x08000ef4

08000ed8 <_init>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr

08000ee4 <_fini>:
 8000ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ee6:	bf00      	nop
 8000ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eea:	bc08      	pop	{r3}
 8000eec:	469e      	mov	lr, r3
 8000eee:	4770      	bx	lr
