
Firefighter-Robot_Code.axf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080027bc  080027bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080027bc  080027bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080027bc  080027bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027bc  080027bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027bc  080027bc  000127bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080027c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000004  080027c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  080027c8  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004282  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001401  00000000  00000000  000242af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001bc0  00000000  00000000  000256b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000460  00000000  00000000  00027270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000388  00000000  00000000  000276d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003c2e  00000000  00000000  00027a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000662f  00000000  00000000  0002b686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dbaa  00000000  00000000  00031cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0003f85f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001094  00000000  00000000  0003f8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000004 	.word	0x20000004
 800014c:	00000000 	.word	0x00000000
 8000150:	080027a4 	.word	0x080027a4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000008 	.word	0x20000008
 800016c:	080027a4 	.word	0x080027a4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_frsub>:
 80009ec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009f0:	e002      	b.n	80009f8 <__addsf3>
 80009f2:	bf00      	nop

080009f4 <__aeabi_fsub>:
 80009f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009f8 <__addsf3>:
 80009f8:	0042      	lsls	r2, r0, #1
 80009fa:	bf1f      	itttt	ne
 80009fc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a00:	ea92 0f03 	teqne	r2, r3
 8000a04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a0c:	d06a      	beq.n	8000ae4 <__addsf3+0xec>
 8000a0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a16:	bfc1      	itttt	gt
 8000a18:	18d2      	addgt	r2, r2, r3
 8000a1a:	4041      	eorgt	r1, r0
 8000a1c:	4048      	eorgt	r0, r1
 8000a1e:	4041      	eorgt	r1, r0
 8000a20:	bfb8      	it	lt
 8000a22:	425b      	neglt	r3, r3
 8000a24:	2b19      	cmp	r3, #25
 8000a26:	bf88      	it	hi
 8000a28:	4770      	bxhi	lr
 8000a2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a46:	bf18      	it	ne
 8000a48:	4249      	negne	r1, r1
 8000a4a:	ea92 0f03 	teq	r2, r3
 8000a4e:	d03f      	beq.n	8000ad0 <__addsf3+0xd8>
 8000a50:	f1a2 0201 	sub.w	r2, r2, #1
 8000a54:	fa41 fc03 	asr.w	ip, r1, r3
 8000a58:	eb10 000c 	adds.w	r0, r0, ip
 8000a5c:	f1c3 0320 	rsb	r3, r3, #32
 8000a60:	fa01 f103 	lsl.w	r1, r1, r3
 8000a64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a68:	d502      	bpl.n	8000a70 <__addsf3+0x78>
 8000a6a:	4249      	negs	r1, r1
 8000a6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a74:	d313      	bcc.n	8000a9e <__addsf3+0xa6>
 8000a76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a7a:	d306      	bcc.n	8000a8a <__addsf3+0x92>
 8000a7c:	0840      	lsrs	r0, r0, #1
 8000a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a82:	f102 0201 	add.w	r2, r2, #1
 8000a86:	2afe      	cmp	r2, #254	; 0xfe
 8000a88:	d251      	bcs.n	8000b2e <__addsf3+0x136>
 8000a8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a92:	bf08      	it	eq
 8000a94:	f020 0001 	biceq.w	r0, r0, #1
 8000a98:	ea40 0003 	orr.w	r0, r0, r3
 8000a9c:	4770      	bx	lr
 8000a9e:	0049      	lsls	r1, r1, #1
 8000aa0:	eb40 0000 	adc.w	r0, r0, r0
 8000aa4:	3a01      	subs	r2, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000aac:	d2ed      	bcs.n	8000a8a <__addsf3+0x92>
 8000aae:	fab0 fc80 	clz	ip, r0
 8000ab2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ab6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000abe:	bfaa      	itet	ge
 8000ac0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ac4:	4252      	neglt	r2, r2
 8000ac6:	4318      	orrge	r0, r3
 8000ac8:	bfbc      	itt	lt
 8000aca:	40d0      	lsrlt	r0, r2
 8000acc:	4318      	orrlt	r0, r3
 8000ace:	4770      	bx	lr
 8000ad0:	f092 0f00 	teq	r2, #0
 8000ad4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ad8:	bf06      	itte	eq
 8000ada:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ade:	3201      	addeq	r2, #1
 8000ae0:	3b01      	subne	r3, #1
 8000ae2:	e7b5      	b.n	8000a50 <__addsf3+0x58>
 8000ae4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ae8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aec:	bf18      	it	ne
 8000aee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af2:	d021      	beq.n	8000b38 <__addsf3+0x140>
 8000af4:	ea92 0f03 	teq	r2, r3
 8000af8:	d004      	beq.n	8000b04 <__addsf3+0x10c>
 8000afa:	f092 0f00 	teq	r2, #0
 8000afe:	bf08      	it	eq
 8000b00:	4608      	moveq	r0, r1
 8000b02:	4770      	bx	lr
 8000b04:	ea90 0f01 	teq	r0, r1
 8000b08:	bf1c      	itt	ne
 8000b0a:	2000      	movne	r0, #0
 8000b0c:	4770      	bxne	lr
 8000b0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b12:	d104      	bne.n	8000b1e <__addsf3+0x126>
 8000b14:	0040      	lsls	r0, r0, #1
 8000b16:	bf28      	it	cs
 8000b18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	4770      	bx	lr
 8000b1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b22:	bf3c      	itt	cc
 8000b24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b28:	4770      	bxcc	lr
 8000b2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b36:	4770      	bx	lr
 8000b38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b3c:	bf16      	itet	ne
 8000b3e:	4608      	movne	r0, r1
 8000b40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b44:	4601      	movne	r1, r0
 8000b46:	0242      	lsls	r2, r0, #9
 8000b48:	bf06      	itte	eq
 8000b4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b4e:	ea90 0f01 	teqeq	r0, r1
 8000b52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_ui2f>:
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	e004      	b.n	8000b68 <__aeabi_i2f+0x8>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_i2f>:
 8000b60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b64:	bf48      	it	mi
 8000b66:	4240      	negmi	r0, r0
 8000b68:	ea5f 0c00 	movs.w	ip, r0
 8000b6c:	bf08      	it	eq
 8000b6e:	4770      	bxeq	lr
 8000b70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b74:	4601      	mov	r1, r0
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	e01c      	b.n	8000bb6 <__aeabi_l2f+0x2a>

08000b7c <__aeabi_ul2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e00a      	b.n	8000ba0 <__aeabi_l2f+0x14>
 8000b8a:	bf00      	nop

08000b8c <__aeabi_l2f>:
 8000b8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b90:	bf08      	it	eq
 8000b92:	4770      	bxeq	lr
 8000b94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b98:	d502      	bpl.n	8000ba0 <__aeabi_l2f+0x14>
 8000b9a:	4240      	negs	r0, r0
 8000b9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ba0:	ea5f 0c01 	movs.w	ip, r1
 8000ba4:	bf02      	ittt	eq
 8000ba6:	4684      	moveq	ip, r0
 8000ba8:	4601      	moveq	r1, r0
 8000baa:	2000      	moveq	r0, #0
 8000bac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000bb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000bba:	fabc f28c 	clz	r2, ip
 8000bbe:	3a08      	subs	r2, #8
 8000bc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bc4:	db10      	blt.n	8000be8 <__aeabi_l2f+0x5c>
 8000bc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bca:	4463      	add	r3, ip
 8000bcc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f102 0220 	add.w	r2, r2, #32
 8000bec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bf0:	f1c2 0220 	rsb	r2, r2, #32
 8000bf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bfc:	eb43 0002 	adc.w	r0, r3, r2
 8000c00:	bf08      	it	eq
 8000c02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c06:	4770      	bx	lr

08000c08 <__gesf2>:
 8000c08:	f04f 3cff 	mov.w	ip, #4294967295
 8000c0c:	e006      	b.n	8000c1c <__cmpsf2+0x4>
 8000c0e:	bf00      	nop

08000c10 <__lesf2>:
 8000c10:	f04f 0c01 	mov.w	ip, #1
 8000c14:	e002      	b.n	8000c1c <__cmpsf2+0x4>
 8000c16:	bf00      	nop

08000c18 <__cmpsf2>:
 8000c18:	f04f 0c01 	mov.w	ip, #1
 8000c1c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c2c:	bf18      	it	ne
 8000c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c32:	d011      	beq.n	8000c58 <__cmpsf2+0x40>
 8000c34:	b001      	add	sp, #4
 8000c36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c3a:	bf18      	it	ne
 8000c3c:	ea90 0f01 	teqne	r0, r1
 8000c40:	bf58      	it	pl
 8000c42:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c46:	bf88      	it	hi
 8000c48:	17c8      	asrhi	r0, r1, #31
 8000c4a:	bf38      	it	cc
 8000c4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c50:	bf18      	it	ne
 8000c52:	f040 0001 	orrne.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	d102      	bne.n	8000c64 <__cmpsf2+0x4c>
 8000c5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c62:	d105      	bne.n	8000c70 <__cmpsf2+0x58>
 8000c64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c68:	d1e4      	bne.n	8000c34 <__cmpsf2+0x1c>
 8000c6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c6e:	d0e1      	beq.n	8000c34 <__cmpsf2+0x1c>
 8000c70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_cfrcmple>:
 8000c78:	4684      	mov	ip, r0
 8000c7a:	4608      	mov	r0, r1
 8000c7c:	4661      	mov	r1, ip
 8000c7e:	e7ff      	b.n	8000c80 <__aeabi_cfcmpeq>

08000c80 <__aeabi_cfcmpeq>:
 8000c80:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c82:	f7ff ffc9 	bl	8000c18 <__cmpsf2>
 8000c86:	2800      	cmp	r0, #0
 8000c88:	bf48      	it	mi
 8000c8a:	f110 0f00 	cmnmi.w	r0, #0
 8000c8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c90 <__aeabi_fcmpeq>:
 8000c90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c94:	f7ff fff4 	bl	8000c80 <__aeabi_cfcmpeq>
 8000c98:	bf0c      	ite	eq
 8000c9a:	2001      	moveq	r0, #1
 8000c9c:	2000      	movne	r0, #0
 8000c9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ca2:	bf00      	nop

08000ca4 <__aeabi_fcmplt>:
 8000ca4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca8:	f7ff ffea 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cac:	bf34      	ite	cc
 8000cae:	2001      	movcc	r0, #1
 8000cb0:	2000      	movcs	r0, #0
 8000cb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_fcmple>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff ffe0 	bl	8000c80 <__aeabi_cfcmpeq>
 8000cc0:	bf94      	ite	ls
 8000cc2:	2001      	movls	r0, #1
 8000cc4:	2000      	movhi	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_fcmpge>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffd2 	bl	8000c78 <__aeabi_cfrcmple>
 8000cd4:	bf94      	ite	ls
 8000cd6:	2001      	movls	r0, #1
 8000cd8:	2000      	movhi	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fcmpgt>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffc8 	bl	8000c78 <__aeabi_cfrcmple>
 8000ce8:	bf34      	ite	cc
 8000cea:	2001      	movcc	r0, #1
 8000cec:	2000      	movcs	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <Set_GPIO_pins>:
//Motor3_Front     Back_Left_Motor                GPIO_PIN_3   PORTB
//Motor3_Back      Back_Left_Motor                GPIO_PIN_4   PORTB
//Motor4_Front     Back_Right_Motor               GPIO_PIN_7   PORTB
//Motor4_Back      Back_Right_Motor               GPIO_PIN_8   PORTB
void Set_GPIO_pins(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000cfa:	2204      	movs	r2, #4
 8000cfc:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000cfe:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	70da      	strb	r2, [r3, #3]



#ifdef HALF_Controle_2_Channel
	// Left_Motors				Front
	GPIO_Pin.pinNumber = Left_Motors_Front;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d0a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000d0c:	490d      	ldr	r1, [pc, #52]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <Set_GPIO_pins+0x54>)
 8000d10:	f001 f8f8 	bl	8001f04 <MCAL_GPIO_Init>

	// Left_Motors  			 Back
	GPIO_Pin.pinNumber = Left_Motors_Back;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1a:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000d1c:	4909      	ldr	r1, [pc, #36]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <Set_GPIO_pins+0x54>)
 8000d20:	f001 f8f0 	bl	8001f04 <MCAL_GPIO_Init>

	// Right_Motors				Front
	GPIO_Pin.pinNumber = Right_Motors_Front;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000d2a:	4906      	ldr	r1, [pc, #24]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d2c:	4806      	ldr	r0, [pc, #24]	; (8000d48 <Set_GPIO_pins+0x54>)
 8000d2e:	f001 f8e9 	bl	8001f04 <MCAL_GPIO_Init>

	// Right_Motors				Back
	GPIO_Pin.pinNumber = Right_Motors_Back;
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d34:	2240      	movs	r2, #64	; 0x40
 8000d36:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 8000d38:	4902      	ldr	r1, [pc, #8]	; (8000d44 <Set_GPIO_pins+0x50>)
 8000d3a:	4803      	ldr	r0, [pc, #12]	; (8000d48 <Set_GPIO_pins+0x54>)
 8000d3c:	f001 f8e2 	bl	8001f04 <MCAL_GPIO_Init>
	GPIO_Pin.pinNumber = Motor4_Back;
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);

#endif

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000030 	.word	0x20000030
 8000d48:	40010c00 	.word	0x40010c00

08000d4c <HAL_DC_Motors_init>:



void HAL_DC_Motors_init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	Timer2.MODE = TIMx_MODE_PWM1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HAL_DC_Motors_init+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	801a      	strh	r2, [r3, #0]
	Timer2.COUNT_MODE = TIMx_COUNT_MODE_UP;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_DC_Motors_init+0x38>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	805a      	strh	r2, [r3, #2]
	Timer2.Prescalers =7;      // 1M
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_DC_Motors_init+0x38>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	809a      	strh	r2, [r3, #4]

#endif

#ifdef HALF_Controle_2_Channel
	// set Channel 1 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Left_Motors);
 8000d62:	2200      	movs	r2, #0
 8000d64:	4907      	ldr	r1, [pc, #28]	; (8000d84 <HAL_DC_Motors_init+0x38>)
 8000d66:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d6a:	f001 fac5 	bl	80022f8 <MCAL_TIMx_Init>

	// set Channel 2 as an Alternative output with speed 10M
	MCAL_TIMx_Init(TIM2, &Timer2, Right_Motors);
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4904      	ldr	r1, [pc, #16]	; (8000d84 <HAL_DC_Motors_init+0x38>)
 8000d72:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d76:	f001 fabf 	bl	80022f8 <MCAL_TIMx_Init>
#endif

	Set_GPIO_pins();
 8000d7a:	f7ff ffbb 	bl	8000cf4 <Set_GPIO_pins>
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000020 	.word	0x20000020

08000d88 <Car_GetBack>:


void Car_GetBack( uint32_t del)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2180      	movs	r1, #128	; 0x80
 8000d94:	4814      	ldr	r0, [pc, #80]	; (8000de8 <Car_GetBack+0x60>)
 8000d96:	f001 f94b 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	4812      	ldr	r0, [pc, #72]	; (8000de8 <Car_GetBack+0x60>)
 8000da0:	f001 f946 	bl	8002030 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000daa:	480f      	ldr	r0, [pc, #60]	; (8000de8 <Car_GetBack+0x60>)
 8000dac:	f001 f940 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <Car_GetBack+0x60>)
 8000db8:	f001 f93a 	bl	8002030 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Right_Motors);
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000dc2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dc6:	f001 fc6b 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(40),Left_Motors);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000dd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dd4:	f001 fc64 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fe0a 	bl	80019f4 <delay_ms>


}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	40010c00 	.word	0x40010c00

08000dec <Car_Rotation_Object>:


void Car_Rotation_Object(uint8_t direction , uint32_t del)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
	if(direction == HAL_Car_TurnRight)
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d128      	bne.n	8000e50 <Car_Rotation_Object+0x64>
	{
		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	482b      	ldr	r0, [pc, #172]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e04:	f001 f914 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2140      	movs	r1, #64	; 0x40
 8000e0c:	4828      	ldr	r0, [pc, #160]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e0e:	f001 f90f 	bl	8002030 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e18:	4825      	ldr	r0, [pc, #148]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e1a:	f001 f909 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e24:	4822      	ldr	r0, [pc, #136]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e26:	f001 f903 	bl	8002030 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Right_Motors);
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000e30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e34:	f001 fc34 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Left_Motors);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000e3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e42:	f001 fc2d 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fdd3 	bl	80019f4 <delay_ms>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Right_Motors);
		delay_ms(del);

	}

}
 8000e4e:	e02a      	b.n	8000ea6 <Car_Rotation_Object+0xba>
	else if(direction == HAL_Car_TurnLeft)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d127      	bne.n	8000ea6 <Car_Rotation_Object+0xba>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e5c:	4814      	ldr	r0, [pc, #80]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e5e:	f001 f8e7 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000e62:	2201      	movs	r2, #1
 8000e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e68:	4811      	ldr	r0, [pc, #68]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e6a:	f001 f8e1 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2140      	movs	r1, #64	; 0x40
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e74:	f001 f8dc 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2180      	movs	r1, #128	; 0x80
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <Car_Rotation_Object+0xc4>)
 8000e7e:	f001 f8d7 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Left_Motors);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000e88:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e8c:	f001 fc08 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Right_Motors);
 8000e90:	2203      	movs	r2, #3
 8000e92:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000e96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000e9a:	f001 fc01 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		delay_ms(del);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f000 fda7 	bl	80019f4 <delay_ms>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40010c00 	.word	0x40010c00

08000eb4 <Car_Routation>:

void Car_Routation(uint8_t direction)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]

	}
#endif

#ifdef HALF_Controle_2_Channel
	if(direction == HAL_Car_TurnRight)
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d124      	bne.n	8000f0e <Car_Routation+0x5a>
	{
		// Right Motors will move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2180      	movs	r1, #128	; 0x80
 8000ec8:	4829      	ldr	r0, [pc, #164]	; (8000f70 <Car_Routation+0xbc>)
 8000eca:	f001 f8b1 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2140      	movs	r1, #64	; 0x40
 8000ed2:	4827      	ldr	r0, [pc, #156]	; (8000f70 <Car_Routation+0xbc>)
 8000ed4:	f001 f8ac 	bl	8002030 <MCAL_GPIO_WritePin>
		// Left Motors will move backward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ede:	4824      	ldr	r0, [pc, #144]	; (8000f70 <Car_Routation+0xbc>)
 8000ee0:	f001 f8a6 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eea:	4821      	ldr	r0, [pc, #132]	; (8000f70 <Car_Routation+0xbc>)
 8000eec:	f001 f8a0 	bl	8002030 <MCAL_GPIO_WritePin>

		// by iteration angle
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Right_Motors);
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000ef6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000efa:	f001 fbd1 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Left_Motors);
 8000efe:	2200      	movs	r2, #0
 8000f00:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000f04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f08:	f001 fbca 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
 8000f0c:	e026      	b.n	8000f5c <Car_Routation+0xa8>

	}
	else if(direction == HAL_Car_TurnLeft)
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d123      	bne.n	8000f5c <Car_Routation+0xa8>
	{

		// motor Front_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1a:	4815      	ldr	r0, [pc, #84]	; (8000f70 <Car_Routation+0xbc>)
 8000f1c:	f001 f888 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	4812      	ldr	r0, [pc, #72]	; (8000f70 <Car_Routation+0xbc>)
 8000f28:	f001 f882 	bl	8002030 <MCAL_GPIO_WritePin>
		// motor Back_Left_Motor move forward
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2140      	movs	r1, #64	; 0x40
 8000f30:	480f      	ldr	r0, [pc, #60]	; (8000f70 <Car_Routation+0xbc>)
 8000f32:	f001 f87d 	bl	8002030 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2180      	movs	r1, #128	; 0x80
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <Car_Routation+0xbc>)
 8000f3c:	f001 f878 	bl	8002030 <MCAL_GPIO_WritePin>

		// by iteration set the duty cycle  according to specific angle to the Front_Left_Motor
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Left_Motors);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000f46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f4a:	f001 fba9 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
		MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(45),Right_Motors);
 8000f4e:	2203      	movs	r2, #3
 8000f50:	f642 21f8 	movw	r1, #11000	; 0x2af8
 8000f54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f58:	f001 fba2 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
	}
#endif

	// by iteration set delay to specific rotation
	delay_ms(700);
 8000f5c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8000f60:	f000 fd48 	bl	80019f4 <delay_ms>


	// stop the movement
	Car_Stop_Moving();
 8000f64:	f000 f858 	bl	8001018 <Car_Stop_Moving>
}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <Car_Move>:



void Car_Move(uint8_t speed , uint32_t distance)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
#endif


#ifdef HALF_Controle_2_Channel

	MCAL_GPIO_WritePin(GPIOB,Left_Motors_Front,GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f86:	4823      	ldr	r0, [pc, #140]	; (8001014 <Car_Move+0xa0>)
 8000f88:	f001 f852 	bl	8002030 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Left_Motors_Back,GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f92:	4820      	ldr	r0, [pc, #128]	; (8001014 <Car_Move+0xa0>)
 8000f94:	f001 f84c 	bl	8002030 <MCAL_GPIO_WritePin>

	MCAL_GPIO_WritePin(GPIOB,Right_Motors_Front,GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	481d      	ldr	r0, [pc, #116]	; (8001014 <Car_Move+0xa0>)
 8000f9e:	f001 f847 	bl	8002030 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,Right_Motors_Back,GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2140      	movs	r1, #64	; 0x40
 8000fa6:	481b      	ldr	r0, [pc, #108]	; (8001014 <Car_Move+0xa0>)
 8000fa8:	f001 f842 	bl	8002030 <MCAL_GPIO_WritePin>

	//uint8_t b = speed - ;

	// by iteration set duty cycle to specific speed
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Left_Motors);	// prefered left - > 40 duty , right -> 70 duty cycle
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	0091      	lsls	r1, r2, #2
 8000fba:	461a      	mov	r2, r3
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000fc8:	3320      	adds	r3, #32
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	4619      	mov	r1, r3
 8000fd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fd4:	f001 fb64 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(speed),Right_Motors);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	0092      	lsls	r2, r2, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	0091      	lsls	r1, r2, #2
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	460b      	mov	r3, r1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	f5c3 439c 	rsb	r3, r3, #19968	; 0x4e00
 8000ff4:	3320      	adds	r3, #32
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001000:	f001 fb4e 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
	//delay_ms(distance);

#endif
	// by iteration set delay to specific distance
	delay_ms(distance);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 fcf4 	bl	80019f4 <delay_ms>

	// stop the movement
	//Car_Stop_Moving();


}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40010c00 	.word	0x40010c00

08001018 <Car_Stop_Moving>:

	Car_Move(speed,0); // 0 is the distance we will set it in the delay function
}

void Car_Stop_Moving(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Front_Right_Motor);
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Back_Left_Motor);
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Back_Right_Motor);
#endif
#ifdef HALF_Controle_2_Channel
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Left_Motors);
 800101c:	2200      	movs	r2, #0
 800101e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001022:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001026:	f001 fb3b 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_Compare_Value(TIM2,_Duty_Cycle(0),Right_Motors);
 800102a:	2203      	movs	r2, #3
 800102c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001030:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001034:	f001 fb34 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
#endif
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}

0800103c <HAL_Flame_init>:

ADC_config_t ADC_Pin;


void HAL_Flame_init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001042:	2302      	movs	r3, #2
 8001044:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_14 ;
 8001046:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4830      	ldr	r0, [pc, #192]	; (8001114 <HAL_Flame_init+0xd8>)
 8001052:	f000 ff57 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_Analog  ;
 8001056:	2300      	movs	r3, #0
 8001058:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_0 ;
 800105a:	2301      	movs	r3, #1
 800105c:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	482c      	ldr	r0, [pc, #176]	; (8001114 <HAL_Flame_init+0xd8>)
 8001064:	f000 ff4e 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 8001068:	2302      	movs	r3, #2
 800106a:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_1 ;
 800106c:	2302      	movs	r3, #2
 800106e:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	4619      	mov	r1, r3
 8001074:	4827      	ldr	r0, [pc, #156]	; (8001114 <HAL_Flame_init+0xd8>)
 8001076:	f000 ff45 	bl	8001f04 <MCAL_GPIO_Init>


	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800107a:	2302      	movs	r3, #2
 800107c:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_4 ;
 800107e:	2310      	movs	r3, #16
 8001080:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4824      	ldr	r0, [pc, #144]	; (8001118 <HAL_Flame_init+0xdc>)
 8001088:	f000 ff3c 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800108c:	2302      	movs	r3, #2
 800108e:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_5 ;
 8001090:	2320      	movs	r3, #32
 8001092:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	481f      	ldr	r0, [pc, #124]	; (8001118 <HAL_Flame_init+0xdc>)
 800109a:	f000 ff33 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 800109e:	2302      	movs	r3, #2
 80010a0:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_10 ;
 80010a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a6:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	4619      	mov	r1, r3
 80010ac:	4819      	ldr	r0, [pc, #100]	; (8001114 <HAL_Flame_init+0xd8>)
 80010ae:	f000 ff29 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 80010b2:	2302      	movs	r3, #2
 80010b4:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_15 ;
 80010b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ba:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <HAL_Flame_init+0xd8>)
 80010c2:	f000 ff1f 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 80010c6:	2302      	movs	r3, #2
 80010c8:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_4 ;
 80010ca:	2310      	movs	r3, #16
 80010cc:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80010ce:	1d3b      	adds	r3, r7, #4
 80010d0:	4619      	mov	r1, r3
 80010d2:	4810      	ldr	r0, [pc, #64]	; (8001114 <HAL_Flame_init+0xd8>)
 80010d4:	f000 ff16 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_PU  ;
 80010d8:	2302      	movs	r3, #2
 80010da:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_13 ;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_Flame_init+0xd8>)
 80010e8:	f000 ff0c 	bl	8001f04 <MCAL_GPIO_Init>
//	ADC_Pin.MODE=ADC_MODE_Single;
//	ADC_Pin.Data_alignment=ADC_Data_alignment_Right;
//	ADC_Pin.sampling_time=ADC_sampling_time_1_5;
//	ADC_Pin.Channel=Ch7;
//	MCAL_ADC_Init(&ADC_Pin);
	ADC_Pin.MODE=ADC_MODE_Single;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	; (800111c <HAL_Flame_init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
	ADC_Pin.Data_alignment=ADC_Data_alignment_Right;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_Flame_init+0xe0>)
 80010f4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80010f8:	609a      	str	r2, [r3, #8]
	ADC_Pin.sampling_time=ADC_sampling_time_1_5;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <HAL_Flame_init+0xe0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
	ADC_Pin.Channel=Ch8;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_Flame_init+0xe0>)
 8001102:	2208      	movs	r2, #8
 8001104:	711a      	strb	r2, [r3, #4]
	MCAL_ADC_Init(&ADC_Pin);
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <HAL_Flame_init+0xe0>)
 8001108:	f000 fc9e 	bl	8001a48 <MCAL_ADC_Init>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40010c00 	.word	0x40010c00
 8001118:	40010800 	.word	0x40010800
 800111c:	20000034 	.word	0x20000034

08001120 <Flame_Frontmid_Read>:
int Flame_Frontmid_Read()
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8001124:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <Flame_Frontmid_Read+0x14>)
 800112a:	f000 ff6a 	bl	8002002 <MCAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
}
 8001130:	4618      	mov	r0, r3
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40010c00 	.word	0x40010c00

08001138 <Flame_FrontLeft_Read>:
int Flame_FrontLeft_Read()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800113c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <Flame_FrontLeft_Read+0x14>)
 8001142:	f000 ff5e 	bl	8002002 <MCAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
}
 8001148:	4618      	mov	r0, r3
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40010c00 	.word	0x40010c00

08001150 <Flame_Distance_Read>:
int Flame_Distance_Read()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	return MCAL_ADC_Read(Ch8);
 8001154:	2008      	movs	r0, #8
 8001156:	f000 fce7 	bl	8001b28 <MCAL_ADC_Read>
 800115a:	4603      	mov	r3, r0
	//return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}

08001160 <Flame_FrontRight_Read>:
int Flame_FrontRight_Read()
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <Flame_FrontRight_Read+0x14>)
 800116a:	f000 ff4a 	bl	8002002 <MCAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
}
 8001170:	4618      	mov	r0, r3
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40010c00 	.word	0x40010c00

08001178 <Flame_Back_Read>:
int Flame_Back_Read()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 800117c:	2120      	movs	r1, #32
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <Flame_Back_Read+0x14>)
 8001180:	f000 ff3f 	bl	8002002 <MCAL_GPIO_ReadPin>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40010800 	.word	0x40010800

08001190 <Flame_Right_Read>:
int Flame_Right_Read()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8001194:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <Flame_Right_Read+0x14>)
 800119a:	f000 ff32 	bl	8002002 <MCAL_GPIO_ReadPin>
 800119e:	4603      	mov	r3, r0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40010c00 	.word	0x40010c00

080011a8 <Flame_Left_Read>:
int Flame_Left_Read()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	return MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80011ac:	2110      	movs	r1, #16
 80011ae:	4803      	ldr	r0, [pc, #12]	; (80011bc <Flame_Left_Read+0x14>)
 80011b0:	f000 ff27 	bl	8002002 <MCAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40010800 	.word	0x40010800

080011c0 <Servo_Init>:


#include "Servo.h"

void Servo_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
	uint16_t top;
	top=( ( 0.02 *  8000000 ) / 8 );
 80011c6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011ca:	82fb      	strh	r3, [r7, #22]
	TIMx_config_t  TIMx_Config;
	TIMx_Config.COUNT_MODE=TIMx_COUNT_MODE_UP;
 80011cc:	2300      	movs	r3, #0
 80011ce:	80fb      	strh	r3, [r7, #6]
	TIMx_Config.MODE=TIMx_MODE_PWM2;
 80011d0:	2301      	movs	r3, #1
 80011d2:	80bb      	strh	r3, [r7, #4]
	TIMx_Config.Prescalers=7;  // timer clock 1mhz
 80011d4:	2307      	movs	r3, #7
 80011d6:	813b      	strh	r3, [r7, #8]
	MCAL_TIMx_Init(TIM2, &TIMx_Config , CH2);
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011e2:	f001 f889 	bl	80022f8 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM2,0,CH2);
 80011e6:	2201      	movs	r2, #1
 80011e8:	2100      	movs	r1, #0
 80011ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011ee:	f001 fa57 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_TOP_Value(TIM2, top);//Frequency 50 hz
 80011f2:	8afb      	ldrh	r3, [r7, #22]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011fa:	f001 fa83 	bl	8002704 <MCAL_TIMx_Set_TOP_Value>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <My_Servo>:

void My_Servo(uint8_t angle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	uint16_t compared;
	compared=500+((11.11*angle)+0.5);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f8fd 	bl	8000414 <__aeabi_i2d>
 800121a:	a315      	add	r3, pc, #84	; (adr r3, 8001270 <My_Servo+0x68>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f962 	bl	80004e8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <My_Servo+0x70>)
 8001232:	f7fe ffa3 	bl	800017c <__adddf3>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <My_Servo+0x74>)
 8001244:	f7fe ff9a 	bl	800017c <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fb5c 	bl	800090c <__aeabi_d2uiz>
 8001254:	4603      	mov	r3, r0
 8001256:	81fb      	strh	r3, [r7, #14]
	MCAL_TIMx_Set_Compare_Value(TIM2,compared,CH2);
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001262:	f001 fa1d 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>

}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	eb851eb8 	.word	0xeb851eb8
 8001274:	40263851 	.word	0x40263851
 8001278:	3fe00000 	.word	0x3fe00000
 800127c:	407f4000 	.word	0x407f4000

08001280 <HAL_Ultrasonic_init>:

static GPIO_Pinconfig_t GPIO_Pin;


void HAL_Ultrasonic_init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	MCAL_TIM4_CAP_Init();
 8001284:	f001 f998 	bl	80025b8 <MCAL_TIM4_CAP_Init>
	// set trigger as an output
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8001288:	4b07      	ldr	r3, [pc, #28]	; (80012a8 <HAL_Ultrasonic_init+0x28>)
 800128a:	2204      	movs	r2, #4
 800128c:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_Ultrasonic_init+0x28>)
 8001290:	2201      	movs	r2, #1
 8001292:	70da      	strb	r2, [r3, #3]
	GPIO_Pin.pinNumber = Trigger_Pin1;
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <HAL_Ultrasonic_init+0x28>)
 8001296:	2220      	movs	r2, #32
 8001298:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(GPIOB,&GPIO_Pin);
 800129a:	4903      	ldr	r1, [pc, #12]	; (80012a8 <HAL_Ultrasonic_init+0x28>)
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <HAL_Ultrasonic_init+0x2c>)
 800129e:	f000 fe31 	bl	8001f04 <MCAL_GPIO_Init>
	//	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
	//		GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
	//		GPIO_Pin.pinNumber = Trigger_Pin2;
	//		MCAL_GPIO_Init(GPIOB,&GPIO_Pin);

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000004c 	.word	0x2000004c
 80012ac:	40010c00 	.word	0x40010c00

080012b0 <Ultrasnic_Read>:

float Ultrasnic_Read(channel Chan)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
	float Distance = 0 ;
 80012ba:	f04f 0300 	mov.w	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
	//
	//		break;
	// }

	//trigger pulse for 10ms to start the ultrasonic
	MCAL_GPIO_WritePin(PORT, Trigger_Pin1, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2120      	movs	r1, #32
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <Ultrasnic_Read+0x68>)
 80012c6:	f000 feb3 	bl	8002030 <MCAL_GPIO_WritePin>
	delay_ms(10);
 80012ca:	200a      	movs	r0, #10
 80012cc:	f000 fb92 	bl	80019f4 <delay_ms>
	MCAL_GPIO_WritePin(PORT, Trigger_Pin1, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2120      	movs	r1, #32
 80012d4:	4810      	ldr	r0, [pc, #64]	; (8001318 <Ultrasnic_Read+0x68>)
 80012d6:	f000 feab 	bl	8002030 <MCAL_GPIO_WritePin>

	// The speed of sound in free space is 340 m/s = 34000 cm/s
	// the speed = Distance / time
	// the Distance = speed * time = 34000 * time (the time of pulse on ECHO pin)
	Distance = (MCAL_TIM4_CAP_Get_High(Chan)/58.3);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f99d 	bl	800261c <MCAL_TIM4_CAP_Get_High>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f8a7 	bl	8000438 <__aeabi_f2d>
 80012ea:	a309      	add	r3, pc, #36	; (adr r3, 8001310 <Ultrasnic_Read+0x60>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff fa24 	bl	800073c <__aeabi_ddiv>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4610      	mov	r0, r2
 80012fa:	4619      	mov	r1, r3
 80012fc:	f7ff fb26 	bl	800094c <__aeabi_d2f>
 8001300:	4603      	mov	r3, r0
 8001302:	60fb      	str	r3, [r7, #12]
	return Distance;
 8001304:	68fb      	ldr	r3, [r7, #12]

}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	66666666 	.word	0x66666666
 8001314:	404d2666 	.word	0x404d2666
 8001318:	40010c00 	.word	0x40010c00

0800131c <Clock_INIT>:




void Clock_INIT(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0



	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <Clock_INIT+0x9c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a24      	ldr	r2, [pc, #144]	; (80013b8 <Clock_INIT+0x9c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <Clock_INIT+0x9c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4a21      	ldr	r2, [pc, #132]	; (80013b8 <Clock_INIT+0x9c>)
 8001332:	f043 0308 	orr.w	r3, r3, #8
 8001336:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_GPIOC_CLK_EN();
 8001338:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <Clock_INIT+0x9c>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <Clock_INIT+0x9c>)
 800133e:	f043 0310 	orr.w	r3, r3, #16
 8001342:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <Clock_INIT+0x9c>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a1b      	ldr	r2, [pc, #108]	; (80013b8 <Clock_INIT+0x9c>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 8001350:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <Clock_INIT+0x9c>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <Clock_INIT+0x9c>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	61d3      	str	r3, [r2, #28]
	RCC_TIM3_CLK_Enable();
 800135c:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <Clock_INIT+0x9c>)
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	4a15      	ldr	r2, [pc, #84]	; (80013b8 <Clock_INIT+0x9c>)
 8001362:	f043 0302 	orr.w	r3, r3, #2
 8001366:	61d3      	str	r3, [r2, #28]
	//	RCC_TIM4_CLK_Enable();
	RCC_ADC1_CLK_Enable();
 8001368:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <Clock_INIT+0x9c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <Clock_INIT+0x9c>)
 800136e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001372:	6193      	str	r3, [r2, #24]
	RCC_TIM1_CLK_Enable();
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <Clock_INIT+0x9c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <Clock_INIT+0x9c>)
 800137a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137e:	6193      	str	r3, [r2, #24]


	RCC_CFGR |=0b10<<0;  // sw select PLL
 8001380:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <Clock_INIT+0xa0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <Clock_INIT+0xa0>)
 8001386:	f043 0302 	orr.w	r3, r3, #2
 800138a:	6013      	str	r3, [r2, #0]
	RCC_CFGR |=0b0110<<18;  //PLL multiplication factor(8)
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <Clock_INIT+0xa0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <Clock_INIT+0xa0>)
 8001392:	f443 13c0 	orr.w	r3, r3, #1572864	; 0x180000
 8001396:	6013      	str	r3, [r2, #0]
	RCC_CFGR |=0b1001<<4;  //AHB prescaler (AHB at 8 MH)
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <Clock_INIT+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <Clock_INIT+0xa0>)
 800139e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80013a2:	6013      	str	r3, [r2, #0]
	RCC_CR |=0b1<<24;  // PLL enable
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <Clock_INIT+0x9c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a03      	ldr	r2, [pc, #12]	; (80013b8 <Clock_INIT+0x9c>)
 80013aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ae:	6013      	str	r3, [r2, #0]

}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40021004 	.word	0x40021004

080013c0 <pumb>:


void pumb(uint8_t x)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, x);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	461a      	mov	r2, r3
 80013ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013d2:	4803      	ldr	r0, [pc, #12]	; (80013e0 <pumb+0x20>)
 80013d4:	f000 fe2c 	bl	8002030 <MCAL_GPIO_WritePin>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40010c00 	.word	0x40010c00

080013e4 <Flame_MaxReading>:



Redirection Flame_MaxReading()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if (Flame_Frontmid_Read())
 80013e8:	f7ff fe9a 	bl	8001120 <Flame_Frontmid_Read>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <Flame_MaxReading+0x12>
	{
		return Front_mid_en;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e023      	b.n	800143e <Flame_MaxReading+0x5a>
	}
	else if(Flame_FrontRight_Read())
 80013f6:	f7ff feb3 	bl	8001160 <Flame_FrontRight_Read>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <Flame_MaxReading+0x20>
	{
		return Front_Right_en;
 8001400:	2305      	movs	r3, #5
 8001402:	e01c      	b.n	800143e <Flame_MaxReading+0x5a>
	}
	else if(Flame_FrontLeft_Read())
 8001404:	f7ff fe98 	bl	8001138 <Flame_FrontLeft_Read>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <Flame_MaxReading+0x2e>
	{
		return Front_Left_en;
 800140e:	2306      	movs	r3, #6
 8001410:	e015      	b.n	800143e <Flame_MaxReading+0x5a>
	}
	else if (Flame_Right_Read())
 8001412:	f7ff febd 	bl	8001190 <Flame_Right_Read>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <Flame_MaxReading+0x3c>
	{
		return Right_en;
 800141c:	2302      	movs	r3, #2
 800141e:	e00e      	b.n	800143e <Flame_MaxReading+0x5a>
	}
	else if(Flame_Left_Read())
 8001420:	f7ff fec2 	bl	80011a8 <Flame_Left_Read>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <Flame_MaxReading+0x4a>
	{
		return Left_en;
 800142a:	2303      	movs	r3, #3
 800142c:	e007      	b.n	800143e <Flame_MaxReading+0x5a>
	}

	else if (Flame_Back_Read())
 800142e:	f7ff fea3 	bl	8001178 <Flame_Back_Read>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <Flame_MaxReading+0x58>
	{
		return Back_en;
 8001438:	2304      	movs	r3, #4
 800143a:	e000      	b.n	800143e <Flame_MaxReading+0x5a>
	}

	return NONE;
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <CarAdjustament>:
//}
//
//

void CarAdjustament (Redirection MaxReading)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	switch (MaxReading)
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	2b06      	cmp	r3, #6
 8001452:	d837      	bhi.n	80014c4 <CarAdjustament+0x80>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <CarAdjustament+0x18>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	080014c5 	.word	0x080014c5
 8001460:	080014c5 	.word	0x080014c5
 8001464:	08001497 	.word	0x08001497
 8001468:	08001479 	.word	0x08001479
 800146c:	080014a7 	.word	0x080014a7
 8001470:	080014b7 	.word	0x080014b7
 8001474:	08001489 	.word	0x08001489
	{
	case NONE:
	case Front_mid_en:
		break;
	case Left_en :
		Car_Rotation_Object(Car_TurnLeft , Left_delay);
 8001478:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800147c:	2001      	movs	r0, #1
 800147e:	f7ff fcb5 	bl	8000dec <Car_Rotation_Object>
		Car_Stop_Moving();
 8001482:	f7ff fdc9 	bl	8001018 <Car_Stop_Moving>
		break;
 8001486:	e01e      	b.n	80014c6 <CarAdjustament+0x82>
	case Front_Left_en:
		//turn left

		Car_Rotation_Object(Car_TurnLeft , Front_Left_delay);
 8001488:	21fa      	movs	r1, #250	; 0xfa
 800148a:	2001      	movs	r0, #1
 800148c:	f7ff fcae 	bl	8000dec <Car_Rotation_Object>
		Car_Stop_Moving();
 8001490:	f7ff fdc2 	bl	8001018 <Car_Stop_Moving>
		break;
 8001494:	e017      	b.n	80014c6 <CarAdjustament+0x82>
	case Right_en :
		Car_Rotation_Object(Car_TurnRight , Right_delay);
 8001496:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fca6 	bl	8000dec <Car_Rotation_Object>
		Car_Stop_Moving();
 80014a0:	f7ff fdba 	bl	8001018 <Car_Stop_Moving>
		break;
 80014a4:	e00f      	b.n	80014c6 <CarAdjustament+0x82>
	case Back_en :
		Car_Rotation_Object(Car_TurnRight , Back_delay);
 80014a6:	f240 31b6 	movw	r1, #950	; 0x3b6
 80014aa:	2000      	movs	r0, #0
 80014ac:	f7ff fc9e 	bl	8000dec <Car_Rotation_Object>
		Car_Stop_Moving();
 80014b0:	f7ff fdb2 	bl	8001018 <Car_Stop_Moving>
		break;
 80014b4:	e007      	b.n	80014c6 <CarAdjustament+0x82>
	case Front_Right_en:

		//turn right

		Car_Rotation_Object(Car_TurnRight , Front_Right_delay);
 80014b6:	21fa      	movs	r1, #250	; 0xfa
 80014b8:	2000      	movs	r0, #0
 80014ba:	f7ff fc97 	bl	8000dec <Car_Rotation_Object>
		Car_Stop_Moving();
 80014be:	f7ff fdab 	bl	8001018 <Car_Stop_Moving>
		break;
 80014c2:	e000      	b.n	80014c6 <CarAdjustament+0x82>
	default :
		break;
 80014c4:	bf00      	nop
	}

	//	Car_Move(Car_Speed_50, 200);
	//	Car_Stop_Moving();

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop

080014d0 <CarMovements>:




char CarMovements()
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0



	int i = 0 ;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
	//	if(n > 50)
	//	{
	//		n = 1;
	//	}

	for(i = 0 ; i < n; i++)
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	e033      	b.n	8001548 <CarMovements+0x78>
	{
		//turn_right -> n * count
		Car_Move( Car_Speed_50, DISTANCE);
 80014e0:	210f      	movs	r1, #15
 80014e2:	2032      	movs	r0, #50	; 0x32
 80014e4:	f7ff fd46 	bl	8000f74 <Car_Move>
		//((Ultrasnic_Read(CH2) <= ULTRA_Threshold) ||(Ultrasnic_Read(CH1) <= ULTRA_Threshold) || (Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read()))
		if(((Ultrasnic_Read(CH1) <= ULTRA_Threshold) || (Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read())))
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fee1 	bl	80012b0 <Ultrasnic_Read>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4940      	ldr	r1, [pc, #256]	; (80015f4 <CarMovements+0x124>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbe0 	bl	8000cb8 <__aeabi_fcmple>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d118      	bne.n	8001530 <CarMovements+0x60>
 80014fe:	f7ff fe0f 	bl	8001120 <Flame_Frontmid_Read>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d113      	bne.n	8001530 <CarMovements+0x60>
 8001508:	f7ff fe36 	bl	8001178 <Flame_Back_Read>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10e      	bne.n	8001530 <CarMovements+0x60>
 8001512:	f7ff fe3d 	bl	8001190 <Flame_Right_Read>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <CarMovements+0x60>
 800151c:	f7ff fe44 	bl	80011a8 <Flame_Left_Read>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d104      	bne.n	8001530 <CarMovements+0x60>
 8001526:	f7ff fe1b 	bl	8001160 <Flame_FrontRight_Read>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <CarMovements+0x72>
		{
			Car_Stop_Moving();
 8001530:	f7ff fd72 	bl	8001018 <Car_Stop_Moving>
			n--;
 8001534:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <CarMovements+0x128>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3b01      	subs	r3, #1
 800153a:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <CarMovements+0x128>)
 800153c:	6013      	str	r3, [r2, #0]
			return 0;
 800153e:	2300      	movs	r3, #0
 8001540:	e053      	b.n	80015ea <CarMovements+0x11a>
	for(i = 0 ; i < n; i++)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3301      	adds	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <CarMovements+0x128>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbc6      	blt.n	80014e0 <CarMovements+0x10>
		}

	}
	Car_Stop_Moving();
 8001552:	f7ff fd61 	bl	8001018 <Car_Stop_Moving>
	Car_Routation( Car_TurnRight); // angle 90 -> duty 30 . and delay 800
 8001556:	2000      	movs	r0, #0
 8001558:	f7ff fcac 	bl	8000eb4 <Car_Routation>
	for(i = 0 ; i < n; i++)
 800155c:	2300      	movs	r3, #0
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	e033      	b.n	80015ca <CarMovements+0xfa>
	{
		//turn_right -> n * count
		Car_Move( Car_Speed_50, DISTANCE);
 8001562:	210f      	movs	r1, #15
 8001564:	2032      	movs	r0, #50	; 0x32
 8001566:	f7ff fd05 	bl	8000f74 <Car_Move>
		if(((Ultrasnic_Read(CH1) <= ULTRA_Threshold) || (Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read())))
 800156a:	2000      	movs	r0, #0
 800156c:	f7ff fea0 	bl	80012b0 <Ultrasnic_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	4920      	ldr	r1, [pc, #128]	; (80015f4 <CarMovements+0x124>)
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb9f 	bl	8000cb8 <__aeabi_fcmple>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d118      	bne.n	80015b2 <CarMovements+0xe2>
 8001580:	f7ff fdce 	bl	8001120 <Flame_Frontmid_Read>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <CarMovements+0xe2>
 800158a:	f7ff fdf5 	bl	8001178 <Flame_Back_Read>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d10e      	bne.n	80015b2 <CarMovements+0xe2>
 8001594:	f7ff fdfc 	bl	8001190 <Flame_Right_Read>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <CarMovements+0xe2>
 800159e:	f7ff fe03 	bl	80011a8 <Flame_Left_Read>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d104      	bne.n	80015b2 <CarMovements+0xe2>
 80015a8:	f7ff fdda 	bl	8001160 <Flame_FrontRight_Read>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d008      	beq.n	80015c4 <CarMovements+0xf4>
		{
			Car_Stop_Moving();
 80015b2:	f7ff fd31 	bl	8001018 <Car_Stop_Moving>
			n--;
 80015b6:	4b10      	ldr	r3, [pc, #64]	; (80015f8 <CarMovements+0x128>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	3b01      	subs	r3, #1
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <CarMovements+0x128>)
 80015be:	6013      	str	r3, [r2, #0]
			return 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	e012      	b.n	80015ea <CarMovements+0x11a>
	for(i = 0 ; i < n; i++)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3301      	adds	r3, #1
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <CarMovements+0x128>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	dbc6      	blt.n	8001562 <CarMovements+0x92>
		}
	}	//turn right -> n * count
	Car_Stop_Moving();
 80015d4:	f7ff fd20 	bl	8001018 <Car_Stop_Moving>
	Car_Routation( Car_TurnRight);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff fc6b 	bl	8000eb4 <Car_Routation>
	n += 5;
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <CarMovements+0x128>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3305      	adds	r3, #5
 80015e4:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <CarMovements+0x128>)
 80015e6:	6013      	str	r3, [r2, #0]
	return 0;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	42480000 	.word	0x42480000
 80015f8:	20000000 	.word	0x20000000

080015fc <CarAction>:

void CarAction ()
{
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0

	//Flame_Distance_Read() > Flame_Threshold
	if(Flame_Distance_Read() < Flame_Threshold)
 8001602:	f7ff fda5 	bl	8001150 <Flame_Distance_Read>
 8001606:	4603      	mov	r3, r0
 8001608:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800160c:	f280 80f4 	bge.w	80017f8 <CarAction+0x1fc>
	{
		if((!(Flame_Frontmid_Read())) && (!(Flame_FrontRight_Read() && Flame_FrontLeft_Read())))
 8001610:	f7ff fd86 	bl	8001120 <Flame_Frontmid_Read>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d14d      	bne.n	80016b6 <CarAction+0xba>
 800161a:	f7ff fda1 	bl	8001160 <Flame_FrontRight_Read>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <CarAction+0x32>
 8001624:	f7ff fd88 	bl	8001138 <Flame_FrontLeft_Read>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d143      	bne.n	80016b6 <CarAction+0xba>
		{
			CarAdjustament (Flame_MaxReading());
 800162e:	f7ff fed9 	bl	80013e4 <Flame_MaxReading>
 8001632:	4603      	mov	r3, r0
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff05 	bl	8001444 <CarAdjustament>
		}
		while(!(Ultrasnic_Read(CH1) <= ULTRA_Fire_Threshold))
 800163a:	e03c      	b.n	80016b6 <CarAction+0xba>
		{
			if((Ultrasnic_Read(CH1) <= ULTRA_Fire_Threshold) && Flame_Frontmid_Read())
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff fe37 	bl	80012b0 <Ultrasnic_Read>
 8001642:	4603      	mov	r3, r0
 8001644:	496e      	ldr	r1, [pc, #440]	; (8001800 <CarAction+0x204>)
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fb36 	bl	8000cb8 <__aeabi_fcmple>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d004      	beq.n	800165c <CarAction+0x60>
 8001652:	f7ff fd65 	bl	8001120 <Flame_Frontmid_Read>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d142      	bne.n	80016e2 <CarAction+0xe6>
			{
				break;
			}
			//move forward
			Car_Move(Car_Speed_40 , distance_step);
 800165c:	210f      	movs	r1, #15
 800165e:	2028      	movs	r0, #40	; 0x28
 8001660:	f7ff fc88 	bl	8000f74 <Car_Move>
			if((!(Flame_Frontmid_Read())) && (!(Flame_FrontRight_Read() && Flame_FrontLeft_Read())))
 8001664:	f7ff fd5c 	bl	8001120 <Flame_Frontmid_Read>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d10f      	bne.n	800168e <CarAction+0x92>
 800166e:	f7ff fd77 	bl	8001160 <Flame_FrontRight_Read>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d004      	beq.n	8001682 <CarAction+0x86>
 8001678:	f7ff fd5e 	bl	8001138 <Flame_FrontLeft_Read>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d105      	bne.n	800168e <CarAction+0x92>
			{
				CarAdjustament (Flame_MaxReading());
 8001682:	f7ff feaf 	bl	80013e4 <Flame_MaxReading>
 8001686:	4603      	mov	r3, r0
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff fedb 	bl	8001444 <CarAdjustament>
			}
			if((!(Flame_Frontmid_Read())) && ((Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read())))
 800168e:	f7ff fd47 	bl	8001120 <Flame_Frontmid_Read>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10e      	bne.n	80016b6 <CarAction+0xba>
 8001698:	f7ff fd6e 	bl	8001178 <Flame_Back_Read>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d120      	bne.n	80016e4 <CarAction+0xe8>
 80016a2:	f7ff fd75 	bl	8001190 <Flame_Right_Read>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d11b      	bne.n	80016e4 <CarAction+0xe8>
 80016ac:	f7ff fd7c 	bl	80011a8 <Flame_Left_Read>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d116      	bne.n	80016e4 <CarAction+0xe8>
		while(!(Ultrasnic_Read(CH1) <= ULTRA_Fire_Threshold))
 80016b6:	2000      	movs	r0, #0
 80016b8:	f7ff fdfa 	bl	80012b0 <Ultrasnic_Read>
 80016bc:	4603      	mov	r3, r0
 80016be:	2201      	movs	r2, #1
 80016c0:	4614      	mov	r4, r2
 80016c2:	494f      	ldr	r1, [pc, #316]	; (8001800 <CarAction+0x204>)
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff faf7 	bl	8000cb8 <__aeabi_fcmple>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <CarAction+0xd8>
 80016d0:	2300      	movs	r3, #0
 80016d2:	461c      	mov	r4, r3
 80016d4:	b2e3      	uxtb	r3, r4
 80016d6:	f083 0301 	eor.w	r3, r3, #1
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1ad      	bne.n	800163c <CarAction+0x40>
 80016e0:	e000      	b.n	80016e4 <CarAction+0xe8>
				break;
 80016e2:	bf00      	nop
			{
				break;
			}
		}
		Car_Stop_Moving();
 80016e4:	f7ff fc98 	bl	8001018 <Car_Stop_Moving>
		//		if((!(Flame_Frontmid_Read())) && (!(Flame_FrontRight_Read() && Flame_FrontLeft_Read())))
		//		{
		//			CarAdjustament (Flame_MaxReading());
		//		}

		while((Ultrasnic_Read(CH1) <= ULTRA_Fire_Threshold) && Flame_Frontmid_Read())
 80016e8:	e06d      	b.n	80017c6 <CarAction+0x1ca>

			//			if((!(Flame_Frontmid_Read())) && (!(Flame_FrontRight_Read() && Flame_FrontLeft_Read())))
			//			{
			//				CarAdjustament (Flame_MaxReading());
			//			}
			if(Ultrasnic_Read(CH1) <= 20)
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fde0 	bl	80012b0 <Ultrasnic_Read>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4944      	ldr	r1, [pc, #272]	; (8001804 <CarAction+0x208>)
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff fadf 	bl	8000cb8 <__aeabi_fcmple>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d004      	beq.n	800170a <CarAction+0x10e>
			{
				Car_GetBack(200);
 8001700:	20c8      	movs	r0, #200	; 0xc8
 8001702:	f7ff fb41 	bl	8000d88 <Car_GetBack>
				Car_Stop_Moving();
 8001706:	f7ff fc87 	bl	8001018 <Car_Stop_Moving>
			}
			pumb(pumb_on);
 800170a:	2001      	movs	r0, #1
 800170c:	f7ff fe58 	bl	80013c0 <pumb>
			int i = 0 , j =0;
 8001710:	2300      	movs	r3, #0
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
			for(j = 0 ; j < 1 ; j++)
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
 800171c:	e050      	b.n	80017c0 <CarAction+0x1c4>
			{
				for(i = 0 ; i <= 30; i+=2)
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	e00c      	b.n	800173e <CarAction+0x142>
				{
					My_Servo(90 + i);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	b2db      	uxtb	r3, r3
 8001728:	335a      	adds	r3, #90	; 0x5a
 800172a:	b2db      	uxtb	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fd6b 	bl	8001208 <My_Servo>
					delay_ms(30);
 8001732:	201e      	movs	r0, #30
 8001734:	f000 f95e 	bl	80019f4 <delay_ms>
				for(i = 0 ; i <= 30; i+=2)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3302      	adds	r3, #2
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b1e      	cmp	r3, #30
 8001742:	ddef      	ble.n	8001724 <CarAction+0x128>
				}
				for(i = 30 ; i >= 0; i-=2)
 8001744:	231e      	movs	r3, #30
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	e00c      	b.n	8001764 <CarAction+0x168>
				{
					My_Servo(90 + i);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	b2db      	uxtb	r3, r3
 800174e:	335a      	adds	r3, #90	; 0x5a
 8001750:	b2db      	uxtb	r3, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fd58 	bl	8001208 <My_Servo>
					delay_ms(30);
 8001758:	201e      	movs	r0, #30
 800175a:	f000 f94b 	bl	80019f4 <delay_ms>
				for(i = 30 ; i >= 0; i-=2)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3b02      	subs	r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	daef      	bge.n	800174a <CarAction+0x14e>
				}
				for(i = 0 ; i <= 30; i+=2)
 800176a:	2300      	movs	r3, #0
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	e00d      	b.n	800178c <CarAction+0x190>
				{
					My_Servo(90 - i);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001778:	b2db      	uxtb	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fd44 	bl	8001208 <My_Servo>
					delay_ms(30);
 8001780:	201e      	movs	r0, #30
 8001782:	f000 f937 	bl	80019f4 <delay_ms>
				for(i = 0 ; i <= 30; i+=2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3302      	adds	r3, #2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b1e      	cmp	r3, #30
 8001790:	ddee      	ble.n	8001770 <CarAction+0x174>
				}
				for(i = 30 ; i >= 0; i-=2)
 8001792:	231e      	movs	r3, #30
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	e00d      	b.n	80017b4 <CarAction+0x1b8>
				{
					My_Servo(90 - i);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fd30 	bl	8001208 <My_Servo>
					delay_ms(30);
 80017a8:	201e      	movs	r0, #30
 80017aa:	f000 f923 	bl	80019f4 <delay_ms>
				for(i = 30 ; i >= 0; i-=2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3b02      	subs	r3, #2
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	daee      	bge.n	8001798 <CarAction+0x19c>
			for(j = 0 ; j < 1 ; j++)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	603b      	str	r3, [r7, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	ddab      	ble.n	800171e <CarAction+0x122>
		while((Ultrasnic_Read(CH1) <= ULTRA_Fire_Threshold) && Flame_Frontmid_Read())
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fd72 	bl	80012b0 <Ultrasnic_Read>
 80017cc:	4603      	mov	r3, r0
 80017ce:	490c      	ldr	r1, [pc, #48]	; (8001800 <CarAction+0x204>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fa71 	bl	8000cb8 <__aeabi_fcmple>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <CarAction+0x1ea>
 80017dc:	f7ff fca0 	bl	8001120 <Flame_Frontmid_Read>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d181      	bne.n	80016ea <CarAction+0xee>
				}
			}

		}

		pumb(pumb_off);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f7ff fdea 	bl	80013c0 <pumb>
		MCAL_TIMx_Set_Compare_Value(TIM2,0,CH2);
 80017ec:	2201      	movs	r2, #1
 80017ee:	2100      	movs	r1, #0
 80017f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017f4:	f000 ff54 	bl	80026a0 <MCAL_TIMx_Set_Compare_Value>

	//Car_GetBack(500);
	//Car_Rotation_Object(Car_TurnRight , 500 );
	//Car_Stop_Moving();

}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	41f00000 	.word	0x41f00000
 8001804:	41a00000 	.word	0x41a00000

08001808 <Init_pumb>:

void Init_pumb()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t Conf;
	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 800180e:	2304      	movs	r3, #4
 8001810:	71bb      	strb	r3, [r7, #6]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
	Conf.pinNumber=GPIO_PIN_12;
 8001816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181a:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB,&Conf);
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	4619      	mov	r1, r3
 8001820:	4803      	ldr	r0, [pc, #12]	; (8001830 <Init_pumb+0x28>)
 8001822:	f000 fb6f 	bl	8001f04 <MCAL_GPIO_Init>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40010c00 	.word	0x40010c00

08001834 <HAL_Driver_init>:

void HAL_Driver_init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	HAL_DC_Motors_init();
 8001838:	f7ff fa88 	bl	8000d4c <HAL_DC_Motors_init>
	HAL_Flame_init();
 800183c:	f7ff fbfe 	bl	800103c <HAL_Flame_init>
	HAL_Ultrasonic_init();
 8001840:	f7ff fd1e 	bl	8001280 <HAL_Ultrasonic_init>
	Servo_Init();
 8001844:	f7ff fcbc 	bl	80011c0 <Servo_Init>
	Init_pumb();
 8001848:	f7ff ffde 	bl	8001808 <Init_pumb>

}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <Object_Handle>:


void Object_Handle()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	Car_Stop_Moving();
 8001854:	f7ff fbe0 	bl	8001018 <Car_Stop_Moving>
	Car_GetBack(500);
 8001858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800185c:	f7ff fa94 	bl	8000d88 <Car_GetBack>
	Car_Rotation_Object(Car_TurnRight , 500 );
 8001860:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001864:	2000      	movs	r0, #0
 8001866:	f7ff fac1 	bl	8000dec <Car_Rotation_Object>
	Car_Stop_Moving();
 800186a:	f7ff fbd5 	bl	8001018 <Car_Stop_Moving>
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
	...

08001874 <main>:



int main (){
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0

	Clock_INIT();
 800187a:	f7ff fd4f 	bl	800131c <Clock_INIT>
	HAL_Driver_init();
 800187e:	f7ff ffd9 	bl	8001834 <HAL_Driver_init>

	//    LCD_init();

	unsigned char object_detected = 0 ;
 8001882:	2300      	movs	r3, #0
 8001884:	71fb      	strb	r3, [r7, #7]
	unsigned char flame_detected = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	71bb      	strb	r3, [r7, #6]

	GPIO_Pinconfig_t Conf;
	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_OD;
 800188a:	2305      	movs	r3, #5
 800188c:	70bb      	strb	r3, [r7, #2]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_2M;
 800188e:	2302      	movs	r3, #2
 8001890:	70fb      	strb	r3, [r7, #3]
	Conf.pinNumber=GPIO_PIN_13;
 8001892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001896:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC,&Conf);
 8001898:	463b      	mov	r3, r7
 800189a:	4619      	mov	r1, r3
 800189c:	483e      	ldr	r0, [pc, #248]	; (8001998 <main+0x124>)
 800189e:	f000 fb31 	bl	8001f04 <MCAL_GPIO_Init>


	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80018a2:	2304      	movs	r3, #4
 80018a4:	70bb      	strb	r3, [r7, #2]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_2M;
 80018a6:	2302      	movs	r3, #2
 80018a8:	70fb      	strb	r3, [r7, #3]
	Conf.pinNumber=GPIO_PIN_14;
 80018aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ae:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC,&Conf);
 80018b0:	463b      	mov	r3, r7
 80018b2:	4619      	mov	r1, r3
 80018b4:	4838      	ldr	r0, [pc, #224]	; (8001998 <main+0x124>)
 80018b6:	f000 fb25 	bl	8001f04 <MCAL_GPIO_Init>

	Conf.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 80018ba:	2304      	movs	r3, #4
 80018bc:	70bb      	strb	r3, [r7, #2]
	Conf.GPIO_OUTPUT_Speed=GPIO_speed_2M;
 80018be:	2302      	movs	r3, #2
 80018c0:	70fb      	strb	r3, [r7, #3]
	Conf.pinNumber=GPIO_PIN_15;
 80018c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018c6:	803b      	strh	r3, [r7, #0]
	MCAL_GPIO_Init(GPIOC,&Conf);
 80018c8:	463b      	mov	r3, r7
 80018ca:	4619      	mov	r1, r3
 80018cc:	4832      	ldr	r0, [pc, #200]	; (8001998 <main+0x124>)
 80018ce:	f000 fb19 	bl	8001f04 <MCAL_GPIO_Init>

	while(1)
	{

		object_detected = (Ultrasnic_Read(CH1) <= ULTRA_Threshold);
 80018d2:	2000      	movs	r0, #0
 80018d4:	f7ff fcec 	bl	80012b0 <Ultrasnic_Read>
 80018d8:	4603      	mov	r3, r0
 80018da:	2201      	movs	r2, #1
 80018dc:	4614      	mov	r4, r2
 80018de:	492f      	ldr	r1, [pc, #188]	; (800199c <main+0x128>)
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff f9e9 	bl	8000cb8 <__aeabi_fcmple>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <main+0x7c>
 80018ec:	2300      	movs	r3, #0
 80018ee:	461c      	mov	r4, r3
 80018f0:	b2e3      	uxtb	r3, r4
 80018f2:	71fb      	strb	r3, [r7, #7]
		flame_detected = ((Flame_Frontmid_Read()) || (Flame_Back_Read()) || (Flame_Right_Read()) || (Flame_Left_Read()) || ( Flame_FrontRight_Read()) || ( Flame_FrontLeft_Read()) );
 80018f4:	f7ff fc14 	bl	8001120 <Flame_Frontmid_Read>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d118      	bne.n	8001930 <main+0xbc>
 80018fe:	f7ff fc3b 	bl	8001178 <Flame_Back_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d113      	bne.n	8001930 <main+0xbc>
 8001908:	f7ff fc42 	bl	8001190 <Flame_Right_Read>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10e      	bne.n	8001930 <main+0xbc>
 8001912:	f7ff fc49 	bl	80011a8 <Flame_Left_Read>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <main+0xbc>
 800191c:	f7ff fc20 	bl	8001160 <Flame_FrontRight_Read>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d104      	bne.n	8001930 <main+0xbc>
 8001926:	f7ff fc07 	bl	8001138 <Flame_FrontLeft_Read>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <main+0xc0>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <main+0xc2>
 8001934:	2300      	movs	r3, #0
 8001936:	71bb      	strb	r3, [r7, #6]

		if(object_detected && flame_detected) // detected object
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <main+0xe2>
 800193e:	79bb      	ldrb	r3, [r7, #6]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <main+0xe2>
		{
			CarAdjustament (Flame_MaxReading());
 8001944:	f7ff fd4e 	bl	80013e4 <Flame_MaxReading>
 8001948:	4603      	mov	r3, r0
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fd7a 	bl	8001444 <CarAdjustament>
			CarAction();
 8001950:	f7ff fe54 	bl	80015fc <CarAction>
 8001954:	e019      	b.n	800198a <main+0x116>
		}
		else if(!(object_detected || flame_detected))
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <main+0xf4>
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d102      	bne.n	8001968 <main+0xf4>
		{
			CarMovements();
 8001962:	f7ff fdb5 	bl	80014d0 <CarMovements>
 8001966:	e010      	b.n	800198a <main+0x116>
		}
		else if (object_detected)
 8001968:	79fb      	ldrb	r3, [r7, #7]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <main+0x100>
		{
			Object_Handle();
 800196e:	f7ff ff6f 	bl	8001850 <Object_Handle>
 8001972:	e00a      	b.n	800198a <main+0x116>


		}
		else if (flame_detected)
 8001974:	79bb      	ldrb	r3, [r7, #6]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <main+0x116>
		{
			CarAdjustament (Flame_MaxReading());
 800197a:	f7ff fd33 	bl	80013e4 <Flame_MaxReading>
 800197e:	4603      	mov	r3, r0
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fd5f 	bl	8001444 <CarAdjustament>
			CarAction();
 8001986:	f7ff fe39 	bl	80015fc <CarAction>
//				}




		MCAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
 800198a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800198e:	4802      	ldr	r0, [pc, #8]	; (8001998 <main+0x124>)
 8001990:	f000 fb65 	bl	800205e <MCAL_GPIO_TogglePin>
		object_detected = (Ultrasnic_Read(CH1) <= ULTRA_Threshold);
 8001994:	e79d      	b.n	80018d2 <main+0x5e>
 8001996:	bf00      	nop
 8001998:	40011000 	.word	0x40011000
 800199c:	42480000 	.word	0x42480000

080019a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	; (80019d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	; (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	; (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ce:	f000 fec5 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d2:	f7ff ff4f 	bl	8001874 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
  ldr   r0, =_estack
 80019d8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80019e4:	080027c4 	.word	0x080027c4
  ldr r2, =_sbss
 80019e8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80019ec:	200000d8 	.word	0x200000d8

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM1->PSC=7999;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <delay_ms+0x50>)
 80019fe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a02:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM1->ARR=ms-1;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	1e5a      	subs	r2, r3, #1
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <delay_ms+0x50>)
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM1->CR1 |=1<<0;
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <delay_ms+0x50>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0c      	ldr	r2, [pc, #48]	; (8001a44 <delay_ms+0x50>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register

	while(!(TIM1->SR & 1<<0));
 8001a18:	bf00      	nop
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <delay_ms+0x50>)
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f9      	beq.n	8001a1a <delay_ms+0x26>
	// clear flag
	TIM1->SR=0;
 8001a26:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <delay_ms+0x50>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM1->CR1 =0;
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <delay_ms+0x50>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
	TIM1->CNT=0;
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <delay_ms+0x50>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00

08001a48 <MCAL_ADC_Init>:
* @retval 			-none
* Note				-none
*/

void MCAL_ADC_Init( ADC_config_t* ADC_Config )
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	//set  Data alignment
	if(ADC_Config->Data_alignment==ADC_Data_alignment_Left)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a58:	d105      	bne.n	8001a66 <MCAL_ADC_Init+0x1e>
	{
		ADC1->CR2|=ADC_Data_alignment_Left;
 8001a5a:	4b30      	ldr	r3, [pc, #192]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4a2f      	ldr	r2, [pc, #188]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a64:	6093      	str	r3, [r2, #8]
	else
	{
		//be default is right
	}
	//set mode
	if(ADC_Config->MODE==ADC_MODE_continuous)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d105      	bne.n	8001a7a <MCAL_ADC_Init+0x32>
	{
		ADC1->CR2|=ADC_MODE_continuous;
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	4a2a      	ldr	r2, [pc, #168]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6093      	str	r3, [r2, #8]
	else
	{
		//be default single mode
	}
	//set sampling_time
	if(ADC_Config->sampling_time!=ADC_sampling_time_1_5)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d023      	beq.n	8001aca <MCAL_ADC_Init+0x82>
	{
		if(ADC_Config->Channel<10)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	791b      	ldrb	r3, [r3, #4]
 8001a86:	2b09      	cmp	r3, #9
 8001a88:	d80f      	bhi.n	8001aaa <MCAL_ADC_Init+0x62>
			ADC1->SMPR1 |=ADC_Config->sampling_time<<(ADC_Config->Channel*3);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6919      	ldr	r1, [r3, #16]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	791b      	ldrb	r3, [r3, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	4603      	mov	r3, r0
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4403      	add	r3, r0
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	491e      	ldr	r1, [pc, #120]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
 8001aa8:	e00f      	b.n	8001aca <MCAL_ADC_Init+0x82>
		else
			ADC1->SMPR2 |=ADC_Config->sampling_time<<((ADC_Config->Channel-10)*3);
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001aac:	6919      	ldr	r1, [r3, #16]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6918      	ldr	r0, [r3, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	f1a3 020a 	sub.w	r2, r3, #10
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	fa00 f303 	lsl.w	r3, r0, r3
 8001ac4:	4a15      	ldr	r2, [pc, #84]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001ac6:	430b      	orrs	r3, r1
 8001ac8:	6113      	str	r3, [r2, #16]
	}
	else
	{
		//be default 1.5 cycle
	}
	if(ADC_Config->IRQ_EN==ADC_IRQ_ENABLE_Enable)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	d10c      	bne.n	8001aec <MCAL_ADC_Init+0xa4>
	{
		ADC1->CR1 |=ADC_IRQ_ENABLE_Enable;
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a11      	ldr	r2, [pc, #68]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6053      	str	r3, [r2, #4]
		NVIC_IRQ18_ADC_Enable();
 8001ade:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <MCAL_ADC_Init+0xd8>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <MCAL_ADC_Init+0xd8>)
 8001ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e00b      	b.n	8001b04 <MCAL_ADC_Init+0xbc>
	}
	else
	{
		ADC1->CR1 &=ADC_IRQ_ENABLE_Disable;
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001af2:	f023 0320 	bic.w	r3, r3, #32
 8001af6:	6053      	str	r3, [r2, #4]
		NVIC_IRQ18_ADC_Disable();
 8001af8:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <MCAL_ADC_Init+0xdc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <MCAL_ADC_Init+0xdc>)
 8001afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b02:	6013      	str	r3, [r2, #0]
	}
	ADC1->CR2 |=1<<0;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <MCAL_ADC_Init+0xd4>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6093      	str	r3, [r2, #8]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40012400 	.word	0x40012400
 8001b20:	e000e100 	.word	0xe000e100
 8001b24:	e000e180 	.word	0xe000e180

08001b28 <MCAL_ADC_Read>:
* @param [in]		-enum NUM_CH CH :Select ADC channel {CH0 TO CH17}
* @retval 			-ADC value
* Note				-Support CH0 TO CH17 (Single_Mode Data_alignment_Right )
*/
uint16_t MCAL_ADC_Read( enum NUM_CH CH )
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	uint16_t data;
	//Channel selection
	ADC1->SQR3=CH;
 8001b32:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	6353      	str	r3, [r2, #52]	; 0x34
	//Enable adc
	ADC1->CR2 |=1<<0;
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6093      	str	r3, [r2, #8]
	while(!(ADC1->SR & (1<<1)));
 8001b44:	bf00      	nop
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f9      	beq.n	8001b46 <MCAL_ADC_Read+0x1e>
	ADC1->CR2 &=~(1<<22);
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	4a06      	ldr	r2, [pc, #24]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b58:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001b5c:	6093      	str	r3, [r2, #8]
	data=ADC1->DR;
 8001b5e:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <MCAL_ADC_Read+0x48>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	81fb      	strh	r3, [r7, #14]
	return data;
 8001b64:	89fb      	ldrh	r3, [r7, #14]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	40012400 	.word	0x40012400

08001b74 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <EXTI0_IRQHandler+0x1c>)
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <EXTI0_IRQHandler+0x1c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <EXTI0_IRQHandler+0x20>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4798      	blx	r3
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40010400 	.word	0x40010400
 8001b94:	20000050 	.word	0x20000050

08001b98 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <EXTI1_IRQHandler+0x1c>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <EXTI1_IRQHandler+0x1c>)
 8001ba2:	f043 0302 	orr.w	r3, r3, #2
 8001ba6:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <EXTI1_IRQHandler+0x20>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4798      	blx	r3
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40010400 	.word	0x40010400
 8001bb8:	20000050 	.word	0x20000050

08001bbc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <EXTI2_IRQHandler+0x1c>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <EXTI2_IRQHandler+0x1c>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <EXTI2_IRQHandler+0x20>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	4798      	blx	r3
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40010400 	.word	0x40010400
 8001bdc:	20000050 	.word	0x20000050

08001be0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <EXTI3_IRQHandler+0x1c>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <EXTI3_IRQHandler+0x1c>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <EXTI3_IRQHandler+0x20>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4798      	blx	r3
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40010400 	.word	0x40010400
 8001c00:	20000050 	.word	0x20000050

08001c04 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <EXTI4_IRQHandler+0x1c>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	4a04      	ldr	r2, [pc, #16]	; (8001c20 <EXTI4_IRQHandler+0x1c>)
 8001c0e:	f043 0310 	orr.w	r3, r3, #16
 8001c12:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <EXTI4_IRQHandler+0x20>)
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	4798      	blx	r3
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40010400 	.word	0x40010400
 8001c24:	20000050 	.word	0x20000050

08001c28 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f003 0320 	and.w	r3, r3, #32
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <EXTI9_5_IRQHandler+0x22>
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	6153      	str	r3, [r2, #20]
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <EXTI9_5_IRQHandler+0xa4>)
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d008      	beq.n	8001c68 <EXTI9_5_IRQHandler+0x40>
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c60:	6153      	str	r3, [r2, #20]
 8001c62:	4b1a      	ldr	r3, [pc, #104]	; (8001ccc <EXTI9_5_IRQHandler+0xa4>)
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <EXTI9_5_IRQHandler+0x5e>
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7e:	6153      	str	r3, [r2, #20]
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <EXTI9_5_IRQHandler+0xa4>)
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <EXTI9_5_IRQHandler+0x7c>
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9c:	6153      	str	r3, [r2, #20]
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <EXTI9_5_IRQHandler+0xa4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <EXTI9_5_IRQHandler+0x9a>
 8001cb0:	4b05      	ldr	r3, [pc, #20]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <EXTI9_5_IRQHandler+0xa0>)
 8001cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cba:	6153      	str	r3, [r2, #20]
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <EXTI9_5_IRQHandler+0xa4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	4798      	blx	r3
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40010400 	.word	0x40010400
 8001ccc:	20000050 	.word	0x20000050

08001cd0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <EXTI15_10_IRQHandler+0x22>
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	4a29      	ldr	r2, [pc, #164]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cea:	6153      	str	r3, [r2, #20]
 8001cec:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8001cf2:	4b26      	ldr	r3, [pc, #152]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d008      	beq.n	8001d10 <EXTI15_10_IRQHandler+0x40>
 8001cfe:	4b23      	ldr	r3, [pc, #140]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	4a22      	ldr	r2, [pc, #136]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d08:	6153      	str	r3, [r2, #20]
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d12:	695b      	ldr	r3, [r3, #20]
 8001d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <EXTI15_10_IRQHandler+0x5e>
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d1e:	695b      	ldr	r3, [r3, #20]
 8001d20:	4a1a      	ldr	r2, [pc, #104]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d26:	6153      	str	r3, [r2, #20]
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d008      	beq.n	8001d4c <EXTI15_10_IRQHandler+0x7c>
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d44:	6153      	str	r3, [r2, #20]
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d4a:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <EXTI15_10_IRQHandler+0x9a>
 8001d58:	4b0c      	ldr	r3, [pc, #48]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d62:	6153      	str	r3, [r2, #20]
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 8001d6a:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d008      	beq.n	8001d88 <EXTI15_10_IRQHandler+0xb8>
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <EXTI15_10_IRQHandler+0xbc>)
 8001d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d80:	6153      	str	r3, [r2, #20]
 8001d82:	4b03      	ldr	r3, [pc, #12]	; (8001d90 <EXTI15_10_IRQHandler+0xc0>)
 8001d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d86:	4798      	blx	r3
}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40010400 	.word	0x40010400
 8001d90:	20000050 	.word	0x20000050

08001d94 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001da4:	f000 80a5 	beq.w	8001ef2 <get_position+0x15e>
 8001da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dac:	f300 80a3 	bgt.w	8001ef6 <get_position+0x162>
 8001db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001db4:	f000 809b 	beq.w	8001eee <get_position+0x15a>
 8001db8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dbc:	f300 809b 	bgt.w	8001ef6 <get_position+0x162>
 8001dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dc4:	f000 8091 	beq.w	8001eea <get_position+0x156>
 8001dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dcc:	f300 8093 	bgt.w	8001ef6 <get_position+0x162>
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	f000 8087 	beq.w	8001ee6 <get_position+0x152>
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ddc:	f300 808b 	bgt.w	8001ef6 <get_position+0x162>
 8001de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001de4:	d07d      	beq.n	8001ee2 <get_position+0x14e>
 8001de6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dea:	f300 8084 	bgt.w	8001ef6 <get_position+0x162>
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d074      	beq.n	8001ede <get_position+0x14a>
 8001df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df8:	dc7d      	bgt.n	8001ef6 <get_position+0x162>
 8001dfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dfe:	d06c      	beq.n	8001eda <get_position+0x146>
 8001e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e04:	dc77      	bgt.n	8001ef6 <get_position+0x162>
 8001e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0a:	d064      	beq.n	8001ed6 <get_position+0x142>
 8001e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e10:	dc71      	bgt.n	8001ef6 <get_position+0x162>
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	d05d      	beq.n	8001ed2 <get_position+0x13e>
 8001e16:	2b80      	cmp	r3, #128	; 0x80
 8001e18:	dc6d      	bgt.n	8001ef6 <get_position+0x162>
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	dc48      	bgt.n	8001eb0 <get_position+0x11c>
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	dd69      	ble.n	8001ef6 <get_position+0x162>
 8001e22:	3b01      	subs	r3, #1
 8001e24:	2b1f      	cmp	r3, #31
 8001e26:	d866      	bhi.n	8001ef6 <get_position+0x162>
 8001e28:	a201      	add	r2, pc, #4	; (adr r2, 8001e30 <get_position+0x9c>)
 8001e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2e:	bf00      	nop
 8001e30:	08001eb7 	.word	0x08001eb7
 8001e34:	08001ebb 	.word	0x08001ebb
 8001e38:	08001ef7 	.word	0x08001ef7
 8001e3c:	08001ebf 	.word	0x08001ebf
 8001e40:	08001ef7 	.word	0x08001ef7
 8001e44:	08001ef7 	.word	0x08001ef7
 8001e48:	08001ef7 	.word	0x08001ef7
 8001e4c:	08001ec3 	.word	0x08001ec3
 8001e50:	08001ef7 	.word	0x08001ef7
 8001e54:	08001ef7 	.word	0x08001ef7
 8001e58:	08001ef7 	.word	0x08001ef7
 8001e5c:	08001ef7 	.word	0x08001ef7
 8001e60:	08001ef7 	.word	0x08001ef7
 8001e64:	08001ef7 	.word	0x08001ef7
 8001e68:	08001ef7 	.word	0x08001ef7
 8001e6c:	08001ec7 	.word	0x08001ec7
 8001e70:	08001ef7 	.word	0x08001ef7
 8001e74:	08001ef7 	.word	0x08001ef7
 8001e78:	08001ef7 	.word	0x08001ef7
 8001e7c:	08001ef7 	.word	0x08001ef7
 8001e80:	08001ef7 	.word	0x08001ef7
 8001e84:	08001ef7 	.word	0x08001ef7
 8001e88:	08001ef7 	.word	0x08001ef7
 8001e8c:	08001ef7 	.word	0x08001ef7
 8001e90:	08001ef7 	.word	0x08001ef7
 8001e94:	08001ef7 	.word	0x08001ef7
 8001e98:	08001ef7 	.word	0x08001ef7
 8001e9c:	08001ef7 	.word	0x08001ef7
 8001ea0:	08001ef7 	.word	0x08001ef7
 8001ea4:	08001ef7 	.word	0x08001ef7
 8001ea8:	08001ef7 	.word	0x08001ef7
 8001eac:	08001ecb 	.word	0x08001ecb
 8001eb0:	2b40      	cmp	r3, #64	; 0x40
 8001eb2:	d00c      	beq.n	8001ece <get_position+0x13a>
 8001eb4:	e01f      	b.n	8001ef6 <get_position+0x162>
	{
	case GPIO_PIN_0 :
		return 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e01e      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	e01c      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 8001ebe:	2308      	movs	r3, #8
 8001ec0:	e01a      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8001ec2:	230c      	movs	r3, #12
 8001ec4:	e018      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8001ec6:	2310      	movs	r3, #16
 8001ec8:	e016      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 8001eca:	2314      	movs	r3, #20
 8001ecc:	e014      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 8001ece:	2318      	movs	r3, #24
 8001ed0:	e012      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8001ed2:	231c      	movs	r3, #28
 8001ed4:	e010      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e00e      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 8001eda:	2304      	movs	r3, #4
 8001edc:	e00c      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	e00a      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 8001ee2:	230c      	movs	r3, #12
 8001ee4:	e008      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 8001ee6:	2310      	movs	r3, #16
 8001ee8:	e006      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 8001eea:	2314      	movs	r3, #20
 8001eec:	e004      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 8001eee:	2318      	movs	r3, #24
 8001ef0:	e002      	b.n	8001ef8 <get_position+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 8001ef2:	231c      	movs	r3, #28
 8001ef4:	e000      	b.n	8001ef8 <get_position+0x164>
		break;
	default:
		return 0;
 8001ef6:	2300      	movs	r3, #0
	}
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bc80      	pop	{r7}
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop

08001f04 <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	881b      	ldrh	r3, [r3, #0]
 8001f1a:	2bff      	cmp	r3, #255	; 0xff
 8001f1c:	d801      	bhi.n	8001f22 <MCAL_GPIO_Init+0x1e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <MCAL_GPIO_Init+0x22>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff31 	bl	8001d94 <get_position>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	230f      	movs	r3, #15
 8001f38:	4093      	lsls	r3, r2
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	401a      	ands	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	789b      	ldrb	r3, [r3, #2]
 8001f4a:	2b07      	cmp	r3, #7
 8001f4c:	d00b      	beq.n	8001f66 <MCAL_GPIO_Init+0x62>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	789b      	ldrb	r3, [r3, #2]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d007      	beq.n	8001f66 <MCAL_GPIO_Init+0x62>
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	789b      	ldrb	r3, [r3, #2]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d003      	beq.n	8001f66 <MCAL_GPIO_Init+0x62>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	789b      	ldrb	r3, [r3, #2]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d10e      	bne.n	8001f84 <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	b25a      	sxtb	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	78db      	ldrb	r3, [r3, #3]
 8001f74:	b25b      	sxtb	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b25b      	sxtb	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f003 030f 	and.w	r3, r3, #15
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e02c      	b.n	8001fde <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d003      	beq.n	8001f94 <MCAL_GPIO_Init+0x90>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	789b      	ldrb	r3, [r3, #2]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d107      	bne.n	8001fa4 <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	789b      	ldrb	r3, [r3, #2]
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e01c      	b.n	8001fde <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	789b      	ldrb	r3, [r3, #2]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d102      	bne.n	8001fb2 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 8001fac:	2304      	movs	r3, #4
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e015      	b.n	8001fde <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	789b      	ldrb	r3, [r3, #2]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	8812      	ldrh	r2, [r2, #0]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	e007      	b.n	8001fde <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	8812      	ldrh	r2, [r2, #0]
 8001fd6:	43d2      	mvns	r2, r2
 8001fd8:	401a      	ands	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 8001fde:	7bfc      	ldrb	r4, [r7, #15]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fed5 	bl	8001d94 <get_position>
 8001fea:	4603      	mov	r3, r0
 8001fec:	fa04 f203 	lsl.w	r2, r4, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	601a      	str	r2, [r3, #0]
}
 8001ffa:	bf00      	nop
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd90      	pop	{r4, r7, pc}

08002002 <MCAL_GPIO_ReadPin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-the input pin value (two value based on @ ref  GPIO_PINS_state)
* Note				-none
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]
	uint8_t bit_state;
	if (((GPIOx->IDR) & pinNumber) !=  (uint32_t) GPIO_PIN_RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <MCAL_GPIO_ReadPin+0x1e>
	{
		bit_state=GPIO_PIN_SET;
 800201a:	2301      	movs	r3, #1
 800201c:	73fb      	strb	r3, [r7, #15]
 800201e:	e001      	b.n	8002024 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		bit_state=GPIO_PIN_RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]
	}
	return bit_state;
 8002024:	7bfb      	ldrb	r3, [r7, #15]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3714      	adds	r7, #20
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr

08002030 <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 800204c:	e002      	b.n	8002054 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 800204e:	887a      	ldrh	r2, [r7, #2]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	615a      	str	r2, [r3, #20]
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr

0800205e <MCAL_GPIO_TogglePin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	460b      	mov	r3, r1
 8002068:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=pinNumber;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	405a      	eors	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60da      	str	r2, [r3, #12]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr

08002080 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a30      	ldr	r2, [pc, #192]	; (8002150 <Slave_Status+0xd0>)
 8002090:	4293      	cmp	r3, r2
 8002092:	bf14      	ite	ne
 8002094:	2301      	movne	r3, #1
 8002096:	2300      	moveq	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	73fb      	strb	r3, [r7, #15]

	switch(state)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d851      	bhi.n	8002146 <Slave_Status+0xc6>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <Slave_Status+0x28>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020dd 	.word	0x080020dd
 80020b0:	080020f5 	.word	0x080020f5
 80020b4:	08002119 	.word	0x08002119
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03b      	beq.n	800213c <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 80020c4:	7bfa      	ldrb	r2, [r7, #15]
 80020c6:	4923      	ldr	r1, [pc, #140]	; (8002154 <Slave_Status+0xd4>)
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	3318      	adds	r3, #24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2000      	movs	r0, #0
 80020d8:	4798      	blx	r3
		}
		break;
 80020da:	e02f      	b.n	800213c <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	491d      	ldr	r1, [pc, #116]	; (8002154 <Slave_Status+0xd4>)
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	3318      	adds	r3, #24
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2001      	movs	r0, #1
 80020f0:	4798      	blx	r3
		break;
 80020f2:	e028      	b.n	8002146 <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d01f      	beq.n	8002140 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	4914      	ldr	r1, [pc, #80]	; (8002154 <Slave_Status+0xd4>)
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	3318      	adds	r3, #24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2002      	movs	r0, #2
 8002114:	4798      	blx	r3
		}
		break;
 8002116:	e013      	b.n	8002140 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	490b      	ldr	r1, [pc, #44]	; (8002154 <Slave_Status+0xd4>)
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	3318      	adds	r3, #24
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2003      	movs	r0, #3
 8002138:	4798      	blx	r3
		}
		break;
 800213a:	e003      	b.n	8002144 <Slave_Status+0xc4>
		break;
 800213c:	bf00      	nop
 800213e:	e002      	b.n	8002146 <Slave_Status+0xc6>
		break;
 8002140:	bf00      	nop
 8002142:	e000      	b.n	8002146 <Slave_Status+0xc6>
		break;
 8002144:	bf00      	nop
	}
}
 8002146:	bf00      	nop
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40005400 	.word	0x40005400
 8002154:	2000008c 	.word	0x2000008c

08002158 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 8002162:	4b36      	ldr	r3, [pc, #216]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 800216c:	4b33      	ldr	r3, [pc, #204]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002174:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00a      	beq.n	800219c <I2C1_EV_IRQHandler+0x44>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 800218e:	4a2b      	ldr	r2, [pc, #172]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 8002194:	2100      	movs	r1, #0
 8002196:	4829      	ldr	r0, [pc, #164]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002198:	f7ff ff72 	bl	8002080 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d012      	beq.n	80021d2 <I2C1_EV_IRQHandler+0x7a>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00f      	beq.n	80021d2 <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 80021ca:	2101      	movs	r1, #1
 80021cc:	481b      	ldr	r0, [pc, #108]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021ce:	f7ff ff57 	bl	8002080 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00f      	beq.n	8002202 <I2C1_EV_IRQHandler+0xaa>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00c      	beq.n	8002202 <I2C1_EV_IRQHandler+0xaa>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d009      	beq.n	8002202 <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 80021ee:	4b13      	ldr	r3, [pc, #76]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d103      	bne.n	8002202 <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 80021fa:	2102      	movs	r1, #2
 80021fc:	480f      	ldr	r0, [pc, #60]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 80021fe:	f7ff ff3f 	bl	8002080 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00f      	beq.n	8002232 <I2C1_EV_IRQHandler+0xda>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <I2C1_EV_IRQHandler+0xda>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d009      	beq.n	8002232 <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 800221e:	4b07      	ldr	r3, [pc, #28]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d103      	bne.n	8002232 <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 800222a:	2103      	movs	r1, #3
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <I2C1_EV_IRQHandler+0xe4>)
 800222e:	f7ff ff27 	bl	8002080 <Slave_Status>
		}
	}
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40005400 	.word	0x40005400

08002240 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <SPI1_IRQHandler+0x54>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	085b      	lsrs	r3, r3, #1
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	b2da      	uxtb	r2, r3
 8002252:	793b      	ldrb	r3, [r7, #4]
 8002254:	f362 0300 	bfi	r3, r2, #0, #1
 8002258:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <SPI1_IRQHandler+0x54>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	793b      	ldrb	r3, [r7, #4]
 8002266:	f362 0341 	bfi	r3, r2, #1, #1
 800226a:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <SPI1_IRQHandler+0x54>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	793b      	ldrb	r3, [r7, #4]
 800227a:	f362 0382 	bfi	r3, r2, #2, #1
 800227e:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <SPI1_IRQHandler+0x58>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	7938      	ldrb	r0, [r7, #4]
 8002288:	4798      	blx	r3
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40013000 	.word	0x40013000
 8002298:	200000c4 	.word	0x200000c4

0800229c <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <SPI2_IRQHandler+0x54>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	085b      	lsrs	r3, r3, #1
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	793b      	ldrb	r3, [r7, #4]
 80022b0:	f362 0300 	bfi	r3, r2, #0, #1
 80022b4:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	; (80022f0 <SPI2_IRQHandler+0x54>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	793b      	ldrb	r3, [r7, #4]
 80022c2:	f362 0341 	bfi	r3, r2, #1, #1
 80022c6:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 80022c8:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <SPI2_IRQHandler+0x54>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	793b      	ldrb	r3, [r7, #4]
 80022d6:	f362 0382 	bfi	r3, r2, #2, #1
 80022da:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SPI2_IRQHandler+0x58>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	7938      	ldrb	r0, [r7, #4]
 80022e4:	4798      	blx	r3
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40003800 	.word	0x40003800
 80022f4:	200000c4 	.word	0x200000c4

080022f8 <MCAL_TIMx_Init>:
 * @param [in] 		-Chan:  specified channel from 1 to 4
 * @retval 			-none
 * Note				-Support Fast PWM and Normal ( delay mode )
 */
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	4613      	mov	r3, r2
 8002304:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2281      	movs	r2, #129	; 0x81
 800230a:	601a      	str	r2, [r3, #0]
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	f000 80d3 	beq.w	80024bc <MCAL_TIMx_Init+0x1c4>
	{
		// set pin
		if(TIMx==TIM2)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800231c:	d131      	bne.n	8002382 <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <MCAL_TIMx_Init+0x2a8>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a9f      	ldr	r2, [pc, #636]	; (80025a0 <MCAL_TIMx_Init+0x2a8>)
 8002324:	f043 0301 	orr.w	r3, r3, #1
 8002328:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 800232a:	2306      	movs	r3, #6
 800232c:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 800232e:	2301      	movs	r3, #1
 8002330:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	2b03      	cmp	r3, #3
 8002336:	d817      	bhi.n	8002368 <MCAL_TIMx_Init+0x70>
 8002338:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <MCAL_TIMx_Init+0x48>)
 800233a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800233e:	bf00      	nop
 8002340:	08002351 	.word	0x08002351
 8002344:	08002357 	.word	0x08002357
 8002348:	0800235d 	.word	0x0800235d
 800234c:	08002363 	.word	0x08002363
			{
			case CH1 :
			{
				//set pin outpt
				pinconfig.pinNumber = GPIO_PIN_0 ;
 8002350:	2301      	movs	r3, #1
 8002352:	82bb      	strh	r3, [r7, #20]
				break;
 8002354:	e008      	b.n	8002368 <MCAL_TIMx_Init+0x70>
			}
			case CH2 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_1 ;
 8002356:	2302      	movs	r3, #2
 8002358:	82bb      	strh	r3, [r7, #20]
				break;
 800235a:	e005      	b.n	8002368 <MCAL_TIMx_Init+0x70>
			}
			case CH3 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_2 ;
 800235c:	2304      	movs	r3, #4
 800235e:	82bb      	strh	r3, [r7, #20]
				break;
 8002360:	e002      	b.n	8002368 <MCAL_TIMx_Init+0x70>
			}
			case CH4 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_3 ;
 8002362:	2308      	movs	r3, #8
 8002364:	82bb      	strh	r3, [r7, #20]
				break;
 8002366:	bf00      	nop
			}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4619      	mov	r1, r3
 800236e:	488d      	ldr	r0, [pc, #564]	; (80025a4 <MCAL_TIMx_Init+0x2ac>)
 8002370:	f7ff fdc8 	bl	8001f04 <MCAL_GPIO_Init>
			//Disable interrupt
			NVIC_IRQ28_TIM2_Disable();
 8002374:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a8b      	ldr	r2, [pc, #556]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	6013      	str	r3, [r2, #0]
 8002380:	e072      	b.n	8002468 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a89      	ldr	r2, [pc, #548]	; (80025ac <MCAL_TIMx_Init+0x2b4>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d13d      	bne.n	8002406 <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 800238a:	2306      	movs	r3, #6
 800238c:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 800238e:	2301      	movs	r3, #1
 8002390:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d82f      	bhi.n	80023f8 <MCAL_TIMx_Init+0x100>
 8002398:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <MCAL_TIMx_Init+0xa8>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023b1 	.word	0x080023b1
 80023a4:	080023c3 	.word	0x080023c3
 80023a8:	080023d5 	.word	0x080023d5
 80023ac:	080023e7 	.word	0x080023e7
			{
			case CH1 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_6 ;
 80023b0:	2340      	movs	r3, #64	; 0x40
 80023b2:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	487a      	ldr	r0, [pc, #488]	; (80025a4 <MCAL_TIMx_Init+0x2ac>)
 80023bc:	f7ff fda2 	bl	8001f04 <MCAL_GPIO_Init>
				break;
 80023c0:	e01a      	b.n	80023f8 <MCAL_TIMx_Init+0x100>
			}
			case CH2 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_7 ;
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 80023c6:	f107 0314 	add.w	r3, r7, #20
 80023ca:	4619      	mov	r1, r3
 80023cc:	4875      	ldr	r0, [pc, #468]	; (80025a4 <MCAL_TIMx_Init+0x2ac>)
 80023ce:	f7ff fd99 	bl	8001f04 <MCAL_GPIO_Init>
				break;
 80023d2:	e011      	b.n	80023f8 <MCAL_TIMx_Init+0x100>
			}
			case CH3 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_0 ;
 80023d4:	2301      	movs	r3, #1
 80023d6:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4874      	ldr	r0, [pc, #464]	; (80025b0 <MCAL_TIMx_Init+0x2b8>)
 80023e0:	f7ff fd90 	bl	8001f04 <MCAL_GPIO_Init>
				break;
 80023e4:	e008      	b.n	80023f8 <MCAL_TIMx_Init+0x100>
			}
			case CH4 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_1 ;
 80023e6:	2302      	movs	r3, #2
 80023e8:	82bb      	strh	r3, [r7, #20]
				MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80023ea:	f107 0314 	add.w	r3, r7, #20
 80023ee:	4619      	mov	r1, r3
 80023f0:	486f      	ldr	r0, [pc, #444]	; (80025b0 <MCAL_TIMx_Init+0x2b8>)
 80023f2:	f7ff fd87 	bl	8001f04 <MCAL_GPIO_Init>
				break;
 80023f6:	bf00      	nop
			}
			}
			//Disable interrupt
			NVIC_IRQ28_TIM2_Disable();
 80023f8:	4b6b      	ldr	r3, [pc, #428]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a6a      	ldr	r2, [pc, #424]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 80023fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	e030      	b.n	8002468 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a6a      	ldr	r2, [pc, #424]	; (80025b4 <MCAL_TIMx_Init+0x2bc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12c      	bne.n	8002468 <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 800240e:	2306      	movs	r3, #6
 8002410:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8002412:	2301      	movs	r3, #1
 8002414:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d819      	bhi.n	8002450 <MCAL_TIMx_Init+0x158>
 800241c:	a201      	add	r2, pc, #4	; (adr r2, 8002424 <MCAL_TIMx_Init+0x12c>)
 800241e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002422:	bf00      	nop
 8002424:	08002435 	.word	0x08002435
 8002428:	0800243b 	.word	0x0800243b
 800242c:	08002441 	.word	0x08002441
 8002430:	08002449 	.word	0x08002449
			{
			case CH1 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_6 ;
 8002434:	2340      	movs	r3, #64	; 0x40
 8002436:	82bb      	strh	r3, [r7, #20]
				break;
 8002438:	e00a      	b.n	8002450 <MCAL_TIMx_Init+0x158>
			}
			case CH2 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_7 ;
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	82bb      	strh	r3, [r7, #20]
				break;
 800243e:	e007      	b.n	8002450 <MCAL_TIMx_Init+0x158>
			}
			case CH3 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_8 ;
 8002440:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002444:	82bb      	strh	r3, [r7, #20]
				break;
 8002446:	e003      	b.n	8002450 <MCAL_TIMx_Init+0x158>
			}
			case CH4 :
			{
				//set pin output
				pinconfig.pinNumber = GPIO_PIN_9 ;
 8002448:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244c:	82bb      	strh	r3, [r7, #20]

				break;
 800244e:	bf00      	nop
			}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4619      	mov	r1, r3
 8002456:	4856      	ldr	r0, [pc, #344]	; (80025b0 <MCAL_TIMx_Init+0x2b8>)
 8002458:	f7ff fd54 	bl	8001f04 <MCAL_GPIO_Init>
			//Disable interrupt
			NVIC_IRQ30_TIM4_Disable();
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a51      	ldr	r2, [pc, #324]	; (80025a8 <MCAL_TIMx_Init+0x2b0>)
 8002462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002466:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d850      	bhi.n	8002510 <MCAL_TIMx_Init+0x218>
 800246e:	a201      	add	r2, pc, #4	; (adr r2, 8002474 <MCAL_TIMx_Init+0x17c>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	08002485 	.word	0x08002485
 8002478:	08002493 	.word	0x08002493
 800247c:	080024a1 	.word	0x080024a1
 8002480:	080024af 	.word	0x080024af
		{
		case CH1 :
		{
			TIMx->CCMR1 |=15<<3;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	619a      	str	r2, [r3, #24]
			break;
 8002490:	e03e      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH2 :
		{
			TIMx->CCMR1 |=15<<11;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	619a      	str	r2, [r3, #24]
			break;
 800249e:	e037      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH3 :
		{
			TIMx->CCMR2 |=15<<3;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	61da      	str	r2, [r3, #28]
			break;
 80024ac:	e030      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH4 :
		{
			TIMx->CCMR2 |=15<<11;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	61da      	str	r2, [r3, #28]
			break;
 80024ba:	e029      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d826      	bhi.n	8002510 <MCAL_TIMx_Init+0x218>
 80024c2:	a201      	add	r2, pc, #4	; (adr r2, 80024c8 <MCAL_TIMx_Init+0x1d0>)
 80024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024c8:	080024d9 	.word	0x080024d9
 80024cc:	080024e7 	.word	0x080024e7
 80024d0:	080024f5 	.word	0x080024f5
 80024d4:	08002503 	.word	0x08002503
		{
		case CH1 :
		{
			TIMx->CCMR1 &=~(15<<3);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	619a      	str	r2, [r3, #24]
			break;
 80024e4:	e014      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH2 :
		{
			TIMx->CCMR1 &=~(15<<11);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	619a      	str	r2, [r3, #24]
			break;
 80024f2:	e00d      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH3 :
		{
			TIMx->CCMR2 &=~(15<<3);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	61da      	str	r2, [r3, #28]
			break;
 8002500:	e006      	b.n	8002510 <MCAL_TIMx_Init+0x218>
		}
		case CH4 :
		{
			TIMx->CCMR2  &=~(15<<11);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	61da      	str	r2, [r3, #28]
			break;
 800250e:	bf00      	nop
		}
		}
	}
	//output polarity and  output enable
	switch(Chan)
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	2b03      	cmp	r3, #3
 8002514:	d836      	bhi.n	8002584 <MCAL_TIMx_Init+0x28c>
 8002516:	a201      	add	r2, pc, #4	; (adr r2, 800251c <MCAL_TIMx_Init+0x224>)
 8002518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251c:	0800252d 	.word	0x0800252d
 8002520:	08002543 	.word	0x08002543
 8002524:	08002559 	.word	0x08002559
 8002528:	0800256f 	.word	0x0800256f
	{
	case CH1 :
	{
		TIMx->CCER|=1<<0;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f043 0201 	orr.w	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	621a      	str	r2, [r3, #32]
		//set init Compare value 10000
		TIMx->CCR1 = 10000;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f242 7210 	movw	r2, #10000	; 0x2710
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8002540:	e020      	b.n	8002584 <MCAL_TIMx_Init+0x28c>
	}
	case CH2 :
	{
		TIMx->CCER|=3<<4;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	f043 0230 	orr.w	r2, r3, #48	; 0x30
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	621a      	str	r2, [r3, #32]
		//set init Compare value 10000
		TIMx->CCR2 = 10000;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f242 7210 	movw	r2, #10000	; 0x2710
 8002554:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8002556:	e015      	b.n	8002584 <MCAL_TIMx_Init+0x28c>
	}
	case CH3 :
	{
		TIMx->CCER|=1<<8;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	621a      	str	r2, [r3, #32]
		//set init Compare value 10000
		TIMx->CCR3 = 10000;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f242 7210 	movw	r2, #10000	; 0x2710
 800256a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 800256c:	e00a      	b.n	8002584 <MCAL_TIMx_Init+0x28c>
	}
	case CH4 :
	{
		TIMx->CCER|=1<<12;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	621a      	str	r2, [r3, #32]
		//set init Compare value 10000
		TIMx->CCR4 = 10000;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8002582:	bf00      	nop
	}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	889b      	ldrh	r3, [r3, #4]
 8002588:	461a      	mov	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	629a      	str	r2, [r3, #40]	; 0x28
	//set init top value 20000
	TIMx->ARR = 20000;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002594:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002596:	bf00      	nop
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010800 	.word	0x40010800
 80025a8:	e000e180 	.word	0xe000e180
 80025ac:	40000400 	.word	0x40000400
 80025b0:	40010c00 	.word	0x40010c00
 80025b4:	40000800 	.word	0x40000800

080025b8 <MCAL_TIM4_CAP_Init>:


void MCAL_TIM4_CAP_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
	TIM3->CR1=0b10000001;
 80025be:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 80025c0:	2281      	movs	r2, #129	; 0x81
 80025c2:	601a      	str	r2, [r3, #0]
	//set pin capture input channel 1
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80025c4:	2301      	movs	r3, #1
 80025c6:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber=GPIO_PIN_6;
 80025c8:	2340      	movs	r3, #64	; 0x40
 80025ca:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig);
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4811      	ldr	r0, [pc, #68]	; (8002618 <MCAL_TIM4_CAP_Init+0x60>)
 80025d2:	f7ff fc97 	bl	8001f04 <MCAL_GPIO_Init>

	pinconfig.GPIO_MODE=GPIO_MODE_INPUT_FLO;
 80025d6:	2301      	movs	r3, #1
 80025d8:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber=GPIO_PIN_7;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pinconfig);
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	4619      	mov	r1, r3
 80025e2:	480d      	ldr	r0, [pc, #52]	; (8002618 <MCAL_TIM4_CAP_Init+0x60>)
 80025e4:	f7ff fc8e 	bl	8001f04 <MCAL_GPIO_Init>

	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM3->PSC=7;
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 80025ea:	2207      	movs	r2, #7
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
	//set top value
	TIM3->ARR=0XFFFF;
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 80025f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f4:	62da      	str	r2, [r3, #44]	; 0x2c
	//CC1 channel is configured as input, IC1 is mapped on TI1
	TIM3->CCMR1 =0x3131;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 80025f8:	f243 1231 	movw	r2, #12593	; 0x3131
 80025fc:	619a      	str	r2, [r3, #24]
	// Enable capture on CC1
	TIM3->CCER |= (17<<0);
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <MCAL_TIM4_CAP_Init+0x5c>)
 8002604:	f043 0311 	orr.w	r3, r3, #17
 8002608:	6213      	str	r3, [r2, #32]
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40000400 	.word	0x40000400
 8002618:	40010800 	.word	0x40010800

0800261c <MCAL_TIM4_CAP_Get_High>:


float MCAL_TIM4_CAP_Get_High(channel Chan)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
	float dis=0;
 8002626:	f04f 0300 	mov.w	r3, #0
 800262a:	60fb      	str	r3, [r7, #12]
	//    TIM3->CCER &=~(1<<5);
	//    dis=TIM3->CCR2;
	//    break;
	//  }
	//  }
	TIM3->CCER &=~(1<<1);
 800262c:	4b1b      	ldr	r3, [pc, #108]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a1a      	ldr	r2, [pc, #104]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002632:	f023 0302 	bic.w	r3, r3, #2
 8002636:	6213      	str	r3, [r2, #32]
	while(!(TIM3->SR &(1<<1)));
 8002638:	bf00      	nop
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f9      	beq.n	800263a <MCAL_TIM4_CAP_Get_High+0x1e>
	TIM3->EGR |=1<<0;
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800264c:	f043 0301 	orr.w	r3, r3, #1
 8002650:	6153      	str	r3, [r2, #20]
	TIM3->SR=0;
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
	TIM3->CCER |=1<<1;
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a0f      	ldr	r2, [pc, #60]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800265e:	f043 0302 	orr.w	r3, r3, #2
 8002662:	6213      	str	r3, [r2, #32]
	while(!(TIM3->SR &(1<<1)));
 8002664:	bf00      	nop
 8002666:	4b0d      	ldr	r3, [pc, #52]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f9      	beq.n	8002666 <MCAL_TIM4_CAP_Get_High+0x4a>
	TIM3->SR=0;
 8002672:	4b0a      	ldr	r3, [pc, #40]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
	TIM3->CCER &=~(1<<1);
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 800267e:	f023 0302 	bic.w	r3, r3, #2
 8002682:	6213      	str	r3, [r2, #32]
	dis=TIM3->CCR1;
 8002684:	4b05      	ldr	r3, [pc, #20]	; (800269c <MCAL_TIM4_CAP_Get_High+0x80>)
 8002686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa65 	bl	8000b58 <__aeabi_ui2f>
 800268e:	4603      	mov	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]
	return dis ;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40000400 	.word	0x40000400

080026a0 <MCAL_TIMx_Set_Compare_Value>:
 * @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
 * @retval 			-none
 * Note				-none
 */
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	807b      	strh	r3, [r7, #2]
 80026ac:	4613      	mov	r3, r2
 80026ae:	707b      	strb	r3, [r7, #1]

	switch(Chan)
 80026b0:	787b      	ldrb	r3, [r7, #1]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d81a      	bhi.n	80026ec <MCAL_TIMx_Set_Compare_Value+0x4c>
 80026b6:	a201      	add	r2, pc, #4	; (adr r2, 80026bc <MCAL_TIMx_Set_Compare_Value+0x1c>)
 80026b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026bc:	080026cd 	.word	0x080026cd
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026dd 	.word	0x080026dd
 80026c8:	080026e5 	.word	0x080026e5
	{
	case CH1 :
	{
		TIMx->CCR1 = Compare_Value;
 80026cc:	887a      	ldrh	r2, [r7, #2]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80026d2:	e00b      	b.n	80026ec <MCAL_TIMx_Set_Compare_Value+0x4c>
	}
	case CH2 :
	{
		TIMx->CCR2 = Compare_Value;
 80026d4:	887a      	ldrh	r2, [r7, #2]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 80026da:	e007      	b.n	80026ec <MCAL_TIMx_Set_Compare_Value+0x4c>
	}
	case CH3 :
	{
		TIMx->CCR3 = Compare_Value;
 80026dc:	887a      	ldrh	r2, [r7, #2]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80026e2:	e003      	b.n	80026ec <MCAL_TIMx_Set_Compare_Value+0x4c>
	}
	case CH4 :
	{
		TIMx->CCR4 = Compare_Value;
 80026e4:	887a      	ldrh	r2, [r7, #2]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80026ea:	bf00      	nop
	}
	}
	TIMx->EGR |=1<<0;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	695b      	ldr	r3, [r3, #20]
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	615a      	str	r2, [r3, #20]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <MCAL_TIMx_Set_TOP_Value>:
 * @param [in] 		-TIMx:  specified TIMx x=[ 2 : 3 ]
 * @retval 			-none
 * Note				-none
 */
void MCAL_TIMx_Set_TOP_Value( TIMx_TypeDef* TIMx  , uint16_t TOP_Value )
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	807b      	strh	r3, [r7, #2]
	TIMx->ARR=TOP_Value;
 8002710:	887a      	ldrh	r2, [r7, #2]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr

08002720 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <USART1_IRQHandler+0x10>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4798      	blx	r3
}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200000cc 	.word	0x200000cc

08002734 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8002738:	4b02      	ldr	r3, [pc, #8]	; (8002744 <USART2_IRQHandler+0x10>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	4798      	blx	r3
}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	200000cc 	.word	0x200000cc

08002748 <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 800274c:	4b02      	ldr	r3, [pc, #8]	; (8002758 <USART3_IRQHandler+0x10>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4798      	blx	r3
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200000cc 	.word	0x200000cc

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	2600      	movs	r6, #0
 8002760:	4d0c      	ldr	r5, [pc, #48]	; (8002794 <__libc_init_array+0x38>)
 8002762:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002764:	1b64      	subs	r4, r4, r5
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	42a6      	cmp	r6, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	f000 f81a 	bl	80027a4 <_init>
 8002770:	2600      	movs	r6, #0
 8002772:	4d0a      	ldr	r5, [pc, #40]	; (800279c <__libc_init_array+0x40>)
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <__libc_init_array+0x44>)
 8002776:	1b64      	subs	r4, r4, r5
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	42a6      	cmp	r6, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f855 3b04 	ldr.w	r3, [r5], #4
 8002784:	4798      	blx	r3
 8002786:	3601      	adds	r6, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f855 3b04 	ldr.w	r3, [r5], #4
 800278e:	4798      	blx	r3
 8002790:	3601      	adds	r6, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	080027bc 	.word	0x080027bc
 8002798:	080027bc 	.word	0x080027bc
 800279c:	080027bc 	.word	0x080027bc
 80027a0:	080027c0 	.word	0x080027c0

080027a4 <_init>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	bf00      	nop
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr

080027b0 <_fini>:
 80027b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b2:	bf00      	nop
 80027b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b6:	bc08      	pop	{r3}
 80027b8:	469e      	mov	lr, r3
 80027ba:	4770      	bx	lr
