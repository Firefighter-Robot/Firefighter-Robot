
hi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a70  08000130  08000130  00010130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001ba0  08001ba0  00011ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ba8  08001ba8  00011bb0  2**0
                  CONTENTS
  4 .ARM          00000000  08001ba8  08001ba8  00011bb0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ba8  08001bb0  00011bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ba8  08001ba8  00011ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001bac  08001bac  00011bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011bb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08001bb0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001bb0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011bb0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003ea5  00000000  00000000  00011bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001326  00000000  00000000  00015a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00001acc  00000000  00000000  00016da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  00018870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000360  00000000  00000000  00018ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000200e  00000000  00000000  00019008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000062ab  00000000  00000000  0001b016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000dd2c  00000000  00000000  000212c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002efed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000fb8  00000000  00000000  0002f040  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001b88 	.word	0x08001b88

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001b88 	.word	0x08001b88

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	3c01      	subs	r4, #1
 80002ac:	bf28      	it	cs
 80002ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b2:	d2e9      	bcs.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2uiz>:
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	d211      	bcs.n	8000934 <__aeabi_d2uiz+0x28>
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000914:	d211      	bcs.n	800093a <__aeabi_d2uiz+0x2e>
 8000916:	d50d      	bpl.n	8000934 <__aeabi_d2uiz+0x28>
 8000918:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d40e      	bmi.n	8000940 <__aeabi_d2uiz+0x34>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	fa23 f002 	lsr.w	r0, r3, r2
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800093e:	d102      	bne.n	8000946 <__aeabi_d2uiz+0x3a>
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	4770      	bx	lr
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	4770      	bx	lr

0800094c <__aeabi_d2f>:
 800094c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000950:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000954:	bf24      	itt	cs
 8000956:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800095a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800095e:	d90d      	bls.n	800097c <__aeabi_d2f+0x30>
 8000960:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000964:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000968:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800096c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000970:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000974:	bf08      	it	eq
 8000976:	f020 0001 	biceq.w	r0, r0, #1
 800097a:	4770      	bx	lr
 800097c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000980:	d121      	bne.n	80009c6 <__aeabi_d2f+0x7a>
 8000982:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000986:	bfbc      	itt	lt
 8000988:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800098c:	4770      	bxlt	lr
 800098e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000992:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000996:	f1c2 0218 	rsb	r2, r2, #24
 800099a:	f1c2 0c20 	rsb	ip, r2, #32
 800099e:	fa10 f30c 	lsls.w	r3, r0, ip
 80009a2:	fa20 f002 	lsr.w	r0, r0, r2
 80009a6:	bf18      	it	ne
 80009a8:	f040 0001 	orrne.w	r0, r0, #1
 80009ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009b8:	ea40 000c 	orr.w	r0, r0, ip
 80009bc:	fa23 f302 	lsr.w	r3, r3, r2
 80009c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009c4:	e7cc      	b.n	8000960 <__aeabi_d2f+0x14>
 80009c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ca:	d107      	bne.n	80009dc <__aeabi_d2f+0x90>
 80009cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009d0:	bf1e      	ittt	ne
 80009d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009da:	4770      	bxne	lr
 80009dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__gesf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpsf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__lesf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpsf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpsf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000a08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a16:	d011      	beq.n	8000a3c <__cmpsf2+0x40>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000a1e:	bf18      	it	ne
 8000a20:	ea90 0f01 	teqne	r0, r1
 8000a24:	bf58      	it	pl
 8000a26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000a2a:	bf88      	it	hi
 8000a2c:	17c8      	asrhi	r0, r1, #31
 8000a2e:	bf38      	it	cc
 8000a30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000a34:	bf18      	it	ne
 8000a36:	f040 0001 	orrne.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	d102      	bne.n	8000a48 <__cmpsf2+0x4c>
 8000a42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000a46:	d105      	bne.n	8000a54 <__cmpsf2+0x58>
 8000a48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000a4c:	d1e4      	bne.n	8000a18 <__cmpsf2+0x1c>
 8000a4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000a52:	d0e1      	beq.n	8000a18 <__cmpsf2+0x1c>
 8000a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_cfrcmple>:
 8000a5c:	4684      	mov	ip, r0
 8000a5e:	4608      	mov	r0, r1
 8000a60:	4661      	mov	r1, ip
 8000a62:	e7ff      	b.n	8000a64 <__aeabi_cfcmpeq>

08000a64 <__aeabi_cfcmpeq>:
 8000a64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000a66:	f7ff ffc9 	bl	80009fc <__cmpsf2>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	bf48      	it	mi
 8000a6e:	f110 0f00 	cmnmi.w	r0, #0
 8000a72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000a74 <__aeabi_fcmpeq>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff fff4 	bl	8000a64 <__aeabi_cfcmpeq>
 8000a7c:	bf0c      	ite	eq
 8000a7e:	2001      	moveq	r0, #1
 8000a80:	2000      	movne	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_fcmplt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffea 	bl	8000a64 <__aeabi_cfcmpeq>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_fcmple>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffe0 	bl	8000a64 <__aeabi_cfcmpeq>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_fcmpge>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffd2 	bl	8000a5c <__aeabi_cfrcmple>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fcmpgt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffc8 	bl	8000a5c <__aeabi_cfrcmple>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <LCD_init>:




void LCD_init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
	GPIO_Pinconfig_t pincfg_LCD;
	// lcd_Data_Direction-->>Output
	pincfg_LCD.pinNumber=GPIO_PIN_12;
 8000ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae2:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin0 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin0 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOB,&pincfg_LCD);
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	4619      	mov	r1, r3
 8000af0:	4831      	ldr	r0, [pc, #196]	; (8000bb8 <LCD_init+0xe0>)
 8000af2:	f000 fbbf 	bl	8001274 <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_13;
 8000af6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afa:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin1 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000afc:	2304      	movs	r3, #4
 8000afe:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin1 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b00:	2301      	movs	r3, #1
 8000b02:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOB,&pincfg_LCD);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	482b      	ldr	r0, [pc, #172]	; (8000bb8 <LCD_init+0xe0>)
 8000b0a:	f000 fbb3 	bl	8001274 <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_14;
 8000b0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b12:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin2 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000b14:	2304      	movs	r3, #4
 8000b16:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin2 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOB,&pincfg_LCD);
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4825      	ldr	r0, [pc, #148]	; (8000bb8 <LCD_init+0xe0>)
 8000b22:	f000 fba7 	bl	8001274 <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=GPIO_PIN_15;
 8000b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2a:	80bb      	strh	r3, [r7, #4]
	//PORTA Pin3 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	71bb      	strb	r3, [r7, #6]
	//PORTA Pin3 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b30:	2301      	movs	r3, #1
 8000b32:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOB,&pincfg_LCD);
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	4619      	mov	r1, r3
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <LCD_init+0xe0>)
 8000b3a:	f000 fb9b 	bl	8001274 <MCAL_GPIO_Init>
//	//PORTA Pin7 at 10 MHZ
//	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
//	//init pin
//	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);

	pincfg_LCD.pinNumber=rs;
 8000b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b42:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin1 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000b44:	2304      	movs	r3, #4
 8000b46:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin1 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481a      	ldr	r0, [pc, #104]	; (8000bbc <LCD_init+0xe4>)
 8000b52:	f000 fb8f 	bl	8001274 <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=RW;
 8000b56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b5a:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin2 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000b5c:	2304      	movs	r3, #4
 8000b5e:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin2 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b60:	2301      	movs	r3, #1
 8000b62:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOB,&pincfg_LCD);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <LCD_init+0xe0>)
 8000b6a:	f000 fb83 	bl	8001274 <MCAL_GPIO_Init>

	pincfg_LCD.pinNumber=en;
 8000b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b72:	80bb      	strh	r3, [r7, #4]
	//PORTB Pin3 as output_pull_push
	pincfg_LCD.GPIO_MODE=GPIO_MODE_OUTPUT_PP;
 8000b74:	2304      	movs	r3, #4
 8000b76:	71bb      	strb	r3, [r7, #6]
	//PORTB Pin3 at 10 MHZ
	pincfg_LCD.GPIO_OUTPUT_Speed=GPIO_speed_10M;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	71fb      	strb	r3, [r7, #7]
	//init pin
	MCAL_GPIO_Init(GPIOA,&pincfg_LCD);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480e      	ldr	r0, [pc, #56]	; (8000bbc <LCD_init+0xe4>)
 8000b82:	f000 fb77 	bl	8001274 <MCAL_GPIO_Init>
	delay_ms(2);
 8000b86:	2002      	movs	r0, #2
 8000b88:	f000 f97c 	bl	8000e84 <delay_ms>
	LCD_cmd(Entry_Mode);                        // take cursor to next position "shift cursor to right"
	LCD_cmd(Clear_Display);                    // Clear display screen
	delay_ms(2);
#endif
#ifdef _4_bit_mode
	LCD_cmd(0x02);                // send for 4 bit initialization of LCD "shift cursor to left"
 8000b8c:	2002      	movs	r0, #2
 8000b8e:	f000 f817 	bl	8000bc0 <LCD_cmd>
	LCD_cmd(_2L_4b);                              // 2 line 5*7 matrix in 4-bit mode
 8000b92:	2028      	movs	r0, #40	; 0x28
 8000b94:	f000 f814 	bl	8000bc0 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_off);                        // take cursor to next position "shift cursor to right"
 8000b98:	200c      	movs	r0, #12
 8000b9a:	f000 f811 	bl	8000bc0 <LCD_cmd>
	LCD_cmd(Clear_Display);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 f80e 	bl	8000bc0 <LCD_cmd>
	LCD_cmd(Display_on_Cursor_blinking);              // Display on cursor off
 8000ba4:	200f      	movs	r0, #15
 8000ba6:	f000 f80b 	bl	8000bc0 <LCD_cmd>
	//LCD_cmd(Clear_Display);                    // Clear display screen
	delay_ms(2);
 8000baa:	2002      	movs	r0, #2
 8000bac:	f000 f96a 	bl	8000e84 <delay_ms>
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40010c00 	.word	0x40010c00
 8000bbc:	40010800 	.word	0x40010800

08000bc0 <LCD_cmd>:

void LCD_cmd( unsigned char cmd )
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	delay_ms(30);
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
	delay_ms(2);
#endif
#ifdef _4_bit_mode
	MCAL_GPIO_WritePort(lcd_Data_Port, (cmd & 0XF0) << 8);
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8000bd4:	f023 030f 	bic.w	r3, r3, #15
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4824      	ldr	r0, [pc, #144]	; (8000c70 <LCD_cmd+0xb0>)
 8000bde:	f000 fbdf 	bl	80013a0 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 8000be2:	2200      	movs	r2, #0
 8000be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000be8:	4822      	ldr	r0, [pc, #136]	; (8000c74 <LCD_cmd+0xb4>)
 8000bea:	f000 fbc2 	bl	8001372 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf4:	481e      	ldr	r0, [pc, #120]	; (8000c70 <LCD_cmd+0xb0>)
 8000bf6:	f000 fbbc 	bl	8001372 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c00:	481c      	ldr	r0, [pc, #112]	; (8000c74 <LCD_cmd+0xb4>)
 8000c02:	f000 fbb6 	bl	8001372 <MCAL_GPIO_WritePin>
	delay_ms(10);
 8000c06:	200a      	movs	r0, #10
 8000c08:	f000 f93c 	bl	8000e84 <delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <LCD_cmd+0xb4>)
 8000c14:	f000 fbad 	bl	8001372 <MCAL_GPIO_WritePin>
	delay_ms(2);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f000 f933 	bl	8000e84 <delay_ms>
	MCAL_GPIO_WritePort(lcd_Data_Port, ( cmd & 0X0F) << 12);               //sending lower nibble of 8 bit i.e 1byte
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	031b      	lsls	r3, r3, #12
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	4619      	mov	r1, r3
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <LCD_cmd+0xb0>)
 8000c28:	f000 fbba 	bl	80013a0 <MCAL_GPIO_WritePort>
	MCAL_GPIO_WritePin(lcd_control_Port,rs,GPIO_PIN_RESET);            // rs=0 i.e select command reg
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <LCD_cmd+0xb4>)
 8000c34:	f000 fb9d 	bl	8001372 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(GPIOB,RW,GPIO_PIN_RESET);					 // R/W=0 i.e MODE Write
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c3e:	480c      	ldr	r0, [pc, #48]	; (8000c70 <LCD_cmd+0xb0>)
 8000c40:	f000 fb97 	bl	8001372 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_SET);					// give high pulse to enable pin
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	480a      	ldr	r0, [pc, #40]	; (8000c74 <LCD_cmd+0xb4>)
 8000c4c:	f000 fb91 	bl	8001372 <MCAL_GPIO_WritePin>
	delay_ms(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f000 f917 	bl	8000e84 <delay_ms>
	MCAL_GPIO_WritePin(lcd_control_Port,en,GPIO_PIN_RESET);				 // give low pulse to enable pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5c:	4805      	ldr	r0, [pc, #20]	; (8000c74 <LCD_cmd+0xb4>)
 8000c5e:	f000 fb88 	bl	8001372 <MCAL_GPIO_WritePin>
	delay_ms(2);
 8000c62:	2002      	movs	r0, #2
 8000c64:	f000 f90e 	bl	8000e84 <delay_ms>
#endif
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40010c00 	.word	0x40010c00
 8000c74:	40010800 	.word	0x40010800

08000c78 <Servo_Init>:


#include "Servo.h"

void Servo_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
	uint16_t top;
	top=( ( 0.02 *  MCAL_Get_PCLC1_FREQ() ) / 8 );
 8000c7e:	f000 fca7 	bl	80015d0 <MCAL_Get_PCLC1_FREQ>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fbb5 	bl	80003f4 <__aeabi_ui2d>
 8000c8a:	a319      	add	r3, pc, #100	; (adr r3, 8000cf0 <Servo_Init+0x78>)
 8000c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c90:	f7ff fc2a 	bl	80004e8 <__aeabi_dmul>
 8000c94:	4602      	mov	r2, r0
 8000c96:	460b      	mov	r3, r1
 8000c98:	4610      	mov	r0, r2
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <Servo_Init+0x80>)
 8000ca2:	f7ff fd4b 	bl	800073c <__aeabi_ddiv>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fe2d 	bl	800090c <__aeabi_d2uiz>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	82fb      	strh	r3, [r7, #22]
	TIMx_config_t  TIMx_Config;
	TIMx_Config.COUNT_MODE=TIMx_COUNT_MODE_UP;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	80fb      	strh	r3, [r7, #6]
	TIMx_Config.MODE=TIMx_MODE_PWM2;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	80bb      	strh	r3, [r7, #4]
	TIMx_Config.Prescalers=7;  // timer clock 1mhz
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	813b      	strh	r3, [r7, #8]
	MCAL_TIMx_Init(TIM3, &TIMx_Config , CH2);
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <Servo_Init+0x84>)
 8000cca:	f000 fcf1 	bl	80016b0 <MCAL_TIMx_Init>
	MCAL_TIMx_Set_Compare_Value(TIM3,10000,CH2);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <Servo_Init+0x84>)
 8000cd6:	f000 fe4b 	bl	8001970 <MCAL_TIMx_Set_Compare_Value>
	MCAL_TIMx_Set_TOP_Value(TIM3, top);//Frequency 50 hz
 8000cda:	8afb      	ldrh	r3, [r7, #22]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4807      	ldr	r0, [pc, #28]	; (8000cfc <Servo_Init+0x84>)
 8000ce0:	f000 fe7a 	bl	80019d8 <MCAL_TIMx_Set_TOP_Value>
}
 8000ce4:	bf00      	nop
 8000ce6:	3718      	adds	r7, #24
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	f3af 8000 	nop.w
 8000cf0:	47ae147b 	.word	0x47ae147b
 8000cf4:	3f947ae1 	.word	0x3f947ae1
 8000cf8:	40200000 	.word	0x40200000
 8000cfc:	40000400 	.word	0x40000400

08000d00 <HAL_Ultrasonic_init>:

static GPIO_Pinconfig_t GPIO_Pin;


void HAL_Ultrasonic_init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0

	// set timer 4 configuration
	MCAL_TIM4_CAP_Init();
 8000d04:	f000 fe76 	bl	80019f4 <MCAL_TIM4_CAP_Init>

	// set trigger as an output
	GPIO_Pin.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <HAL_Ultrasonic_init+0x28>)
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	709a      	strb	r2, [r3, #2]
	GPIO_Pin.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_Ultrasonic_init+0x28>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	70da      	strb	r2, [r3, #3]
	GPIO_Pin.pinNumber = Trigger_Pin;
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <HAL_Ultrasonic_init+0x28>)
 8000d16:	2220      	movs	r2, #32
 8000d18:	801a      	strh	r2, [r3, #0]
	MCAL_GPIO_Init(PORT,&GPIO_Pin);
 8000d1a:	4903      	ldr	r1, [pc, #12]	; (8000d28 <HAL_Ultrasonic_init+0x28>)
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <HAL_Ultrasonic_init+0x2c>)
 8000d1e:	f000 faa9 	bl	8001274 <MCAL_GPIO_Init>

}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000001c 	.word	0x2000001c
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <Clock_INIT>:
}Redirection;



void Clock_INIT(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	//set on the clock for PORTA
	RCC_GPIOA_CLK_EN();
 8000d34:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <Clock_INIT+0x6c>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <Clock_INIT+0x6c>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	6193      	str	r3, [r2, #24]
	//set on the clock for PORTB
	RCC_GPIOB_CLK_EN();
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <Clock_INIT+0x6c>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a15      	ldr	r2, [pc, #84]	; (8000d9c <Clock_INIT+0x6c>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6193      	str	r3, [r2, #24]
	//set on the clock for AFIO
	RCC_GPIOC_CLK_EN();
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <Clock_INIT+0x6c>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a12      	ldr	r2, [pc, #72]	; (8000d9c <Clock_INIT+0x6c>)
 8000d52:	f043 0310 	orr.w	r3, r3, #16
 8000d56:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <Clock_INIT+0x6c>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a0f      	ldr	r2, [pc, #60]	; (8000d9c <Clock_INIT+0x6c>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	6193      	str	r3, [r2, #24]
	RCC_TIM2_CLK_Enable();
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <Clock_INIT+0x6c>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <Clock_INIT+0x6c>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	61d3      	str	r3, [r2, #28]
	RCC_TIM3_CLK_Enable();
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <Clock_INIT+0x6c>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <Clock_INIT+0x6c>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	61d3      	str	r3, [r2, #28]
	RCC_TIM4_CLK_Enable();
 8000d7c:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <Clock_INIT+0x6c>)
 8000d7e:	69db      	ldr	r3, [r3, #28]
 8000d80:	4a06      	ldr	r2, [pc, #24]	; (8000d9c <Clock_INIT+0x6c>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	61d3      	str	r3, [r2, #28]
	RCC_ADC1_CLK_Enable();
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Clock_INIT+0x6c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a03      	ldr	r2, [pc, #12]	; (8000d9c <Clock_INIT+0x6c>)
 8000d8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d92:	6193      	str	r3, [r2, #24]
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_Driver_init>:
}



void HAL_Driver_init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	//HAL_Flame_init();
	//HAL_DC_Motors_init();
	HAL_Ultrasonic_init();
 8000da4:	f7ff ffac 	bl	8000d00 <HAL_Ultrasonic_init>
	Servo_Init();
 8000da8:	f7ff ff66 	bl	8000c78 <Servo_Init>
	//Init_pumb();

}
 8000dac:	bf00      	nop
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <main>:


int main (){
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0

	Clock_INIT();
 8000db6:	f7ff ffbb 	bl	8000d30 <Clock_INIT>
	HAL_Driver_init();
 8000dba:	f7ff fff1 	bl	8000da0 <HAL_Driver_init>
//
	LCD_init();
 8000dbe:	f7ff fe8b 	bl	8000ad8 <LCD_init>
	GPIO_Pinconfig_t gpiocfg;
	gpiocfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	70bb      	strb	r3, [r7, #2]
	gpiocfg.pinNumber = GPIO_PIN_13;
 8000dc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dca:	803b      	strh	r3, [r7, #0]
	gpiocfg.GPIO_OUTPUT_Speed = GPIO_speed_10M;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOC, &gpiocfg);
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4815      	ldr	r0, [pc, #84]	; (8000e2c <main+0x7c>)
 8000dd6:	f000 fa4d 	bl	8001274 <MCAL_GPIO_Init>
	//	}
	//}
	//
//	MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
//	LCD_Character('A');
	MCAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4812      	ldr	r0, [pc, #72]	; (8000e2c <main+0x7c>)
 8000de2:	f000 fac6 	bl	8001372 <MCAL_GPIO_WritePin>
	delay_ms(10000);
 8000de6:	f242 7010 	movw	r0, #10000	; 0x2710
 8000dea:	f000 f84b 	bl	8000e84 <delay_ms>
	float mm = 0;
 8000dee:	f04f 0300 	mov.w	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
	while (1)
	{



		if(mm = MCAL_TIM4_CAP_Get_High())
 8000df4:	f000 fe38 	bl	8001a68 <MCAL_TIM4_CAP_Get_High>
 8000df8:	6078      	str	r0, [r7, #4]
 8000dfa:	f04f 0100 	mov.w	r1, #0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe38 	bl	8000a74 <__aeabi_fcmpeq>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d1f4      	bne.n	8000df4 <main+0x44>
		{
		 delay_ms(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f000 f839 	bl	8000e84 <delay_ms>
		 MCAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <main+0x7c>)
 8000e18:	f000 fad0 	bl	80013bc <MCAL_GPIO_TogglePin>
		 delay_ms(1000);
 8000e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e20:	f000 f830 	bl	8000e84 <delay_ms>

		 mm = 0;
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	607b      	str	r3, [r7, #4]
		if(mm = MCAL_TIM4_CAP_Get_High())
 8000e2a:	e7e3      	b.n	8000df4 <main+0x44>
 8000e2c:	40011000 	.word	0x40011000

08000e30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e32:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e34:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480c      	ldr	r0, [pc, #48]	; (8000e6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490d      	ldr	r1, [pc, #52]	; (8000e70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	; (8000e74 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0a      	ldr	r4, [pc, #40]	; (8000e7c <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e5e:	f000 fe6f 	bl	8001b40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff ffa5 	bl	8000db0 <main>

08000e66 <LoopForever>:

LoopForever:
    b LoopForever
 8000e66:	e7fe      	b.n	8000e66 <LoopForever>
  ldr   r0, =_estack
 8000e68:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e70:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e74:	08001bb0 	.word	0x08001bb0
  ldr r2, =_sbss
 8000e78:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e7c:	200000ac 	.word	0x200000ac

08000e80 <ADC3_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e80:	e7fe      	b.n	8000e80 <ADC3_IRQHandler>
	...

08000e84 <delay_ms>:

#include "delay.h"


void delay_ms(int ms)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	// timer2 work at 8 MHZ set psc 7999 ( each increment take 1ms )
	TIM3->PSC=7999;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <delay_ms+0x48>)
 8000e8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
	// timer count at ms-1
	TIM3->ARR=ms-1;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	1e5a      	subs	r2, r3, #1
 8000e98:	4b0c      	ldr	r3, [pc, #48]	; (8000ecc <delay_ms+0x48>)
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
	// enable counter
	TIM3->CR1 |=1<<0;
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ecc <delay_ms+0x48>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <delay_ms+0x48>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]
	// wait until counter reached compared register
	while(!(TIM3->SR & 1<<0));
 8000ea8:	bf00      	nop
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <delay_ms+0x48>)
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f9      	beq.n	8000eaa <delay_ms+0x26>
	// clear flag
	TIM3->SR=0;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <delay_ms+0x48>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
	// disable counter
	TIM3->CR1 =0;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <delay_ms+0x48>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	40000400 	.word	0x40000400

08000ed0 <ADC1_2_IRQHandler>:




void ADC1_2_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	GP_ADC_IRQ_CALL();
 8000ed4:	4b02      	ldr	r3, [pc, #8]	; (8000ee0 <ADC1_2_IRQHandler+0x10>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4798      	blx	r3
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000020 	.word	0x20000020

08000ee4 <EXTI0_IRQHandler>:
 *
 * ===============================================================
 */

void EXTI0_IRQHandler (void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<0);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <EXTI0_IRQHandler+0x1c>)
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <EXTI0_IRQHandler+0x1c>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[0]();
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <EXTI0_IRQHandler+0x20>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4798      	blx	r3
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010400 	.word	0x40010400
 8000f04:	20000024 	.word	0x20000024

08000f08 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<1);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <EXTI1_IRQHandler+0x1c>)
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <EXTI1_IRQHandler+0x1c>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[1]();
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <EXTI1_IRQHandler+0x20>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	4798      	blx	r3
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010400 	.word	0x40010400
 8000f28:	20000024 	.word	0x20000024

08000f2c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler (void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<2);
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <EXTI2_IRQHandler+0x1c>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <EXTI2_IRQHandler+0x1c>)
 8000f36:	f043 0304 	orr.w	r3, r3, #4
 8000f3a:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[2]();
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <EXTI2_IRQHandler+0x20>)
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	4798      	blx	r3
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40010400 	.word	0x40010400
 8000f4c:	20000024 	.word	0x20000024

08000f50 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler (void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<3);
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <EXTI3_IRQHandler+0x1c>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <EXTI3_IRQHandler+0x1c>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[3]();
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <EXTI3_IRQHandler+0x20>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4798      	blx	r3
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40010400 	.word	0x40010400
 8000f70:	20000024 	.word	0x20000024

08000f74 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler (void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	// Clear Pending register
	EXTI->PR |=(1<<4);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <EXTI4_IRQHandler+0x1c>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <EXTI4_IRQHandler+0x1c>)
 8000f7e:	f043 0310 	orr.w	r3, r3, #16
 8000f82:	6153      	str	r3, [r2, #20]
	//Call function
	GP_IRQ_CALL[4]();
 8000f84:	4b03      	ldr	r3, [pc, #12]	; (8000f94 <EXTI4_IRQHandler+0x20>)
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	4798      	blx	r3
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40010400 	.word	0x40010400
 8000f94:	20000024 	.word	0x20000024

08000f98 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler (void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<5 )	{ EXTI->PR |=( 1 << 5 ) ;		GP_IRQ_CALL[5]() ; }
 8000f9c:	4b26      	ldr	r3, [pc, #152]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000f9e:	695b      	ldr	r3, [r3, #20]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d008      	beq.n	8000fba <EXTI9_5_IRQHandler+0x22>
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	4a22      	ldr	r2, [pc, #136]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fae:	f043 0320 	orr.w	r3, r3, #32
 8000fb2:	6153      	str	r3, [r2, #20]
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <EXTI9_5_IRQHandler+0xa4>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	4798      	blx	r3
	if( EXTI->PR & 1<<6 )	{ EXTI->PR |=( 1 << 6 ) ;		GP_IRQ_CALL[6]() ; }
 8000fba:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d008      	beq.n	8000fd8 <EXTI9_5_IRQHandler+0x40>
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fc8:	695b      	ldr	r3, [r3, #20]
 8000fca:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fd0:	6153      	str	r3, [r2, #20]
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <EXTI9_5_IRQHandler+0xa4>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4798      	blx	r3
	if( EXTI->PR & 1<<7 )	{ EXTI->PR |=( 1 << 7 ) ;		GP_IRQ_CALL[7]() ; }
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d008      	beq.n	8000ff6 <EXTI9_5_IRQHandler+0x5e>
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	4a13      	ldr	r2, [pc, #76]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fee:	6153      	str	r3, [r2, #20]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	; (800103c <EXTI9_5_IRQHandler+0xa4>)
 8000ff2:	69db      	ldr	r3, [r3, #28]
 8000ff4:	4798      	blx	r3
	if( EXTI->PR & 1<<8 )	{ EXTI->PR |=( 1 << 8 ) ;		GP_IRQ_CALL[8]() ; }
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8000ff8:	695b      	ldr	r3, [r3, #20]
 8000ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d008      	beq.n	8001014 <EXTI9_5_IRQHandler+0x7c>
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8001008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <EXTI9_5_IRQHandler+0xa4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4798      	blx	r3
	if( EXTI->PR & 1<<9 )	{ EXTI->PR |=( 1 << 9 ) ;		GP_IRQ_CALL[9]() ; }
 8001014:	4b08      	ldr	r3, [pc, #32]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <EXTI9_5_IRQHandler+0x9a>
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8001022:	695b      	ldr	r3, [r3, #20]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <EXTI9_5_IRQHandler+0xa0>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6153      	str	r3, [r2, #20]
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <EXTI9_5_IRQHandler+0xa4>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	4798      	blx	r3
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40010400 	.word	0x40010400
 800103c:	20000024 	.word	0x20000024

08001040 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler (void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10 )	{ EXTI->PR |=( 1 << 10 ) ;		GP_IRQ_CALL[10]() ; }
 8001044:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <EXTI15_10_IRQHandler+0x22>
 8001050:	4b2a      	ldr	r3, [pc, #168]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	4a29      	ldr	r2, [pc, #164]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800105a:	6153      	str	r3, [r2, #20]
 800105c:	4b28      	ldr	r3, [pc, #160]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	4798      	blx	r3
	if( EXTI->PR & 1<<11 )	{ EXTI->PR |=( 1 << 11 ) ;		GP_IRQ_CALL[11]() ; }
 8001062:	4b26      	ldr	r3, [pc, #152]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800106a:	2b00      	cmp	r3, #0
 800106c:	d008      	beq.n	8001080 <EXTI15_10_IRQHandler+0x40>
 800106e:	4b23      	ldr	r3, [pc, #140]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	4a22      	ldr	r2, [pc, #136]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001074:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001078:	6153      	str	r3, [r2, #20]
 800107a:	4b21      	ldr	r3, [pc, #132]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	4798      	blx	r3
	if( EXTI->PR & 1<<12 )	{ EXTI->PR |=( 1 << 12 ) ;		GP_IRQ_CALL[12]() ; }
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d008      	beq.n	800109e <EXTI15_10_IRQHandler+0x5e>
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	4a1a      	ldr	r2, [pc, #104]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 8001092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001096:	6153      	str	r3, [r2, #20]
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 800109a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109c:	4798      	blx	r3
	if( EXTI->PR & 1<<13 )	{ EXTI->PR |=( 1 << 13 ) ;		GP_IRQ_CALL[13]() ; }
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <EXTI15_10_IRQHandler+0x7c>
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b4:	6153      	str	r3, [r2, #20]
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	4798      	blx	r3
	if( EXTI->PR & 1<<14 )	{ EXTI->PR |=( 1 << 14 ) ;		GP_IRQ_CALL[14]() ; }
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <EXTI15_10_IRQHandler+0x9a>
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010ca:	695b      	ldr	r3, [r3, #20]
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d2:	6153      	str	r3, [r2, #20]
 80010d4:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 80010d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d8:	4798      	blx	r3
	if( EXTI->PR & 1<<15 )	{ EXTI->PR |=( 1 << 15 ) ;		GP_IRQ_CALL[15]() ; }
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d008      	beq.n	80010f8 <EXTI15_10_IRQHandler+0xb8>
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a04      	ldr	r2, [pc, #16]	; (80010fc <EXTI15_10_IRQHandler+0xbc>)
 80010ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f0:	6153      	str	r3, [r2, #20]
 80010f2:	4b03      	ldr	r3, [pc, #12]	; (8001100 <EXTI15_10_IRQHandler+0xc0>)
 80010f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f6:	4798      	blx	r3
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40010400 	.word	0x40010400
 8001100:	20000024 	.word	0x20000024

08001104 <get_position>:

#include"stm32_f103c6_GPIO.h"


uint8_t get_position(uint16_t pinNumber)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	switch(pinNumber)
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001114:	f000 80a5 	beq.w	8001262 <get_position+0x15e>
 8001118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800111c:	f300 80a3 	bgt.w	8001266 <get_position+0x162>
 8001120:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001124:	f000 809b 	beq.w	800125e <get_position+0x15a>
 8001128:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800112c:	f300 809b 	bgt.w	8001266 <get_position+0x162>
 8001130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001134:	f000 8091 	beq.w	800125a <get_position+0x156>
 8001138:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800113c:	f300 8093 	bgt.w	8001266 <get_position+0x162>
 8001140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001144:	f000 8087 	beq.w	8001256 <get_position+0x152>
 8001148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800114c:	f300 808b 	bgt.w	8001266 <get_position+0x162>
 8001150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001154:	d07d      	beq.n	8001252 <get_position+0x14e>
 8001156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800115a:	f300 8084 	bgt.w	8001266 <get_position+0x162>
 800115e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001162:	d074      	beq.n	800124e <get_position+0x14a>
 8001164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001168:	dc7d      	bgt.n	8001266 <get_position+0x162>
 800116a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116e:	d06c      	beq.n	800124a <get_position+0x146>
 8001170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001174:	dc77      	bgt.n	8001266 <get_position+0x162>
 8001176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800117a:	d064      	beq.n	8001246 <get_position+0x142>
 800117c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001180:	dc71      	bgt.n	8001266 <get_position+0x162>
 8001182:	2b80      	cmp	r3, #128	; 0x80
 8001184:	d05d      	beq.n	8001242 <get_position+0x13e>
 8001186:	2b80      	cmp	r3, #128	; 0x80
 8001188:	dc6d      	bgt.n	8001266 <get_position+0x162>
 800118a:	2b20      	cmp	r3, #32
 800118c:	dc48      	bgt.n	8001220 <get_position+0x11c>
 800118e:	2b00      	cmp	r3, #0
 8001190:	dd69      	ble.n	8001266 <get_position+0x162>
 8001192:	3b01      	subs	r3, #1
 8001194:	2b1f      	cmp	r3, #31
 8001196:	d866      	bhi.n	8001266 <get_position+0x162>
 8001198:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <get_position+0x9c>)
 800119a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119e:	bf00      	nop
 80011a0:	08001227 	.word	0x08001227
 80011a4:	0800122b 	.word	0x0800122b
 80011a8:	08001267 	.word	0x08001267
 80011ac:	0800122f 	.word	0x0800122f
 80011b0:	08001267 	.word	0x08001267
 80011b4:	08001267 	.word	0x08001267
 80011b8:	08001267 	.word	0x08001267
 80011bc:	08001233 	.word	0x08001233
 80011c0:	08001267 	.word	0x08001267
 80011c4:	08001267 	.word	0x08001267
 80011c8:	08001267 	.word	0x08001267
 80011cc:	08001267 	.word	0x08001267
 80011d0:	08001267 	.word	0x08001267
 80011d4:	08001267 	.word	0x08001267
 80011d8:	08001267 	.word	0x08001267
 80011dc:	08001237 	.word	0x08001237
 80011e0:	08001267 	.word	0x08001267
 80011e4:	08001267 	.word	0x08001267
 80011e8:	08001267 	.word	0x08001267
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001267 	.word	0x08001267
 80011f4:	08001267 	.word	0x08001267
 80011f8:	08001267 	.word	0x08001267
 80011fc:	08001267 	.word	0x08001267
 8001200:	08001267 	.word	0x08001267
 8001204:	08001267 	.word	0x08001267
 8001208:	08001267 	.word	0x08001267
 800120c:	08001267 	.word	0x08001267
 8001210:	08001267 	.word	0x08001267
 8001214:	08001267 	.word	0x08001267
 8001218:	08001267 	.word	0x08001267
 800121c:	0800123b 	.word	0x0800123b
 8001220:	2b40      	cmp	r3, #64	; 0x40
 8001222:	d00c      	beq.n	800123e <get_position+0x13a>
 8001224:	e01f      	b.n	8001266 <get_position+0x162>
	{
	case GPIO_PIN_0 :
		return 0;
 8001226:	2300      	movs	r3, #0
 8001228:	e01e      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_1 :
		return 4;
 800122a:	2304      	movs	r3, #4
 800122c:	e01c      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_2 :
		return 8;
 800122e:	2308      	movs	r3, #8
 8001230:	e01a      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_3 :
		return 12;
 8001232:	230c      	movs	r3, #12
 8001234:	e018      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_4 :
		return 16;
 8001236:	2310      	movs	r3, #16
 8001238:	e016      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_5 :
		return 20;
 800123a:	2314      	movs	r3, #20
 800123c:	e014      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_6 :
		return 24;
 800123e:	2318      	movs	r3, #24
 8001240:	e012      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_7 :
		return 28;
 8001242:	231c      	movs	r3, #28
 8001244:	e010      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_8 :
		return 0;
 8001246:	2300      	movs	r3, #0
 8001248:	e00e      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_9 :
		return 4;
 800124a:	2304      	movs	r3, #4
 800124c:	e00c      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_10 :
		return 8;
 800124e:	2308      	movs	r3, #8
 8001250:	e00a      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_11 :
		return 12;
 8001252:	230c      	movs	r3, #12
 8001254:	e008      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_12 :
		return 16;
 8001256:	2310      	movs	r3, #16
 8001258:	e006      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_13 :
		return 20;
 800125a:	2314      	movs	r3, #20
 800125c:	e004      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_14 :
		return 24;
 800125e:	2318      	movs	r3, #24
 8001260:	e002      	b.n	8001268 <get_position+0x164>
		break;
	case GPIO_PIN_15 :
		return 28;
 8001262:	231c      	movs	r3, #28
 8001264:	e000      	b.n	8001268 <get_position+0x164>
		break;
	default:
		return 0;
 8001266:	2300      	movs	r3, #0
	}
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <MCAL_GPIO_Init>:
* @param [in] 		-pinconfig: configuration information for the specified pin
* @retval 			-none
* Note				-stm32f103c6 has GPIO (A--->> E)but the LQFP48 package has GPIO (A---->> D)
*/
void MCAL_GPIO_Init(GPIO_TypeDef *GPIOx , GPIO_Pinconfig_t *pinconfig )
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	// GPIO->CRL configure pins 0-->>7
	// GPIO->CRH configure pins 8-->>15
	volatile uint32_t *configregister =NULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
	uint8_t pin_config=0;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
	configregister = (pinconfig->pinNumber <GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH ;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d801      	bhi.n	8001292 <MCAL_GPIO_Init+0x1e>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e001      	b.n	8001296 <MCAL_GPIO_Init+0x22>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	60bb      	str	r3, [r7, #8]
	//clear MODEy[1:0] and CNFy[1:0]
	(*configregister) &=~(0XF<<get_position(pinconfig->pinNumber));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff31 	bl	8001104 <get_position>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	230f      	movs	r3, #15
 80012a8:	4093      	lsls	r3, r2
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	401a      	ands	r2, r3
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	601a      	str	r2, [r3, #0]
	//if pin is output
	if(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	789b      	ldrb	r3, [r3, #2]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d00b      	beq.n	80012d6 <MCAL_GPIO_Init+0x62>
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	789b      	ldrb	r3, [r3, #2]
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d007      	beq.n	80012d6 <MCAL_GPIO_Init+0x62>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	789b      	ldrb	r3, [r3, #2]
 80012ca:	2b05      	cmp	r3, #5
 80012cc:	d003      	beq.n	80012d6 <MCAL_GPIO_Init+0x62>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	789b      	ldrb	r3, [r3, #2]
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d10e      	bne.n	80012f4 <MCAL_GPIO_Init+0x80>
	{
		//set MODEy[1:0] and CNFy[1:0]
		pin_config = ((((pinconfig->GPIO_MODE - 4) <<2) | (pinconfig->GPIO_OUTPUT_Speed)) & 0x0f);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	789b      	ldrb	r3, [r3, #2]
 80012da:	3b04      	subs	r3, #4
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	b25a      	sxtb	r2, r3
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	78db      	ldrb	r3, [r3, #3]
 80012e4:	b25b      	sxtb	r3, r3
 80012e6:	4313      	orrs	r3, r2
 80012e8:	b25b      	sxtb	r3, r3
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	73fb      	strb	r3, [r7, #15]
 80012f2:	e02c      	b.n	800134e <MCAL_GPIO_Init+0xda>
	}
	//if pin is input
	else
	{
		if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLO || pinconfig->GPIO_MODE == GPIO_MODE_Analog)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d003      	beq.n	8001304 <MCAL_GPIO_Init+0x90>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d107      	bne.n	8001314 <MCAL_GPIO_Init+0xa0>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((pinconfig->GPIO_MODE) <<2)) &0x0f);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f003 030f 	and.w	r3, r3, #15
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e01c      	b.n	800134e <MCAL_GPIO_Init+0xda>

		}
		else if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_AF)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	2b08      	cmp	r3, #8
 800131a:	d102      	bne.n	8001322 <MCAL_GPIO_Init+0xae>
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_FLO) <<2)) &0x0f);
 800131c:	2304      	movs	r3, #4
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e015      	b.n	800134e <MCAL_GPIO_Init+0xda>
		}
		else
		{
			//set MODEy[1:0] and CNFy[1:0]
			pin_config = ((((GPIO_MODE_INPUT_PU) <<2)) &0x0f);
 8001322:	2308      	movs	r3, #8
 8001324:	73fb      	strb	r3, [r7, #15]
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	789b      	ldrb	r3, [r3, #2]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d107      	bne.n	800133e <MCAL_GPIO_Init+0xca>
			{
				//  port bit configuration table px_ODR =1
				GPIOx->ODR  |=pinconfig->pinNumber;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	8812      	ldrh	r2, [r2, #0]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	e007      	b.n	800134e <MCAL_GPIO_Init+0xda>
			}
			else
			{
				//  port bit configuration table px_ODR =0
				GPIOx->ODR  &=~(pinconfig->pinNumber);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	8812      	ldrh	r2, [r2, #0]
 8001346:	43d2      	mvns	r2, r2
 8001348:	401a      	ands	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	(*configregister) |=(pin_config<<get_position(pinconfig->pinNumber));
 800134e:	7bfc      	ldrb	r4, [r7, #15]
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fed5 	bl	8001104 <get_position>
 800135a:	4603      	mov	r3, r0
 800135c:	fa04 f203 	lsl.w	r2, r4, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	431a      	orrs	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	601a      	str	r2, [r3, #0]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bd90      	pop	{r4, r7, pc}

08001372 <MCAL_GPIO_WritePin>:
* @param [in] 		-value: pin value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber ,uint8_t value)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	707b      	strb	r3, [r7, #1]
	if (value != GPIO_PIN_RESET)
 8001382:	787b      	ldrb	r3, [r7, #1]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <MCAL_GPIO_WritePin+0x1e>
		 Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		These bits are write-only and can be accessed in Word mode only.
		0: No action on the corresponding ODRx bit
		1: Set the corresponding ODRx bit
		 */
		GPIOx->BSRR= (uint32_t) pinNumber;
 8001388:	887a      	ldrh	r2, [r7, #2]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]
		0: No action on the corresponding ODRx bit
		1: Reset the corresponding ODRx bit
		 */
		GPIOx->BRR= (uint32_t) pinNumber;
	}
}
 800138e:	e002      	b.n	8001396 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR= (uint32_t) pinNumber;
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	615a      	str	r2, [r3, #20]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <MCAL_GPIO_WritePort>:
* @param [in] 		-value: port value
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx ,uint16_t value)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR= (uint32_t) value;
 80013ac:	887a      	ldrh	r2, [r7, #2]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	60da      	str	r2, [r3, #12]
}
 80013b2:	bf00      	nop
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <MCAL_GPIO_TogglePin>:
* @param [in] 		-pinNumber: set pinNumber according to @ ref  GPIO_PINS_Define
* @retval 			-none
* Note				-none
*/
void MCAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx ,uint16_t pinNumber )
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^=pinNumber;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	405a      	eors	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <Slave_Status>:
* @param [in] 		-I2Cx:  specified I2Cx x=[ 1 : 2 ]
* @retval 			-none
* Note				-this function jump to call_interrupt in main .
*/
void Slave_Status(I2C_TypeDef* I2Cx , Slave_State state)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
	uint8_t index =  I2Cx == I2C1 ? 0 : 1 ;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <Slave_Status+0xd0>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf14      	ite	ne
 80013f4:	2301      	movne	r3, #1
 80013f6:	2300      	moveq	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	73fb      	strb	r3, [r7, #15]

	switch(state)
 80013fc:	78fb      	ldrb	r3, [r7, #3]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d851      	bhi.n	80014a6 <Slave_Status+0xc6>
 8001402:	a201      	add	r2, pc, #4	; (adr r2, 8001408 <Slave_Status+0x28>)
 8001404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001408:	08001419 	.word	0x08001419
 800140c:	0800143d 	.word	0x0800143d
 8001410:	08001455 	.word	0x08001455
 8001414:	08001479 	.word	0x08001479
	{
	case I2C_EV_STOP :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d03b      	beq.n	800149c <Slave_Status+0xbc>
		{
			//Stop condition is detected on the bus by the slave after an acknowledge
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_STOP);
 8001424:	7bfa      	ldrb	r2, [r7, #15]
 8001426:	4923      	ldr	r1, [pc, #140]	; (80014b4 <Slave_Status+0xd4>)
 8001428:	4613      	mov	r3, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	1a9b      	subs	r3, r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	440b      	add	r3, r1
 8001432:	3318      	adds	r3, #24
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2000      	movs	r0, #0
 8001438:	4798      	blx	r3
		}
		break;
 800143a:	e02f      	b.n	800149c <Slave_Status+0xbc>
	case I2C_EV_ADDR_Matched :
		//address matched with the OAR registers content or a general call
		g_I2C_Config[index].P_IRQ_CALL(I2C_EV_ADDR_Matched);
 800143c:	7bfa      	ldrb	r2, [r7, #15]
 800143e:	491d      	ldr	r1, [pc, #116]	; (80014b4 <Slave_Status+0xd4>)
 8001440:	4613      	mov	r3, r2
 8001442:	00db      	lsls	r3, r3, #3
 8001444:	1a9b      	subs	r3, r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	3318      	adds	r3, #24
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2001      	movs	r0, #1
 8001450:	4798      	blx	r3
		break;
 8001452:	e028      	b.n	80014a6 <Slave_Status+0xc6>
	case I2C_EV_DATA_REQ :
		if(I2Cx->SR2 & (I2C_SR2_TRA))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d01f      	beq.n	80014a0 <Slave_Status+0xc0>
		{
			// the APP layer should send the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_REQ);
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	4914      	ldr	r1, [pc, #80]	; (80014b4 <Slave_Status+0xd4>)
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3318      	adds	r3, #24
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2002      	movs	r0, #2
 8001474:	4798      	blx	r3
		}
		break;
 8001476:	e013      	b.n	80014a0 <Slave_Status+0xc0>
	case I2C_EV_DATA_RCV :
		// Make Sure the Slave is really in receiver mode
		if(!(I2Cx->SR2 & (I2C_SR2_TRA)))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	699b      	ldr	r3, [r3, #24]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d10f      	bne.n	80014a4 <Slave_Status+0xc4>
		{
			// the APP layer should read the data
			g_I2C_Config[index].P_IRQ_CALL(I2C_EV_DATA_RCV);
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	490b      	ldr	r1, [pc, #44]	; (80014b4 <Slave_Status+0xd4>)
 8001488:	4613      	mov	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	1a9b      	subs	r3, r3, r2
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	440b      	add	r3, r1
 8001492:	3318      	adds	r3, #24
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2003      	movs	r0, #3
 8001498:	4798      	blx	r3
		}
		break;
 800149a:	e003      	b.n	80014a4 <Slave_Status+0xc4>
		break;
 800149c:	bf00      	nop
 800149e:	e002      	b.n	80014a6 <Slave_Status+0xc6>
		break;
 80014a0:	bf00      	nop
 80014a2:	e000      	b.n	80014a6 <Slave_Status+0xc6>
		break;
 80014a4:	bf00      	nop
	}
}
 80014a6:	bf00      	nop
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40005400 	.word	0x40005400
 80014b4:	20000060 	.word	0x20000060

080014b8 <I2C1_EV_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void I2C1_EV_IRQHandler()
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
	volatile uint32_t Dummy_Read = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]

	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_3 = (I2C1->SR1 & (I2C_SR1_STOPF));		// Stop detection (slave mode)
 80014c2:	4b36      	ldr	r3, [pc, #216]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	60fb      	str	r3, [r7, #12]
	Temp_1 = (I2C1->CR2 & (I2C_CR2_ITEVTEN));	// Event interrupt enable
 80014cc:	4b33      	ldr	r3, [pc, #204]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d4:	60bb      	str	r3, [r7, #8]
	Temp_2 = (I2C1->CR2 & (I2C_CR2_ITBUFEN));	// Buffer interrupt enable
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014de:	607b      	str	r3, [r7, #4]
	//check Stop detection
	if(Temp_1 && Temp_3)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00a      	beq.n	80014fc <I2C1_EV_IRQHandler+0x44>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <I2C1_EV_IRQHandler+0x44>
	{
		//Cleared by software reading the SR1 register followed by a write in the CR1 register, or by hardware when PE=0
		I2C1->CR1 |= 0x0000;
 80014ec:	4b2b      	ldr	r3, [pc, #172]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014ee:	4a2b      	ldr	r2, [pc, #172]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6013      	str	r3, [r2, #0]
		Slave_Status(I2C1 , I2C_EV_STOP);
 80014f4:	2100      	movs	r1, #0
 80014f6:	4829      	ldr	r0, [pc, #164]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014f8:	f7ff ff72 	bl	80013e0 <Slave_Status>
	}
	// Check address matched.
	Temp_3 = (I2C1->SR1 & (I2C_SR1_ADDR));
 80014fc:	4b27      	ldr	r3, [pc, #156]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_3)
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d012      	beq.n	8001532 <I2C1_EV_IRQHandler+0x7a>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00f      	beq.n	8001532 <I2C1_EV_IRQHandler+0x7a>
	{
		// Note: In slave mode, it is recommended to perform the complete clearing sequence (READ SR1 then READ SR2) after ADDR is set. Refer to Figure 272
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 8001512:	4b22      	ldr	r3, [pc, #136]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <I2C1_EV_IRQHandler+0x7a>
			// Master mode
		}
		else
		{
			// Slave mode
			Dummy_Read  = I2C1->SR1 ;
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001520:	695b      	ldr	r3, [r3, #20]
 8001522:	603b      	str	r3, [r7, #0]
			Dummy_Read  = I2C1->SR2 ;
 8001524:	4b1d      	ldr	r3, [pc, #116]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	603b      	str	r3, [r7, #0]
			Slave_Status(I2C1 , I2C_EV_ADDR_Matched) ;
 800152a:	2101      	movs	r1, #1
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 800152e:	f7ff ff57 	bl	80013e0 <Slave_Status>
		}
	}
	// Data register empty at slave_transmitter
	Temp_3 = (I2C1->SR1 & (I2C_SR1_TXE));
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800153a:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00f      	beq.n	8001562 <I2C1_EV_IRQHandler+0xaa>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00c      	beq.n	8001562 <I2C1_EV_IRQHandler+0xaa>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d009      	beq.n	8001562 <I2C1_EV_IRQHandler+0xaa>
	{
		//Cleared by software writing to the DR register or by hardware after a start or a stop condition or when PE=0
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 800154e:	4b13      	ldr	r3, [pc, #76]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001550:	699b      	ldr	r3, [r3, #24]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <I2C1_EV_IRQHandler+0xaa>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_REQ);
 800155a:	2102      	movs	r1, #2
 800155c:	480f      	ldr	r0, [pc, #60]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 800155e:	f7ff ff3f 	bl	80013e0 <Slave_Status>
		}
	}
	// Data register not empty at slave receive
	Temp_3 = (I2C1->SR1 & (I2C_SR1_RXNE));
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001564:	695b      	ldr	r3, [r3, #20]
 8001566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800156a:	60fb      	str	r3, [r7, #12]
	if(Temp_1 && Temp_2 && Temp_3)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <I2C1_EV_IRQHandler+0xda>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00c      	beq.n	8001592 <I2C1_EV_IRQHandler+0xda>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d009      	beq.n	8001592 <I2C1_EV_IRQHandler+0xda>
	{
		// Check master mode or slave mode
		if(I2C1->SR2 & (I2C_SR2_MSL))
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <I2C1_EV_IRQHandler+0xda>
			// Master mode
		}
		else
		{
			// Slave mode
			Slave_Status(I2C1 , I2C_EV_DATA_RCV);
 800158a:	2103      	movs	r1, #3
 800158c:	4803      	ldr	r0, [pc, #12]	; (800159c <I2C1_EV_IRQHandler+0xe4>)
 800158e:	f7ff ff27 	bl	80013e0 <Slave_Status>
		}
	}
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40005400 	.word	0x40005400

080015a0 <MCAL_Get_SYSCLC_FREQ>:
110: HCLK divided by 8
111: HCLK divided by 16
*/

uint32_t MCAL_Get_SYSCLC_FREQ(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	//00: HSI oscillator used as system clock
	//01: HSE oscillator used as system clock
	//10: PLL used as system clock
	//11: Not applicable

	switch(RCC->CFGR >> 2)
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <MCAL_Get_SYSCLC_FREQ+0x24>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	089b      	lsrs	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d002      	beq.n	80015b4 <MCAL_Get_SYSCLC_FREQ+0x14>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d002      	beq.n	80015b8 <MCAL_Get_SYSCLC_FREQ+0x18>
 80015b2:	e003      	b.n	80015bc <MCAL_Get_SYSCLC_FREQ+0x1c>
	{
	case 0:
		return HSI_oscillator_clock ;
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <MCAL_Get_SYSCLC_FREQ+0x28>)
 80015b6:	e001      	b.n	80015bc <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	case 1:
		return HSE_oscillator_clock ;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <MCAL_Get_SYSCLC_FREQ+0x2c>)
 80015ba:	e7ff      	b.n	80015bc <MCAL_Get_SYSCLC_FREQ+0x1c>
		break;
	}
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr
 80015c4:	40021000 	.word	0x40021000
 80015c8:	007a1200 	.word	0x007a1200
 80015cc:	00f42400 	.word	0x00f42400

080015d0 <MCAL_Get_PCLC1_FREQ>:
{
	//Bits 7:4 HPRE[3:0]: AHB prescaler
	return ( MCAL_Get_SYSCLC_FREQ() >> HPRE_table[ ( RCC->CFGR >> 4 ) & 0XF ] ) ;
}
uint32_t MCAL_Get_PCLC1_FREQ(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	//Bits 10:8 PPRE1[2:0]: APB Low-speed prescaler (APB1)
	return ( MCAL_Get_SYSCLC_FREQ() >> PPRE1_table[ ( RCC->CFGR >> 8 ) & 0X11 ] ) ;
 80015d4:	f7ff ffe4 	bl	80015a0 <MCAL_Get_SYSCLC_FREQ>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <MCAL_Get_PCLC1_FREQ+0x20>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 0311 	and.w	r3, r3, #17
 80015e4:	4903      	ldr	r1, [pc, #12]	; (80015f4 <MCAL_Get_PCLC1_FREQ+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08001ba0 	.word	0x08001ba0

080015f8 <SPI1_IRQHandler>:
 *
 * ===============================================================
 */

void SPI1_IRQHandler ( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI1->SR & 1<<1 ) >>1 )  ;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <SPI1_IRQHandler+0x54>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	085b      	lsrs	r3, r3, #1
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	b2da      	uxtb	r2, r3
 800160a:	793b      	ldrb	r3, [r7, #4]
 800160c:	f362 0300 	bfi	r3, r2, #0, #1
 8001610:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI1->SR & 1<<0 ) >>0 )  ;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <SPI1_IRQHandler+0x54>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	793b      	ldrb	r3, [r7, #4]
 800161e:	f362 0341 	bfi	r3, r2, #1, #1
 8001622:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI1->SR & 1<<4 ) >>4 )  ;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <SPI1_IRQHandler+0x54>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	091b      	lsrs	r3, r3, #4
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	793b      	ldrb	r3, [r7, #4]
 8001632:	f362 0382 	bfi	r3, r2, #2, #1
 8001636:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[0]->P_IRQ_CALL ( IRQ_SRC ) ;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SPI1_IRQHandler+0x58>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	7938      	ldrb	r0, [r7, #4]
 8001640:	4798      	blx	r3
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40013000 	.word	0x40013000
 8001650:	20000098 	.word	0x20000098

08001654 <SPI2_IRQHandler>:

void SPI2_IRQHandler ( void )
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	struct S_IRQ_SRC IRQ_SRC ;
	IRQ_SRC.TXE   = ( ( SPI2->SR & 1<<1 ) >>1 )  ;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <SPI2_IRQHandler+0x54>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	085b      	lsrs	r3, r3, #1
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	793b      	ldrb	r3, [r7, #4]
 8001668:	f362 0300 	bfi	r3, r2, #0, #1
 800166c:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.RXNE  = ( ( SPI2->SR & 1<<0 ) >>0 )  ;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <SPI2_IRQHandler+0x54>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	793b      	ldrb	r3, [r7, #4]
 800167a:	f362 0341 	bfi	r3, r2, #1, #1
 800167e:	713b      	strb	r3, [r7, #4]
	IRQ_SRC.ERROR = ( ( SPI2->SR & 1<<4 ) >>4 )  ;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <SPI2_IRQHandler+0x54>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	b2da      	uxtb	r2, r3
 800168c:	793b      	ldrb	r3, [r7, #4]
 800168e:	f362 0382 	bfi	r3, r2, #2, #1
 8001692:	713b      	strb	r3, [r7, #4]

	g_SPI_Config[1]->P_IRQ_CALL ( IRQ_SRC ) ;
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <SPI2_IRQHandler+0x58>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	7938      	ldrb	r0, [r7, #4]
 800169c:	4798      	blx	r3
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40003800 	.word	0x40003800
 80016ac:	20000098 	.word	0x20000098

080016b0 <MCAL_TIMx_Init>:
* @param [in] 		-Chan:  specified channel from 1 to 4
* @retval 			-none
* Note				-Support Fast PWM and Normal ( delay mode )
*/
void MCAL_TIMx_Init( TIMx_TypeDef* TIMx , TIMx_config_t* TIMx_Config , channel Chan )
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	4613      	mov	r3, r2
 80016bc:	71fb      	strb	r3, [r7, #7]
	GPIO_Pinconfig_t pinconfig ;
	// Enable counter and Disable update event
	TIMx->CR1=0b10000001;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2281      	movs	r2, #129	; 0x81
 80016c2:	601a      	str	r2, [r3, #0]
	//set delay mode or PWM mode
	if(TIMx_Config->MODE != TIMx_MODE_Delay)
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	f000 80d3 	beq.w	8001874 <MCAL_TIMx_Init+0x1c4>
	{
		// set pin
		if(TIMx==TIM2)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d4:	d131      	bne.n	800173a <MCAL_TIMx_Init+0x8a>
		{
			RCC_TIM2_CLK_Enable();//clock enable
 80016d6:	4ba0      	ldr	r3, [pc, #640]	; (8001958 <MCAL_TIMx_Init+0x2a8>)
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	4a9f      	ldr	r2, [pc, #636]	; (8001958 <MCAL_TIMx_Init+0x2a8>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	61d3      	str	r3, [r2, #28]
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 80016e2:	2306      	movs	r3, #6
 80016e4:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d817      	bhi.n	8001720 <MCAL_TIMx_Init+0x70>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <MCAL_TIMx_Init+0x48>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001709 	.word	0x08001709
 80016fc:	0800170f 	.word	0x0800170f
 8001700:	08001715 	.word	0x08001715
 8001704:	0800171b 	.word	0x0800171b
			{
			case CH1 :
				{
					//set pin outpt
					pinconfig.pinNumber = GPIO_PIN_0 ;
 8001708:	2301      	movs	r3, #1
 800170a:	82bb      	strh	r3, [r7, #20]
					break;
 800170c:	e008      	b.n	8001720 <MCAL_TIMx_Init+0x70>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 800170e:	2302      	movs	r3, #2
 8001710:	82bb      	strh	r3, [r7, #20]
					break;
 8001712:	e005      	b.n	8001720 <MCAL_TIMx_Init+0x70>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_2 ;
 8001714:	2304      	movs	r3, #4
 8001716:	82bb      	strh	r3, [r7, #20]
					break;
 8001718:	e002      	b.n	8001720 <MCAL_TIMx_Init+0x70>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_3 ;
 800171a:	2308      	movs	r3, #8
 800171c:	82bb      	strh	r3, [r7, #20]
					break;
 800171e:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	488d      	ldr	r0, [pc, #564]	; (800195c <MCAL_TIMx_Init+0x2ac>)
 8001728:	f7ff fda4 	bl	8001274 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 800172c:	4b8c      	ldr	r3, [pc, #560]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a8b      	ldr	r2, [pc, #556]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 8001732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e072      	b.n	8001820 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM3)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a89      	ldr	r2, [pc, #548]	; (8001964 <MCAL_TIMx_Init+0x2b4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d13d      	bne.n	80017be <MCAL_TIMx_Init+0x10e>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 8001742:	2306      	movs	r3, #6
 8001744:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 8001746:	2301      	movs	r3, #1
 8001748:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b03      	cmp	r3, #3
 800174e:	d82f      	bhi.n	80017b0 <MCAL_TIMx_Init+0x100>
 8001750:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <MCAL_TIMx_Init+0xa8>)
 8001752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001756:	bf00      	nop
 8001758:	08001769 	.word	0x08001769
 800175c:	0800177b 	.word	0x0800177b
 8001760:	0800178d 	.word	0x0800178d
 8001764:	0800179f 	.word	0x0800179f
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 8001768:	2340      	movs	r3, #64	; 0x40
 800176a:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	487a      	ldr	r0, [pc, #488]	; (800195c <MCAL_TIMx_Init+0x2ac>)
 8001774:	f7ff fd7e 	bl	8001274 <MCAL_GPIO_Init>
					break;
 8001778:	e01a      	b.n	80017b0 <MCAL_TIMx_Init+0x100>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOA, &pinconfig) ;
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4875      	ldr	r0, [pc, #468]	; (800195c <MCAL_TIMx_Init+0x2ac>)
 8001786:	f7ff fd75 	bl	8001274 <MCAL_GPIO_Init>
					break;
 800178a:	e011      	b.n	80017b0 <MCAL_TIMx_Init+0x100>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_0 ;
 800178c:	2301      	movs	r3, #1
 800178e:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	4619      	mov	r1, r3
 8001796:	4874      	ldr	r0, [pc, #464]	; (8001968 <MCAL_TIMx_Init+0x2b8>)
 8001798:	f7ff fd6c 	bl	8001274 <MCAL_GPIO_Init>
					break;
 800179c:	e008      	b.n	80017b0 <MCAL_TIMx_Init+0x100>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_1 ;
 800179e:	2302      	movs	r3, #2
 80017a0:	82bb      	strh	r3, [r7, #20]
					MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	486f      	ldr	r0, [pc, #444]	; (8001968 <MCAL_TIMx_Init+0x2b8>)
 80017aa:	f7ff fd63 	bl	8001274 <MCAL_GPIO_Init>
					break;
 80017ae:	bf00      	nop
				}
			}
			//Disable interrupt
			 NVIC_IRQ28_TIM2_Disable();
 80017b0:	4b6b      	ldr	r3, [pc, #428]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6a      	ldr	r2, [pc, #424]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	e030      	b.n	8001820 <MCAL_TIMx_Init+0x170>
		}
		else if(TIMx==TIM4)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4a6a      	ldr	r2, [pc, #424]	; (800196c <MCAL_TIMx_Init+0x2bc>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d12c      	bne.n	8001820 <MCAL_TIMx_Init+0x170>
		{
			pinconfig.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP  ;
 80017c6:	2306      	movs	r3, #6
 80017c8:	75bb      	strb	r3, [r7, #22]
			pinconfig.GPIO_OUTPUT_Speed = GPIO_speed_10M ;
 80017ca:	2301      	movs	r3, #1
 80017cc:	75fb      	strb	r3, [r7, #23]
			switch(Chan)
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	2b03      	cmp	r3, #3
 80017d2:	d819      	bhi.n	8001808 <MCAL_TIMx_Init+0x158>
 80017d4:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <MCAL_TIMx_Init+0x12c>)
 80017d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017da:	bf00      	nop
 80017dc:	080017ed 	.word	0x080017ed
 80017e0:	080017f3 	.word	0x080017f3
 80017e4:	080017f9 	.word	0x080017f9
 80017e8:	08001801 	.word	0x08001801
			{
			case CH1 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_6 ;
 80017ec:	2340      	movs	r3, #64	; 0x40
 80017ee:	82bb      	strh	r3, [r7, #20]
					break;
 80017f0:	e00a      	b.n	8001808 <MCAL_TIMx_Init+0x158>
				}
			case CH2 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_7 ;
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	82bb      	strh	r3, [r7, #20]
					break;
 80017f6:	e007      	b.n	8001808 <MCAL_TIMx_Init+0x158>
				}
			case CH3 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_8 ;
 80017f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017fc:	82bb      	strh	r3, [r7, #20]
					break;
 80017fe:	e003      	b.n	8001808 <MCAL_TIMx_Init+0x158>
				}
			case CH4 :
				{
					//set pin output
					pinconfig.pinNumber = GPIO_PIN_9 ;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	82bb      	strh	r3, [r7, #20]

					break;
 8001806:	bf00      	nop
				}
			}
			MCAL_GPIO_Init(GPIOB, &pinconfig) ;
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	4856      	ldr	r0, [pc, #344]	; (8001968 <MCAL_TIMx_Init+0x2b8>)
 8001810:	f7ff fd30 	bl	8001274 <MCAL_GPIO_Init>
			//Disable interrupt
			 NVIC_IRQ30_TIM4_Disable();
 8001814:	4b52      	ldr	r3, [pc, #328]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a51      	ldr	r2, [pc, #324]	; (8001960 <MCAL_TIMx_Init+0x2b0>)
 800181a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800181e:	6013      	str	r3, [r2, #0]
		}
		// set PWM mode 1 or PWM mode 2 and Output compare  preload enable
		switch(Chan)
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b03      	cmp	r3, #3
 8001824:	d850      	bhi.n	80018c8 <MCAL_TIMx_Init+0x218>
 8001826:	a201      	add	r2, pc, #4	; (adr r2, 800182c <MCAL_TIMx_Init+0x17c>)
 8001828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182c:	0800183d 	.word	0x0800183d
 8001830:	0800184b 	.word	0x0800184b
 8001834:	08001859 	.word	0x08001859
 8001838:	08001867 	.word	0x08001867
		{
		case CH1 :
			{
				TIMx->CCMR1 |=15<<3;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	619a      	str	r2, [r3, #24]
				break;
 8001848:	e03e      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 |=15<<11;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	619a      	str	r2, [r3, #24]
				break;
 8001856:	e037      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 |=15<<3;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	69db      	ldr	r3, [r3, #28]
 800185c:	f043 0278 	orr.w	r2, r3, #120	; 0x78
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	61da      	str	r2, [r3, #28]
				break;
 8001864:	e030      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2 |=15<<11;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f443 42f0 	orr.w	r2, r3, #30720	; 0x7800
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	61da      	str	r2, [r3, #28]
				break;
 8001872:	e029      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
		}
	}
	else
	{
		//delay mode
		switch(Chan)
 8001874:	79fb      	ldrb	r3, [r7, #7]
 8001876:	2b03      	cmp	r3, #3
 8001878:	d826      	bhi.n	80018c8 <MCAL_TIMx_Init+0x218>
 800187a:	a201      	add	r2, pc, #4	; (adr r2, 8001880 <MCAL_TIMx_Init+0x1d0>)
 800187c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001880:	08001891 	.word	0x08001891
 8001884:	0800189f 	.word	0x0800189f
 8001888:	080018ad 	.word	0x080018ad
 800188c:	080018bb 	.word	0x080018bb
		{
		case CH1 :
			{
				TIMx->CCMR1 &=~(15<<3);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	619a      	str	r2, [r3, #24]
				break;
 800189c:	e014      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH2 :
			{
				TIMx->CCMR1 &=~(15<<11);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	619a      	str	r2, [r3, #24]
				break;
 80018aa:	e00d      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH3 :
			{
				TIMx->CCMR2 &=~(15<<3);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	69db      	ldr	r3, [r3, #28]
 80018b0:	f023 0278 	bic.w	r2, r3, #120	; 0x78
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	61da      	str	r2, [r3, #28]
				break;
 80018b8:	e006      	b.n	80018c8 <MCAL_TIMx_Init+0x218>
			}
		case CH4 :
			{
				TIMx->CCMR2  &=~(15<<11);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	61da      	str	r2, [r3, #28]
				break;
 80018c6:	bf00      	nop
			}
		}
	}
	//output polarity and  output enable
	switch(Chan)
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d836      	bhi.n	800193c <MCAL_TIMx_Init+0x28c>
 80018ce:	a201      	add	r2, pc, #4	; (adr r2, 80018d4 <MCAL_TIMx_Init+0x224>)
 80018d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d4:	080018e5 	.word	0x080018e5
 80018d8:	080018fb 	.word	0x080018fb
 80018dc:	08001911 	.word	0x08001911
 80018e0:	08001927 	.word	0x08001927
	{
	case CH1 :
		{
			TIMx->CCER|=1<<0;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR1 = 10000;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80018f8:	e020      	b.n	800193c <MCAL_TIMx_Init+0x28c>
		}
	case CH2 :
		{
			TIMx->CCER|=1<<4;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	f043 0210 	orr.w	r2, r3, #16
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR2 = 10000;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f242 7210 	movw	r2, #10000	; 0x2710
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800190e:	e015      	b.n	800193c <MCAL_TIMx_Init+0x28c>
		}
	case CH3 :
		{
			TIMx->CCER|=1<<8;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR3 = 10000;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001922:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8001924:	e00a      	b.n	800193c <MCAL_TIMx_Init+0x28c>
		}
	case CH4 :
		{
			TIMx->CCER|=1<<12;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	621a      	str	r2, [r3, #32]
			//set init Compare value 10000
			TIMx->CCR4 = 10000;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f242 7210 	movw	r2, #10000	; 0x2710
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800193a:	bf00      	nop
		}
	}
	// set Prescalers
	TIMx->PSC = TIMx_Config->Prescalers;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	889b      	ldrh	r3, [r3, #4]
 8001940:	461a      	mov	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	629a      	str	r2, [r3, #40]	; 0x28
	//set init top value 20000
	TIMx->ARR = 20000;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f644 6220 	movw	r2, #20000	; 0x4e20
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010800 	.word	0x40010800
 8001960:	e000e180 	.word	0xe000e180
 8001964:	40000400 	.word	0x40000400
 8001968:	40010c00 	.word	0x40010c00
 800196c:	40000800 	.word	0x40000800

08001970 <MCAL_TIMx_Set_Compare_Value>:
* @param [in] 		-Chan: Chose channel 1,2,3 or 4 (TIMx contains 4 channel)
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_Compare_Value( TIMx_TypeDef* TIMx  , uint16_t Compare_Value , channel Chan )
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]

	switch(Chan)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b03      	cmp	r3, #3
 8001984:	d81a      	bhi.n	80019bc <MCAL_TIMx_Set_Compare_Value+0x4c>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <MCAL_TIMx_Set_Compare_Value+0x1c>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	0800199d 	.word	0x0800199d
 8001990:	080019a5 	.word	0x080019a5
 8001994:	080019ad 	.word	0x080019ad
 8001998:	080019b5 	.word	0x080019b5
	{
	case CH1 :
		{
			TIMx->CCR1 = Compare_Value;
 800199c:	887a      	ldrh	r2, [r7, #2]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80019a2:	e00b      	b.n	80019bc <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH2 :
		{
			TIMx->CCR2 = Compare_Value;
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80019aa:	e007      	b.n	80019bc <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH3 :
		{
			TIMx->CCR3 = Compare_Value;
 80019ac:	887a      	ldrh	r2, [r7, #2]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 80019b2:	e003      	b.n	80019bc <MCAL_TIMx_Set_Compare_Value+0x4c>
		}
	case CH4 :
		{
			TIMx->CCR4 = Compare_Value;
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80019ba:	bf00      	nop
		}
	}
	TIM3->EGR |=1<<0;
 80019bc:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <MCAL_TIMx_Set_Compare_Value+0x64>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	4a04      	ldr	r2, [pc, #16]	; (80019d4 <MCAL_TIMx_Set_Compare_Value+0x64>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6153      	str	r3, [r2, #20]
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40000400 	.word	0x40000400

080019d8 <MCAL_TIMx_Set_TOP_Value>:
* @param [in] 		-TIMx:  specified TIMx x=[ 2 : 3 ]
* @retval 			-none
* Note				-none
*/
void MCAL_TIMx_Set_TOP_Value( TIMx_TypeDef* TIMx  , uint16_t TOP_Value )
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
	TIMx->ARR=TOP_Value;
 80019e4:	887a      	ldrh	r2, [r7, #2]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <MCAL_TIM4_CAP_Init>:
//================================================================================================



void MCAL_TIM4_CAP_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	//set pin capture input channel 1
	GPIO_Pinconfig_t pinconfig ;
	pinconfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80019fa:	2301      	movs	r3, #1
 80019fc:	71bb      	strb	r3, [r7, #6]
	pinconfig.pinNumber = GPIO_PIN_6;
 80019fe:	2340      	movs	r3, #64	; 0x40
 8001a00:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOB, &pinconfig);
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	4619      	mov	r1, r3
 8001a06:	4816      	ldr	r0, [pc, #88]	; (8001a60 <MCAL_TIM4_CAP_Init+0x6c>)
 8001a08:	f7ff fc34 	bl	8001274 <MCAL_GPIO_Init>

	//set Prescalers 7+1=8 TIM4 Clock=8mhz/8=1mh
	TIM4->PSC |= 7;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a12:	f043 0307 	orr.w	r3, r3, #7
 8001a16:	6293      	str	r3, [r2, #40]	; 0x28
	//set top value
	TIM4->ARR |= 0XFFFF;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a1e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8001a22:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8001a26:	62d3      	str	r3, [r2, #44]	; 0x2c
	//CC1 channel is configured as input, IC1 is mapped on TI1
	TIM4->CCMR1 |= 0x31;
 8001a28:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a2e:	f043 0331 	orr.w	r3, r3, #49	; 0x31
 8001a32:	6193      	str	r3, [r2, #24]



	TIM4->CR1 &= ~(3 << 8);		// Bits 9:8 CKD: Clock division	-	00: tDTS = tCK_INT
 8001a34:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0a      	ldr	r2, [pc, #40]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3e:	6013      	str	r3, [r2, #0]

	TIM4->CR1 |= (1 << 7); 		//Bit 7 ARPE: Auto-reload preload enable
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4a:	6013      	str	r3, [r2, #0]




	// Enable capture on CC1
	TIM4->CCER |= (1<<0);
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <MCAL_TIM4_CAP_Init+0x70>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6213      	str	r3, [r2, #32]
}
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010c00 	.word	0x40010c00
 8001a64:	40000800 	.word	0x40000800

08001a68 <MCAL_TIM4_CAP_Get_High>:


float MCAL_TIM4_CAP_Get_High(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	float temp = 0;
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	607b      	str	r3, [r7, #4]
	// enable counter
	TIM4->CR1 |= 1;
 8001a74:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]

	//wait until raising edge
	while(!(TIM4->SR &(1<<1)));
 8001a80:	bf00      	nop
 8001a82:	4b1f      	ldr	r3, [pc, #124]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f9      	beq.n	8001a82 <MCAL_TIM4_CAP_Get_High+0x1a>
	TIM4->SR=0;
 8001a8e:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
	//reset counter
	TIM4->CNT=0;
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	625a      	str	r2, [r3, #36]	; 0x24
	//Set CAP at falling edge
	TIM4->CCER |=1<<1;
 8001a9a:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001aa0:	f043 0302 	orr.w	r3, r3, #2
 8001aa4:	6213      	str	r3, [r2, #32]
	//wait until falling edge
	while(!(TIM4->SR &(1<<1)));
 8001aa6:	bf00      	nop
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0f9      	beq.n	8001aa8 <MCAL_TIM4_CAP_Get_High+0x40>
	TIM4->SR=0;
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]

	temp = ((1.0/1000000)*TIM4->CCR1);
 8001aba:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fc98 	bl	80003f4 <__aeabi_ui2d>
 8001ac4:	a30c      	add	r3, pc, #48	; (adr r3, 8001af8 <MCAL_TIM4_CAP_Get_High+0x90>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd0d 	bl	80004e8 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7fe ff39 	bl	800094c <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	607b      	str	r3, [r7, #4]

	// disable counter
	TIM4->CR1 &= ~(1);
 8001ade:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a07      	ldr	r2, [pc, #28]	; (8001b00 <MCAL_TIM4_CAP_Get_High+0x98>)
 8001ae4:	f023 0301 	bic.w	r3, r3, #1
 8001ae8:	6013      	str	r3, [r2, #0]
	return temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	f3af 8000 	nop.w
 8001af8:	a0b5ed8d 	.word	0xa0b5ed8d
 8001afc:	3eb0c6f7 	.word	0x3eb0c6f7
 8001b00:	40000800 	.word	0x40000800

08001b04 <USART1_IRQHandler>:
 *                      ISR Function Definitions
 *
 * ===============================================================
 */
void USART1_IRQHandler (void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	g_USART_Config[0]->P_IRQ_CALL() ;
 8001b08:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <USART1_IRQHandler+0x10>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	4798      	blx	r3
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200000a0 	.word	0x200000a0

08001b18 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	g_USART_Config[1]->P_IRQ_CALL() ;
 8001b1c:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <USART2_IRQHandler+0x10>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	68db      	ldr	r3, [r3, #12]
 8001b22:	4798      	blx	r3
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000a0 	.word	0x200000a0

08001b2c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
	g_USART_Config[2]->P_IRQ_CALL() ;
 8001b30:	4b02      	ldr	r3, [pc, #8]	; (8001b3c <USART3_IRQHandler+0x10>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	4798      	blx	r3
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200000a0 	.word	0x200000a0

08001b40 <__libc_init_array>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	2600      	movs	r6, #0
 8001b44:	4d0c      	ldr	r5, [pc, #48]	; (8001b78 <__libc_init_array+0x38>)
 8001b46:	4c0d      	ldr	r4, [pc, #52]	; (8001b7c <__libc_init_array+0x3c>)
 8001b48:	1b64      	subs	r4, r4, r5
 8001b4a:	10a4      	asrs	r4, r4, #2
 8001b4c:	42a6      	cmp	r6, r4
 8001b4e:	d109      	bne.n	8001b64 <__libc_init_array+0x24>
 8001b50:	f000 f81a 	bl	8001b88 <_init>
 8001b54:	2600      	movs	r6, #0
 8001b56:	4d0a      	ldr	r5, [pc, #40]	; (8001b80 <__libc_init_array+0x40>)
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <__libc_init_array+0x44>)
 8001b5a:	1b64      	subs	r4, r4, r5
 8001b5c:	10a4      	asrs	r4, r4, #2
 8001b5e:	42a6      	cmp	r6, r4
 8001b60:	d105      	bne.n	8001b6e <__libc_init_array+0x2e>
 8001b62:	bd70      	pop	{r4, r5, r6, pc}
 8001b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b68:	4798      	blx	r3
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	e7ee      	b.n	8001b4c <__libc_init_array+0xc>
 8001b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b72:	4798      	blx	r3
 8001b74:	3601      	adds	r6, #1
 8001b76:	e7f2      	b.n	8001b5e <__libc_init_array+0x1e>
 8001b78:	08001ba8 	.word	0x08001ba8
 8001b7c:	08001ba8 	.word	0x08001ba8
 8001b80:	08001ba8 	.word	0x08001ba8
 8001b84:	08001bac 	.word	0x08001bac

08001b88 <_init>:
 8001b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b8a:	bf00      	nop
 8001b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b8e:	bc08      	pop	{r3}
 8001b90:	469e      	mov	lr, r3
 8001b92:	4770      	bx	lr

08001b94 <_fini>:
 8001b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b96:	bf00      	nop
 8001b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b9a:	bc08      	pop	{r3}
 8001b9c:	469e      	mov	lr, r3
 8001b9e:	4770      	bx	lr
